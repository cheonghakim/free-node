{"version":3,"file":"free-node.umd.js","sources":["../src/core/Registry.js","../src/utils/utils.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Graph.js","../src/render/hitTest.js","../src/render/CanvasRenderer.js","../src/core/commands.js","../src/core/CommandStack.js","../src/interact/Controller.js","../src/core/Runner.js","../src/index.js","../src/core/Hooks.js"],"sourcesContent":["// src/core/Registry.js\r\nexport class Registry {\r\n  constructor() {\r\n    this.types = new Map();\r\n  }\r\n  register(type, def) {\r\n    // def: {title?, size?, inputs?, outputs?, onCreate?, onExecute?, onDraw?}\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.set(type, def);\r\n  }\r\n  createInstance(type) {\r\n    const def = this.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    return def;\r\n  }\r\n}\r\n","export function randomUUID() {\r\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\r\n    // 네이티브 지원\r\n    return crypto.randomUUID();\r\n  }\r\n\r\n  // 네이티브 미지원 → RFC 4122 v4 직접 구현\r\n  const bytes = new Uint8Array(16);\r\n  crypto.getRandomValues(bytes);\r\n\r\n  // RFC4122 version & variant bits 설정\r\n  bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n  const hex = Array.from(bytes).map((b) => b.toString(16).padStart(2, \"0\"));\r\n\r\n  return (\r\n    hex.slice(0, 4).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(4, 6).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(6, 8).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(8, 10).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(10).join(\"\")\r\n  );\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Node.js\r\nexport class Node {\r\n  constructor({ id, type, title, x = 0, y = 0, width = 160, height = 60 }) {\r\n    this.id = id ?? randomUUID();\r\n    this.type = type;\r\n    this.title = title ?? type;\r\n    this.pos = { x, y };\r\n    this.size = { width, height };\r\n    this.inputs = []; // {id,name,datatype}\r\n    this.outputs = []; // {id,name,datatype}\r\n    this.state = {}; // 사용자 상태\r\n  }\r\n  addInput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"in\" };\r\n    this.inputs.push(port);\r\n    return port;\r\n  }\r\n  addOutput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"out\" };\r\n    this.outputs.push(port);\r\n    return port;\r\n  }\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Edge.js\r\nexport class Edge {\r\n  constructor({ id, fromNode, fromPort, toNode, toPort }) {\r\n    this.id = id ?? randomUUID();\r\n    this.fromNode = fromNode;\r\n    this.fromPort = fromPort;\r\n    this.toNode = toNode;\r\n    this.toPort = toPort;\r\n  }\r\n}\r\n","import { Node } from \"./Node.js\";\r\nimport { Edge } from \"./Edge.js\";\r\n\r\nexport class Graph {\r\n  constructor({ hooks, registry }) {\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n    this.hooks = hooks;\r\n    this.registry = registry;\r\n    // double buffer for deterministic cycles\r\n    this._valuesA = new Map(); // current\r\n    this._valuesB = new Map(); // next\r\n    this._useAasCurrent = true;\r\n  }\r\n  getNodeById(id) {\r\n    for (let [_id, node] of this.nodes.entries()) {\r\n      if (id === _id) {\r\n        return node;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  addNode(type, opts = {}) {\r\n    const def = this.registry.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    const node = new Node({\r\n      type,\r\n      title: def.title,\r\n      width: def.size?.w,\r\n      height: def.size?.h,\r\n      ...opts,\r\n    });\r\n    for (const i of def.inputs || []) node.addInput(i.name, i.datatype);\r\n    for (const o of def.outputs || []) node.addOutput(o.name, o.datatype);\r\n    def.onCreate?.(node);\r\n    this.nodes.set(node.id, node);\r\n    this.hooks?.emit(\"node:create\", node);\r\n    return node;\r\n  }\r\n  removeNode(nodeId) {\r\n    for (const [eid, e] of this.edges)\r\n      if (e.fromNode === nodeId || e.toNode === nodeId) this.edges.delete(eid);\r\n    this.nodes.delete(nodeId);\r\n  }\r\n  addEdge(fromNode, fromPort, toNode, toPort) {\r\n    const e = new Edge({ fromNode, fromPort, toNode, toPort });\r\n    this.edges.set(e.id, e);\r\n    this.hooks?.emit(\"edge:create\", e);\r\n    return e;\r\n  }\r\n\r\n  clear() {\r\n    this.nodes?.clear();\r\n    this.edges?.clear();\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n  }\r\n\r\n  // buffer helpers\r\n  _curBuf() {\r\n    return this._useAasCurrent ? this._valuesA : this._valuesB;\r\n  }\r\n  _nextBuf() {\r\n    return this._useAasCurrent ? this._valuesB : this._valuesA;\r\n  }\r\n  swapBuffers() {\r\n    // when moving to next cycle, promote next->current and clear next\r\n    this._useAasCurrent = !this._useAasCurrent;\r\n    this._nextBuf().clear();\r\n  }\r\n  // data helpers\r\n  setOutput(nodeId, portId, value) {\r\n    this._nextBuf().set(`${nodeId}:${portId}`, value);\r\n  }\r\n  getInput(nodeId, portId) {\r\n    // find upstream edge feeding this input\r\n    for (const e of this.edges.values()) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return this._curBuf().get(`${e.fromNode}:${e.fromPort}`);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  toJSON() {\r\n    const json = {\r\n      nodes: [...this.nodes.values()].map((n) => ({\r\n        id: n.id,\r\n        type: n.type,\r\n        title: n.title,\r\n        x: n.pos.x,\r\n        y: n.pos.y,\r\n        w: n.size.width,\r\n        h: n.size.height,\r\n        inputs: n.inputs,\r\n        outputs: n.outputs,\r\n        state: n.state,\r\n      })),\r\n      edges: [...this.edges.values()],\r\n    };\r\n    this.hooks?.emit(\"graph:serialize\", json);\r\n    return json;\r\n  }\r\n  static fromJSON(json, { hooks, registry }) {\r\n    const g = new Graph({ hooks, registry });\r\n    for (const nd of json.nodes) {\r\n      const node = new Node({\r\n        id: nd.id,\r\n        type: nd.type,\r\n        title: nd.title,\r\n        x: nd.x,\r\n        y: nd.y,\r\n        width: nd.w,\r\n        height: nd.h,\r\n      });\r\n      node.inputs = nd.inputs;\r\n      node.outputs = nd.outputs;\r\n      node.state = nd.state || {};\r\n      g.nodes.set(node.id, node);\r\n    }\r\n    for (const ed of json.edges) g.edges.set(ed.id, new Edge(ed));\r\n    return g;\r\n  }\r\n}\r\n","// src/render/hitTest.js\r\nexport function hitTestNode(node, x, y) {\r\n  const { x: nx, y: ny } = node.pos;\r\n  const { width, height } = node.size;\r\n  return x >= nx && x <= nx + width && y >= ny && y <= ny + height;\r\n}\r\nexport function portRect(node, port, idx, dir) {\r\n  const pad = 8,\r\n    row = 20;\r\n  const y = node.pos.y + 28 + idx * row;\r\n  if (dir === \"in\") return { x: node.pos.x - pad, y, w: pad, h: 14 };\r\n  if (dir === \"out\")\r\n    return { x: node.pos.x + node.size.width, y, w: pad, h: 14 };\r\n}\r\n","import { hitTestNode, portRect } from \"./hitTest.js\";\r\n\r\nexport class CanvasRenderer {\r\n  constructor(canvas, { theme = {}, registry, edgeStyle = \"orthogonal\" } = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.registry = registry; // to call per-node onDraw\r\n\r\n    // viewport transform\r\n    this.scale = 1;\r\n    this.minScale = 0.25;\r\n    this.maxScale = 3;\r\n    this.offsetX = 0;\r\n    this.offsetY = 0;\r\n\r\n    // 'bezier' | 'line' | 'orthogonal'\r\n    this.edgeStyle = edgeStyle;\r\n\r\n    this.theme = Object.assign(\r\n      {\r\n        bg: \"#141417\",\r\n        grid: \"#25252a\",\r\n        node: \"#1e1e24\",\r\n        title: \"#2a2a31\",\r\n        text: \"#e9e9ef\",\r\n        port: \"#8aa1ff\",\r\n        edge: \"#7f8cff\",\r\n      },\r\n      theme\r\n    );\r\n  }\r\n  setEdgeStyle(style) {\r\n    this.edgeStyle =\r\n      style === \"line\" || style === \"orthogonal\" ? style : \"bezier\";\r\n  }\r\n  setRegistry(reg) {\r\n    this.registry = reg;\r\n  }\r\n  resize(w, h) {\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n  }\r\n  setTransform({\r\n    scale = this.scale,\r\n    offsetX = this.offsetX,\r\n    offsetY = this.offsetY,\r\n  } = {}) {\r\n    this.scale = Math.min(this.maxScale, Math.max(this.minScale, scale));\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n  }\r\n  panBy(dx, dy) {\r\n    this.offsetX += dx;\r\n    this.offsetY += dy;\r\n  }\r\n  zoomAt(factor, cx, cy) {\r\n    // factor > 1 zoom in, < 1 zoom out, centered at screen point (cx, cy)\r\n    const prev = this.scale;\r\n    const next = Math.min(\r\n      this.maxScale,\r\n      Math.max(this.minScale, prev * factor)\r\n    );\r\n    if (next === prev) return;\r\n    // keep the world point under cursor fixed: adjust offset\r\n    const wx = (cx - this.offsetX) / prev;\r\n    const wy = (cy - this.offsetY) / prev;\r\n    this.offsetX = cx - wx * next;\r\n    this.offsetY = cy - wy * next;\r\n    this.scale = next;\r\n  }\r\n  _drawArrowhead(x1, y1, x2, y2, size = 10) {\r\n    const { ctx } = this;\r\n    const s = size / this.scale; // 줌에 따라 크기 보정\r\n    const ang = Math.atan2(y2 - y1, x2 - x1);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x2, y2);\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang - Math.PI / 6),\r\n      y2 - s * Math.sin(ang - Math.PI / 6)\r\n    );\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang + Math.PI / 6),\r\n      y2 - s * Math.sin(ang + Math.PI / 6)\r\n    );\r\n    ctx.closePath();\r\n    ctx.fill(); // 선 색상과 동일한 fill이 자연스러움\r\n  }\r\n\r\n  screenToWorld(x, y) {\r\n    return {\r\n      x: (x - this.offsetX) / this.scale,\r\n      y: (y - this.offsetY) / this.scale,\r\n    };\r\n  }\r\n  worldToScreen(x, y) {\r\n    return {\r\n      x: x * this.scale + this.offsetX,\r\n      y: y * this.scale + this.offsetY,\r\n    };\r\n  }\r\n\r\n  // ── Drawing ────────────────────────────────────────────────────────────────\r\n  _applyTransform() {\r\n    const { ctx } = this;\r\n    ctx.setTransform(this.scale, 0, 0, this.scale, this.offsetX, this.offsetY);\r\n  }\r\n  _resetTransform() {\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  _drawScreenText(\r\n    text,\r\n    lx,\r\n    ly,\r\n    {\r\n      fontPx = 12,\r\n      color = this.theme.text,\r\n      align = \"left\",\r\n      baseline = \"alphabetic\",\r\n      dpr = 1, // 추후 devicePixelRatio 도입\r\n    } = {}\r\n  ) {\r\n    const { ctx } = this;\r\n    const { x: sx, y: sy } = this.worldToScreen(lx, ly);\r\n\r\n    ctx.save();\r\n    // 화면 좌표계(스케일=1)로 리셋\r\n    this._resetTransform();\r\n\r\n    // 픽셀 스냅(번짐 방지)\r\n    const px = Math.round(sx) + 0.5;\r\n    const py = Math.round(sy) + 0.5;\r\n\r\n    ctx.font = `${fontPx * this.scale}px system-ui`;\r\n    ctx.fillStyle = color;\r\n    ctx.textAlign = align;\r\n    ctx.textBaseline = baseline;\r\n    ctx.fillText(text, px, py);\r\n    ctx.restore();\r\n  }\r\n\r\n  drawGrid() {\r\n    const { ctx, canvas, theme, scale, offsetX, offsetY } = this;\r\n    // clear screen in screen space\r\n\r\n    this._resetTransform();\r\n    ctx.fillStyle = theme.bg;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // draw grid in world space so it pans/zooms\r\n    this._applyTransform();\r\n    ctx.strokeStyle = theme.grid;\r\n    ctx.lineWidth = 1 / scale; // keep 1px apparent\r\n\r\n    const base = 20; // world units\r\n    const step = base;\r\n\r\n    // visible world bounds\r\n    const x0 = -offsetX / scale;\r\n    const y0 = -offsetY / scale;\r\n    const x1 = (canvas.width - offsetX) / scale;\r\n    const y1 = (canvas.height - offsetY) / scale;\r\n\r\n    const startX = Math.floor(x0 / step) * step;\r\n    const startY = Math.floor(y0 / step) * step;\r\n\r\n    ctx.beginPath();\r\n    for (let x = startX; x <= x1; x += step) {\r\n      ctx.moveTo(x, y0);\r\n      ctx.lineTo(x, y1);\r\n    }\r\n    for (let y = startY; y <= y1; y += step) {\r\n      ctx.moveTo(x0, y);\r\n      ctx.lineTo(x1, y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  draw(\r\n    graph,\r\n    {\r\n      selection = new Set(),\r\n      tempEdge = null,\r\n      running = false,\r\n      time = performance.now(),\r\n      dt = 0,\r\n    } = {}\r\n  ) {\r\n    this.drawGrid();\r\n    const { ctx, theme } = this;\r\n    this._applyTransform();\r\n\r\n    ctx.save();\r\n    if (running) {\r\n      const speed = 120; // px/s\r\n      const phase = (((time / 1000) * speed) / this.scale) % 12;\r\n      ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n      ctx.lineDashOffset = -phase;\r\n    } else {\r\n      ctx.setLineDash([]);\r\n      ctx.lineDashOffset = 0;\r\n    }\r\n\r\n    // edges\r\n    ctx.strokeStyle = theme.edge;\r\n    ctx.lineWidth = 2 * this.scale;\r\n    for (const e of graph.edges.values()) this._drawEdge(graph, e);\r\n\r\n    // temp edge (given in screen coords); convert to world if needed\r\n    // draw(graph, { selection, tempEdge }) 내부의 tempEdge 처리 구간만 교체\r\n    if (tempEdge) {\r\n      const a = this.screenToWorld(tempEdge.x1, tempEdge.y1);\r\n      const b = this.screenToWorld(tempEdge.x2, tempEdge.y2);\r\n\r\n      // 점선 프리뷰\r\n      const prevDash = this.ctx.getLineDash();\r\n      this.ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n\r\n      let ptsForArrow = null;\r\n      if (this.edgeStyle === \"line\") {\r\n        this._drawLine(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      } else if (this.edgeStyle === \"orthogonal\") {\r\n        ptsForArrow = this._drawOrthogonal(a.x, a.y, b.x, b.y);\r\n      } else {\r\n        this._drawCurve(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      }\r\n\r\n      this.ctx.setLineDash(prevDash);\r\n\r\n      // 화살표 표시: 마지막 세그먼트 방향 사용\r\n      if (ptsForArrow && ptsForArrow.length >= 2) {\r\n        const p1 = ptsForArrow[ptsForArrow.length - 2];\r\n        const p2 = ptsForArrow[ptsForArrow.length - 1];\r\n        this.ctx.fillStyle = this.theme.edge;\r\n        this.ctx.strokeStyle = this.theme.edge;\r\n        this._drawArrowhead(p1.x, p1.y, p2.x, p2.y, 12);\r\n      }\r\n    }\r\n    ctx.restore();\r\n\r\n    // nodes\r\n    for (const n of graph.nodes.values()) {\r\n      const sel = selection.has(n.id);\r\n      this._drawNode(n, sel);\r\n      const def = this.registry?.types?.get(n.type);\r\n      if (def?.onDraw) def.onDraw(n, { ctx, theme });\r\n    }\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  _drawNode(node, selected) {\r\n    const { ctx, theme } = this;\r\n    const r = 8;\r\n    const { x, y } = node.pos;\r\n    const { width: w, height: h } = node.size;\r\n    ctx.fillStyle = theme.node;\r\n    ctx.strokeStyle = selected ? \"#6cf\" : \"#333\";\r\n    ctx.lineWidth = (selected ? 2 : 1.2) / this.scale;\r\n    roundRect(ctx, x, y, w, h, r);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.fillStyle = theme.title;\r\n    roundRect(ctx, x, y, w, 24, { tl: r, tr: r, br: 0, bl: 0 });\r\n    ctx.fill();\r\n\r\n    this._drawScreenText(node.title, x + 8, y + 12, {\r\n      fontPx: 12,\r\n      color: theme.text,\r\n      baseline: \"middle\",\r\n      align: \"left\",\r\n    });\r\n    ctx.fillStyle = theme.port;\r\n    node.inputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"in\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n    node.outputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"out\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n  }\r\n\r\n  _drawEdge(graph, e) {\r\n    const from = graph.nodes.get(e.fromNode);\r\n    const to = graph.nodes.get(e.toNode);\r\n    if (!from || !to) return;\r\n    const iOut = from.outputs.findIndex((p) => p.id === e.fromPort);\r\n    const iIn = to.inputs.findIndex((p) => p.id === e.toPort);\r\n    const pr1 = portRect(from, null, iOut, \"out\");\r\n    const pr2 = portRect(to, null, iIn, \"in\");\r\n    const x1 = pr1.x,\r\n      y1 = pr1.y + 7,\r\n      x2 = pr2.x,\r\n      y2 = pr2.y + 7;\r\n    if (this.edgeStyle === \"line\") {\r\n      this._drawLine(x1, y1, x2, y2);\r\n    } else if (this.edgeStyle === \"orthogonal\") {\r\n      this._drawOrthogonal(x1, y1, x2, y2);\r\n    } else {\r\n      this._drawCurve(x1, y1, x2, y2); // bezier (기존)\r\n    }\r\n  }\r\n\r\n  _drawLine(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawPolyline(points) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; i++)\r\n      ctx.lineTo(points[i].x, points[i].y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawOrthogonal(x1, y1, x2, y2) {\r\n    const dx = Math.abs(x2 - x1);\r\n    const dy = Math.abs(y2 - y1);\r\n    // 중간 축을 결정 (더 짧은 축을 가운데에 두면 보기 좋음)\r\n    const useHVH = true; // 가로-세로-가로(HVH) vs 세로-가로-세로(VHV)\r\n    const midX = (x1 + x2) / 2;\r\n    const midY = (y1 + y2) / 2;\r\n\r\n    let pts;\r\n    if (useHVH) {\r\n      // x1,y1 → midX,y1 → midX,y2 → x2,y2\r\n      pts = [\r\n        { x: x1, y: y1 },\r\n        { x: midX, y: y1 },\r\n        { x: midX, y: y2 },\r\n        { x: x2, y: y2 },\r\n      ];\r\n    }\r\n    // else {\r\n    //   // x1,y1 → x1,midY → x2,midY → x2,y2\r\n    //   pts = [\r\n    //     { x: x1, y: y1 },\r\n    //     { x: x1, y: midY },\r\n    //     { x: x2, y: midY },\r\n    //     { x: x2, y: y2 },\r\n    //   ];\r\n    // }\r\n\r\n    // 라운드 코너\r\n    const { ctx } = this;\r\n    const prevJoin = ctx.lineJoin,\r\n      prevCap = ctx.lineCap;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    this._drawPolyline(pts);\r\n    ctx.lineJoin = prevJoin;\r\n    ctx.lineCap = prevCap;\r\n\r\n    return pts; // 화살표 각도 계산에 사용\r\n  }\r\n  _drawCurve(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    const dx = Math.max(40, Math.abs(x2 - x1) * 0.4);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.bezierCurveTo(x1 + dx, y1, x2 - dx, y2, x2, y2);\r\n    ctx.stroke();\r\n  }\r\n}\r\nfunction roundRect(ctx, x, y, w, h, r = 6) {\r\n  if (typeof r === \"number\") r = { tl: r, tr: r, br: r, bl: r };\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + r.tl, y);\r\n  ctx.lineTo(x + w - r.tr, y);\r\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r.tr);\r\n  ctx.lineTo(x + w, y + h - r.br);\r\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);\r\n  ctx.lineTo(x + r.bl, y + h);\r\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r.bl);\r\n  ctx.lineTo(x, y + r.tl);\r\n  ctx.quadraticCurveTo(x, y, x + r.tl, y);\r\n  ctx.closePath();\r\n}\r\n","// Find an edge id by its endpoints (fallback for undo)\r\nfunction findEdgeId(graph, a, b, c, d) {\r\n  for (const [id, e] of graph.edges) {\r\n    if (\r\n      e.fromNode === a &&\r\n      e.fromPort === b &&\r\n      e.toNode === c &&\r\n      e.toPort === d\r\n    )\r\n      return id;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function MoveNodeCmd(node, fromPos, toPos) {\r\n  return {\r\n    do() {\r\n      node.pos = { ...toPos };\r\n    },\r\n    undo() {\r\n      node.pos = { ...fromPos };\r\n    },\r\n  };\r\n}\r\n\r\nexport function AddEdgeCmd(graph, fromNode, fromPort, toNode, toPort) {\r\n  let addedId = null;\r\n  return {\r\n    do() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n      addedId = findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n    },\r\n    undo() {\r\n      const id =\r\n        addedId ?? findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n      if (id != null) graph.edges.delete(id);\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveEdgeCmd(graph, edgeId) {\r\n  const e = graph.edges.get(edgeId);\r\n  if (!e) return null;\r\n  // capture for undo\r\n  const { fromNode, fromPort, toNode, toPort } = e;\r\n  return {\r\n    do() {\r\n      graph.edges.delete(edgeId);\r\n    },\r\n    undo() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n    },\r\n  };\r\n}\r\n\r\n// Optional: group multiple commands as one (used for \"rewire\")\r\nexport function CompoundCmd(cmds) {\r\n  return {\r\n    do() {\r\n      cmds.forEach((c) => c?.do());\r\n    },\r\n    undo() {\r\n      [...cmds].reverse().forEach((c) => c?.undo());\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveNodeCmd(graph, node) {\r\n  let removedNode = null;\r\n  let removedEdges = [];\r\n\r\n  return {\r\n    do() {\r\n      // Store the node and its connected edges for undo\r\n      removedNode = node;\r\n      removedEdges = graph.edges\r\n        ? [...graph.edges.values()].filter((e) => {\r\n            console.log(e);\r\n            return e.fromNode === node.id || e.toNode === node.id;\r\n          })\r\n        : [];\r\n\r\n      // Remove edges first\r\n      for (const edge of removedEdges) {\r\n        graph.edges.delete(edge.id);\r\n      }\r\n      // Remove the node\r\n      graph.nodes.delete(node.id);\r\n    },\r\n\r\n    undo() {\r\n      // Restore node\r\n      if (removedNode) {\r\n        graph.nodes.set(removedNode.id, removedNode);\r\n      }\r\n      // Restore edges\r\n      for (const edge of removedEdges) {\r\n        graph.edges.set(edge.id, edge);\r\n      }\r\n    },\r\n  };\r\n}\r\n","// src/core/CommandStack.js\r\nexport class CommandStack {\r\n  constructor() {\r\n    this.undoStack = [];\r\n    this.redoStack = [];\r\n  }\r\n  exec(cmd) {\r\n    cmd.do();\r\n    this.undoStack.push(cmd);\r\n    this.redoStack.length = 0;\r\n  }\r\n  undo() {\r\n    const c = this.undoStack.pop();\r\n    if (c) {\r\n      c.undo();\r\n      this.redoStack.push(c);\r\n    }\r\n  }\r\n  redo() {\r\n    const c = this.redoStack.pop();\r\n    if (c) {\r\n      c.do();\r\n      this.undoStack.push(c);\r\n    }\r\n  }\r\n}\r\n","import { hitTestNode, portRect } from \"../render/hitTest.js\";\r\nimport {\r\n  MoveNodeCmd,\r\n  AddEdgeCmd,\r\n  RemoveEdgeCmd,\r\n  CompoundCmd,\r\n  RemoveNodeCmd,\r\n} from \"../core/commands.js\";\r\nimport { CommandStack } from \"../core/CommandStack.js\";\r\n\r\nexport class Controller {\r\n  constructor({ graph, renderer, hooks }) {\r\n    this.graph = graph;\r\n    this.renderer = renderer;\r\n    this.hooks = hooks;\r\n\r\n    this.stack = new CommandStack();\r\n\r\n    this.selection = new Set();\r\n    this.dragging = null; // { nodeId, dx, dy }\r\n    this.connecting = null; // { fromNode, fromPort, x(screen), y(screen) }\r\n    this.panning = null; // { x(screen), y(screen) }\r\n\r\n    this._onKeyPressEvt = this._onKeyPress.bind(this);\r\n    this._onDownEvt = this._onDown.bind(this);\r\n    this._onWheelEvt = this._onWheel.bind(this);\r\n    this._onMoveEvt = this._onMove.bind(this);\r\n    this._onUpEvt = this._onUp.bind(this);\r\n\r\n    this._cursor = \"default\";\r\n\r\n    this._bindEvents();\r\n  }\r\n\r\n  _bindEvents() {\r\n    const c = this.renderer.canvas;\r\n    c.addEventListener(\"mousedown\", this._onDownEvt);\r\n    c.addEventListener(\"wheel\", this._onWheelEvt, { passive: false });\r\n    window.addEventListener(\"mousemove\", this._onMoveEvt);\r\n    window.addEventListener(\"mouseup\", this._onUpEvt);\r\n    window.addEventListener(\"keydown\", this._onKeyPressEvt);\r\n  }\r\n\r\n  _onKeyPress(e) {\r\n    // Undo: Ctrl/Cmd + Z  (Shift+Z → Redo)\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"z\") {\r\n      e.preventDefault();\r\n      if (e.shiftKey) this.stack.redo();\r\n      else this.stack.undo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // Redo: Ctrl/Cmd + Y\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"y\") {\r\n      e.preventDefault();\r\n      this.stack.redo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // remove the selected nodes\r\n    if (e.key === \"Delete\") {\r\n      [...this.selection].forEach((node) => {\r\n        const nodeObj = this.graph.getNodeById(node);\r\n        this.stack.exec(RemoveNodeCmd(this.graph, nodeObj));\r\n        this.graph.removeNode(node);\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  _setCursor(c) {\r\n    if (this._cursor !== c) {\r\n      this._cursor = c;\r\n      this.renderer.canvas.style.cursor = c;\r\n    }\r\n  }\r\n\r\n  _posScreen(e) {\r\n    const r = this.renderer.canvas.getBoundingClientRect();\r\n    return { x: e.clientX - r.left, y: e.clientY - r.top };\r\n  }\r\n\r\n  _posWorld(e) {\r\n    const s = this._posScreen(e);\r\n    return this.renderer.screenToWorld(s.x, s.y);\r\n  }\r\n\r\n  _findNodeAtWorld(x, y) {\r\n    const list = [...this.graph.nodes.values()];\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n      const n = list[i];\r\n      if (hitTestNode(n, x, y)) return n;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findPortAtWorld(x, y) {\r\n    for (const n of this.graph.nodes.values()) {\r\n      for (let i = 0; i < n.inputs.length; i++) {\r\n        const r = portRect(n, n.inputs[i], i, \"in\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.inputs[i], dir: \"in\", idx: i };\r\n      }\r\n      for (let i = 0; i < n.outputs.length; i++) {\r\n        const r = portRect(n, n.outputs[i], i, \"out\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.outputs[i], dir: \"out\", idx: i };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { x, y } = this._posScreen(e);\r\n    const factor = Math.pow(1.0015, -e.deltaY); // smooth zoom\r\n    this.renderer.zoomAt(factor, x, y);\r\n    this.render();\r\n  }\r\n\r\n  _findIncomingEdge(nodeId, portId) {\r\n    for (const [eid, e] of this.graph.edges) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return { id: eid, edge: e };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onDown(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    // 0) MMB(휠 버튼) 드래그는 항상 패닝\r\n    if (e.button === 1) {\r\n      this.panning = { x: s.x, y: s.y };\r\n      return;\r\n    }\r\n\r\n    // 1) 포트(OUT) 위 좌클릭이면 연결 시작\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (e.button === 0 && port && port.dir === \"out\") {\r\n      const outR = portRect(port.node, port.port, port.idx, \"out\");\r\n      const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n      this.connecting = {\r\n        fromNode: port.node.id,\r\n        fromPort: port.port.id,\r\n        x: screenFrom.x,\r\n        y: screenFrom.y,\r\n      };\r\n      return;\r\n    }\r\n\r\n    if (e.button === 0 && port && port.dir === \"in\") {\r\n      const incoming = this._findIncomingEdge(port.node.id, port.port.id);\r\n      if (incoming) {\r\n        const { edge, id } = incoming;\r\n\r\n        // remove as command (즉시 실행 → 미리보기에서도 사라짐)\r\n        const rm = RemoveEdgeCmd(this.graph, id);\r\n        if (rm) this.stack.exec(rm);\r\n\r\n        const outNode = this.graph.nodes.get(edge.fromNode);\r\n        const iOut = outNode.outputs.findIndex((p) => p.id === edge.fromPort);\r\n        const outR = portRect(outNode, outNode.outputs[iOut], iOut, \"out\");\r\n        const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n\r\n        this.connecting = {\r\n          fromNode: edge.fromNode,\r\n          fromPort: edge.fromPort,\r\n          x: screenFrom.x,\r\n          y: screenFrom.y,\r\n          _removedEdge: { id, edge }, // 참고용 메모 (이미 제거됨)\r\n        };\r\n        this.render();\r\n        return;\r\n      }\r\n      // 들어오는 엣지가 없으면 그냥 무시\r\n    }\r\n\r\n    // 2) 노드 위 좌클릭이면 선택 전환 + 드래그 시작\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    if (e.button === 0 && node) {\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this.dragging = {\r\n        nodeId: node.id,\r\n        dx: w.x - node.pos.x,\r\n        dy: w.y - node.pos.y,\r\n        startPos: { x: node.pos.x, y: node.pos.y }, // 원위치 저장\r\n      };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 3) 빈 공간 좌클릭이면: 선택 해제 + 패닝 시작\r\n    if (e.button === 0) {\r\n      if (this.selection.size) this.selection.clear();\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 기타는 무시\r\n  }\r\n\r\n  _onMove(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this.renderer.screenToWorld(s.x, s.y);\r\n\r\n    if (this.panning) {\r\n      const dx = s.x - this.panning.x;\r\n      const dy = s.y - this.panning.y;\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.renderer.panBy(dx, dy);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      n.pos.x = w.x - this.dragging.dx;\r\n      n.pos.y = w.y - this.dragging.dy;\r\n      this.hooks?.emit(\"node:move\", n);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 연결 드래그 프리뷰: 화면 좌표로 저장\r\n    if (this.connecting) {\r\n      this.connecting.x = s.x;\r\n      this.connecting.y = s.y;\r\n      this.render();\r\n    }\r\n\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (port && (port.dir === \"out\" || port.dir === \"in\")) {\r\n      this._setCursor(\"grabbing\");\r\n    } else {\r\n      this._setCursor(\"default\");\r\n    }\r\n  }\r\n\r\n  _onUp(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    if (this.panning) {\r\n      this.panning = null;\r\n      return;\r\n    }\r\n\r\n    if (this.connecting) {\r\n      const from = this.connecting;\r\n      const portIn = this._findPortAtWorld(w.x, w.y);\r\n      if (portIn && portIn.dir === \"in\") {\r\n        // AddEdge as command\r\n        this.stack.exec(\r\n          AddEdgeCmd(\r\n            this.graph,\r\n            from.fromNode,\r\n            from.fromPort,\r\n            portIn.node.id,\r\n            portIn.port.id\r\n          )\r\n        );\r\n      }\r\n      // else: 빈 곳에 놓으면 이미 RemoveEdgeCmd 실행된 상태 → \"해제\" 완료\r\n\r\n      this.connecting = null;\r\n      this.render();\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      const start = this.dragging.startPos;\r\n      const end = { x: n.pos.x, y: n.pos.y };\r\n      // 위치가 바뀐 경우만 커밋\r\n      if (start.x !== end.x || start.y !== end.y) {\r\n        this.stack.exec(MoveNodeCmd(n, start, end));\r\n      }\r\n      this.dragging = null;\r\n    }\r\n\r\n    this.dragging = null;\r\n  }\r\n\r\n  render() {\r\n    const tEdge = this.connecting\r\n      ? (() => {\r\n          const a = this._portAnchorScreen(\r\n            this.connecting.fromNode,\r\n            this.connecting.fromPort\r\n          ); // {x,y}\r\n          const b = { x: this.connecting.x, y: this.connecting.y }; // {x,y}\r\n          return { x1: a.x, y1: a.y, x2: b.x, y2: b.y }; // 명시적으로 x1,y1,x2,y2 구성\r\n        })()\r\n      : null;\r\n\r\n    this.renderer.draw(this.graph, {\r\n      selection: this.selection,\r\n      tempEdge: tEdge, // 그대로 전달\r\n    });\r\n  }\r\n\r\n  _portAnchorScreen(nodeId, portId) {\r\n    const n = this.graph.nodes.get(nodeId);\r\n    const iOut = n.outputs.findIndex((p) => p.id === portId);\r\n    const r = portRect(n, null, iOut, \"out\"); // world rect\r\n    return this.renderer.worldToScreen(r.x, r.y + 7); // -> screen point\r\n  }\r\n}\r\n\r\nfunction rectHas(r, x, y) {\r\n  return x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h;\r\n}\r\n","export class Runner {\r\n  constructor({ graph, registry, hooks, cyclesPerFrame = 1 }) {\r\n    this.graph = graph;\r\n    this.registry = registry;\r\n    this.hooks = hooks;\r\n    this.running = false;\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.cyclesPerFrame = Math.max(1, cyclesPerFrame | 0);\r\n  }\r\n\r\n  // 외부에서 실행 중인지 확인\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  // 실행 도중에도 CPS 변경 가능\r\n  setCyclesPerFrame(n) {\r\n    this.cyclesPerFrame = Math.max(1, n | 0);\r\n  }\r\n\r\n  step(cycles = 1, dt = 0) {\r\n    const nCycles = Math.max(1, cycles | 0);\r\n    for (let c = 0; c < nCycles; c++) {\r\n      for (const node of this.graph.nodes.values()) {\r\n        const def = this.registry.types.get(node.type);\r\n        if (def?.onExecute) {\r\n          try {\r\n            def.onExecute(node, {\r\n              dt,\r\n              graph: this.graph,\r\n              getInput: (portName) => {\r\n                const p =\r\n                  node.inputs.find((i) => i.name === portName) ||\r\n                  node.inputs[0];\r\n                return p ? this.graph.getInput(node.id, p.id) : undefined;\r\n              },\r\n              setOutput: (portName, value) => {\r\n                const p =\r\n                  node.outputs.find((o) => o.name === portName) ||\r\n                  node.outputs[0];\r\n                if (p) this.graph.setOutput(node.id, p.id, value);\r\n              },\r\n            });\r\n          } catch (err) {\r\n            this.hooks?.emit?.(\"error\", err);\r\n          }\r\n        }\r\n      }\r\n      // commit writes for this cycle\r\n      this.graph.swapBuffers();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:start\");\r\n\r\n    const loop = (t) => {\r\n      if (!this.running) return;\r\n      const dtMs = this._last ? t - this._last : 0;\r\n      this._last = t;\r\n      const dt = dtMs / 1000; // seconds\r\n\r\n      // 1) 스텝 실행\r\n      this.step(this.cyclesPerFrame, dt);\r\n\r\n      // 2) 프레임 훅 (렌더러/컨트롤러는 여기서 running, time, dt를 받아 표현 업데이트)\r\n      this.hooks?.emit?.(\"runner:tick\", {\r\n        time: t,\r\n        dt,\r\n        running: true,\r\n        cps: this.cyclesPerFrame,\r\n      });\r\n\r\n      this._raf = requestAnimationFrame(loop);\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(loop);\r\n  }\r\n\r\n  stop() {\r\n    if (!this.running) return;\r\n    this.running = false;\r\n    if (this._raf) cancelAnimationFrame(this._raf);\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:stop\");\r\n  }\r\n}\r\n","import { Registry } from \"./core/Registry.js\";\r\nimport { createHooks } from \"./core/Hooks.js\";\r\nimport { Graph } from \"./core/Graph.js\";\r\nimport { CanvasRenderer } from \"./render/CanvasRenderer.js\";\r\nimport { Controller } from \"./interact/Controller.js\";\r\nimport { Runner } from \"./core/Runner.js\";\r\n\r\nexport function createGraphEditor(\r\n  canvas,\r\n  { theme, hooks: customHooks, autorun = true } = {}\r\n) {\r\n  const hooks =\r\n    customHooks ??\r\n    createHooks([\r\n      \"node:create\",\r\n      \"node:move\",\r\n      \"edge:create\",\r\n      \"edge:delete\",\r\n      \"graph:serialize\",\r\n      \"error\",\r\n      \"runner:tick\",\r\n      \"runner:start\",\r\n      \"runner:stop\",\r\n    ]);\r\n  const registry = new Registry();\r\n  const graph = new Graph({ hooks, registry });\r\n  const renderer = new CanvasRenderer(canvas, { theme, registry });\r\n  const controller = new Controller({ graph, renderer, hooks });\r\n  const runner = new Runner({ graph, registry, hooks });\r\n\r\n  hooks.on(\"runner:tick\", ({ time, dt }) => {\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null, // 필요시 helper\r\n      running: true,\r\n      time,\r\n      dt,\r\n    });\r\n  });\r\n  hooks.on(\"runner:start\", () => {\r\n    // 첫 프레임 즉시 렌더\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: true,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n  hooks.on(\"runner:stop\", () => {\r\n    // 정지 프레임\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: false,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n\r\n  // default node\r\n  registry.register(\"core/Note\", {\r\n    title: \"Note\",\r\n    size: { w: 180, h: 80 },\r\n    inputs: [{ name: \"in\", datatype: \"any\" }],\r\n    outputs: [{ name: \"out\", datatype: \"any\" }],\r\n    onCreate(node) {\r\n      node.state.text = \"hello\";\r\n    },\r\n    onExecute(node, { dt, getInput, setOutput }) {\r\n      // Simple passthrough with uppercase and a heartbeat value\r\n      const incoming = getInput(\"in\");\r\n      const out = (incoming ?? node.state.text ?? \"\").toString().toUpperCase();\r\n      setOutput(\r\n        \"out\",\r\n        out + ` · ${Math.floor((performance.now() / 1000) % 100)}`\r\n      );\r\n    },\r\n    onDraw(node, { ctx, theme }) {\r\n      const pr = 8;\r\n      const { x, y } = node.pos;\r\n      const { width: w } = node.size;\r\n      const lx = x + pr; // 월드 x\r\n      const ly = y + 24 + 6; // 타이틀 바(24) 아래 여백 6\r\n      // renderer._drawScreenText(node.state.text ?? \"hello\", lx, ly, {\r\n      //   fontPx: 11,\r\n      //   color: theme.text,\r\n      //   baseline: \"top\",\r\n      //   align: \"left\",\r\n      // });\r\n    },\r\n  });\r\n\r\n  // initial render & resize\r\n\r\n  renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n  controller.render();\r\n\r\n  const ro = new ResizeObserver(() => {\r\n    renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n    controller.render();\r\n  });\r\n  ro.observe(canvas);\r\n\r\n  const api = {\r\n    graph,\r\n    renderer,\r\n    controller,\r\n    hooks,\r\n    registry,\r\n    runner,\r\n    addNode: (...args) => graph.addNode(...args),\r\n    toJSON: () => graph.toJSON(),\r\n    fromJSON: (data) => Graph.fromJSON(data, { hooks, registry }),\r\n    resize: (w, h) => renderer.resize(w, h),\r\n    render: () => controller.render(),\r\n    start: () => runner.start(),\r\n    stop: () => runner.stop(),\r\n    destroy: () => {\r\n      runner.stop();\r\n      ro.disconnect();\r\n    },\r\n  };\r\n\r\n  if (autorun) runner.start();\r\n  return api;\r\n}\r\n","export function createHooks(names) {\r\n  const map = Object.fromEntries(names.map((n) => [n, new Set()]));\r\n  return {\r\n    on(name, fn) {\r\n      map[name].add(fn);\r\n      return () => map[name].delete(fn);\r\n    },\r\n    async emit(name, ...args) {\r\n      for (const fn of map[name]) await fn(...args);\r\n    },\r\n  };\r\n}\r\n"],"names":["Registry","constructor","this","types","Map","register","type","def","has","Error","set","createInstance","get","randomUUID","crypto","bytes","Uint8Array","getRandomValues","hex","Array","from","map","b","toString","padStart","slice","join","Node","id","title","x","y","width","height","pos","size","inputs","outputs","state","addInput","name","datatype","port","dir","push","addOutput","Edge","fromNode","fromPort","toNode","toPort","Graph","hooks","registry","nodes","edges","_valuesA","_valuesB","_useAasCurrent","getNodeById","_id","node","entries","addNode","opts","_a","w","_b","h","i","o","_c","onCreate","call","_d","emit","removeNode","nodeId","eid","e","delete","addEdge","clear","_curBuf","_nextBuf","swapBuffers","setOutput","portId","value","getInput","values","toJSON","json","n","fromJSON","g","nd","ed","hitTestNode","nx","ny","portRect","idx","CanvasRenderer","canvas","theme","edgeStyle","ctx","getContext","scale","minScale","maxScale","offsetX","offsetY","Object","assign","bg","grid","text","edge","setEdgeStyle","style","setRegistry","reg","resize","setTransform","Math","min","max","panBy","dx","dy","zoomAt","factor","cx","cy","prev","next","wx","wy","_drawArrowhead","x1","y1","x2","y2","s","ang","atan2","beginPath","moveTo","lineTo","cos","PI","sin","closePath","fill","screenToWorld","worldToScreen","_applyTransform","_resetTransform","_drawScreenText","lx","ly","fontPx","color","align","baseline","dpr","sx","sy","save","px","round","py","font","fillStyle","textAlign","textBaseline","fillText","restore","drawGrid","fillRect","strokeStyle","lineWidth","step","x0","y0","startX","floor","startY","stroke","draw","graph","selection","Set","tempEdge","running","time","performance","now","dt","phase","setLineDash","lineDashOffset","_drawEdge","a","prevDash","getLineDash","ptsForArrow","_drawLine","_drawOrthogonal","_drawCurve","length","p1","p2","sel","_drawNode","onDraw","selected","roundRect","tl","tr","br","bl","forEach","p","rct","to","iOut","findIndex","iIn","pr1","pr2","_drawPolyline","points","midX","pts","prevJoin","lineJoin","prevCap","lineCap","abs","bezierCurveTo","r","quadraticCurveTo","findEdgeId","c","d","CommandStack","undoStack","redoStack","exec","cmd","do","undo","pop","redo","Controller","renderer","stack","dragging","connecting","panning","_onKeyPressEvt","_onKeyPress","bind","_onDownEvt","_onDown","_onWheelEvt","_onWheel","_onMoveEvt","_onMove","_onUpEvt","_onUp","_cursor","_bindEvents","addEventListener","passive","window","ctrlKey","metaKey","key","toLowerCase","preventDefault","shiftKey","render","nodeObj","removedNode","removedEdges","filter","console","log","RemoveNodeCmd","_setCursor","cursor","_posScreen","getBoundingClientRect","clientX","left","clientY","top","_posWorld","_findNodeAtWorld","list","_findPortAtWorld","rectHas","pow","deltaY","_findIncomingEdge","button","outR","screenFrom","incoming","rm","edgeId","RemoveEdgeCmd","outNode","_removedEdge","add","startPos","portIn","addedId","AddEdgeCmd","start","end","fromPos","toPos","tEdge","_portAnchorScreen","Runner","cyclesPerFrame","_raf","_last","isRunning","setCyclesPerFrame","cycles","nCycles","onExecute","portName","find","err","loop","t","dtMs","cps","requestAnimationFrame","stop","cancelAnimationFrame","customHooks","autorun","names","fromEntries","on","fn","args","createHooks","controller","runner","renderTempEdge","toUpperCase","clientWidth","clientHeight","ro","ResizeObserver","observe","api","data","destroy","disconnect"],"mappings":"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"}