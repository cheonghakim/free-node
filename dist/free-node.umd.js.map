{"version":3,"file":"free-node.umd.js","sources":["../src/core/Registry.js","../src/utils/utils.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Graph.js","../src/render/hitTest.js","../src/render/CanvasRenderer.js","../src/core/commands.js","../src/core/CommandStack.js","../src/interact/Controller.js","../src/core/Runner.js","../src/index.js","../src/core/Hooks.js"],"sourcesContent":["// src/core/Registry.js\r\nexport class Registry {\r\n  constructor() {\r\n    this.types = new Map();\r\n  }\r\n  register(type, def) {\r\n    // def: {title?, size?, inputs?, outputs?, onCreate?, onExecute?, onDraw?}\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.set(type, def);\r\n  }\r\n  unregister(type) {\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.delete(type);\r\n  }\r\n  removeAll() {\r\n    this.types.clear();\r\n    this.types = new Map();\r\n  }\r\n  createInstance(type) {\r\n    const def = this.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    return def;\r\n  }\r\n}\r\n","export function randomUUID() {\r\n  // 1) 전역 객체 안전 획득\r\n  const g =\r\n    typeof globalThis !== \"undefined\" ? globalThis :\r\n    typeof self !== \"undefined\" ? self :\r\n    typeof window !== \"undefined\" ? window :\r\n    typeof global !== \"undefined\" ? global : {};\r\n\r\n  const c = g.crypto || g.msCrypto; // IE11 호환\r\n\r\n  // 2) 네이티브 지원 (브라우저/Deno 등)\r\n  if (c && typeof c.randomUUID === \"function\") {\r\n    return c.randomUUID();\r\n  }\r\n\r\n  // 3) Web Crypto만 있는 경우 (getRandomValues로 직접 생성)\r\n  if (c && typeof c.getRandomValues === \"function\") {\r\n    const bytes = new Uint8Array(16);\r\n    c.getRandomValues(bytes);\r\n    // RFC4122 버전/변형 비트 설정\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n    return (\r\n      hex.slice(0, 4).join(\"\") + \"-\" +\r\n      hex.slice(4, 6).join(\"\") + \"-\" +\r\n      hex.slice(6, 8).join(\"\") + \"-\" +\r\n      hex.slice(8, 10).join(\"\") + \"-\" +\r\n      hex.slice(10, 16).join(\"\")\r\n    );\r\n  }\r\n\r\n  // 4) Node.js 전용 대체 (require가 있을 때)\r\n  try {\r\n    // 번들러/ESM 충돌 피하려고 런타임에만 require 접근\r\n    // eslint-disable-next-line no-new-func\r\n    const req = Function('return typeof require === \"function\" ? require : null')();\r\n    if (req) {\r\n      const nodeCrypto = req(\"crypto\");\r\n      if (typeof nodeCrypto.randomUUID === \"function\") {\r\n        return nodeCrypto.randomUUID();\r\n      }\r\n      const bytes = nodeCrypto.randomBytes(16);\r\n      bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n      bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n      const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n      return (\r\n        hex.slice(0, 4).join(\"\") + \"-\" +\r\n        hex.slice(4, 6).join(\"\") + \"-\" +\r\n        hex.slice(6, 8).join(\"\") + \"-\" +\r\n        hex.slice(8, 10).join(\"\") + \"-\" +\r\n        hex.slice(10, 16).join(\"\")\r\n      );\r\n    }\r\n  } catch {\r\n    // ignore\r\n  }\r\n\r\n  // 5) 최후의 비보안 대체 (CSPRNG 아님!)\r\n  const bytes = new Uint8Array(16);\r\n  for (let i = 0; i < 16; i++) bytes[i] = Math.floor(Math.random() * 256);\r\n  bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n  const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n  return (\r\n    hex.slice(0, 4).join(\"\") + \"-\" +\r\n    hex.slice(4, 6).join(\"\") + \"-\" +\r\n    hex.slice(6, 8).join(\"\") + \"-\" +\r\n    hex.slice(8, 10).join(\"\") + \"-\" +\r\n    hex.slice(10, 16).join(\"\")\r\n  );\r\n}","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Node.js\r\nexport class Node {\r\n  constructor({ id, type, title, x = 0, y = 0, width = 160, height = 60 }) {\r\n    this.id = id ?? randomUUID();\r\n    this.type = type;\r\n    this.title = title ?? type;\r\n    this.pos = { x, y };\r\n    this.size = { width, height };\r\n    this.inputs = []; // {id,name,datatype}\r\n    this.outputs = []; // {id,name,datatype}\r\n    this.state = {}; // 사용자 상태\r\n  }\r\n  addInput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"in\" };\r\n    this.inputs.push(port);\r\n    return port;\r\n  }\r\n  addOutput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"out\" };\r\n    this.outputs.push(port);\r\n    return port;\r\n  }\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Edge.js\r\nexport class Edge {\r\n  constructor({ id, fromNode, fromPort, toNode, toPort }) {\r\n    this.id = id ?? randomUUID();\r\n    this.fromNode = fromNode;\r\n    this.fromPort = fromPort;\r\n    this.toNode = toNode;\r\n    this.toPort = toPort;\r\n  }\r\n}\r\n","import { Node } from \"./Node.js\";\r\nimport { Edge } from \"./Edge.js\";\r\n\r\nexport class Graph {\r\n  constructor({ hooks, registry }) {\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n    this.hooks = hooks;\r\n    this.registry = registry;\r\n    // double buffer for deterministic cycles\r\n    this._valuesA = new Map(); // current\r\n    this._valuesB = new Map(); // next\r\n    this._useAasCurrent = true;\r\n  }\r\n  getNodeById(id) {\r\n    for (let [_id, node] of this.nodes.entries()) {\r\n      if (id === _id) {\r\n        return node;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  addNode(type, opts = {}) {\r\n    const def = this.registry.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    const node = new Node({\r\n      type,\r\n      title: def.title,\r\n      width: def.size?.w,\r\n      height: def.size?.h,\r\n      ...opts,\r\n    });\r\n    for (const i of def.inputs || []) node.addInput(i.name, i.datatype);\r\n    for (const o of def.outputs || []) node.addOutput(o.name, o.datatype);\r\n    def.onCreate?.(node);\r\n    this.nodes.set(node.id, node);\r\n    this.hooks?.emit(\"node:create\", node);\r\n    return node;\r\n  }\r\n  removeNode(nodeId) {\r\n    for (const [eid, e] of this.edges)\r\n      if (e.fromNode === nodeId || e.toNode === nodeId) this.edges.delete(eid);\r\n    this.nodes.delete(nodeId);\r\n  }\r\n  addEdge(fromNode, fromPort, toNode, toPort) {\r\n    const e = new Edge({ fromNode, fromPort, toNode, toPort });\r\n    this.edges.set(e.id, e);\r\n    this.hooks?.emit(\"edge:create\", e);\r\n    return e;\r\n  }\r\n\r\n  clear() {\r\n    this.nodes?.clear();\r\n    this.edges?.clear();\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n  }\r\n\r\n  // buffer helpers\r\n  _curBuf() {\r\n    return this._useAasCurrent ? this._valuesA : this._valuesB;\r\n  }\r\n  _nextBuf() {\r\n    return this._useAasCurrent ? this._valuesB : this._valuesA;\r\n  }\r\n  swapBuffers() {\r\n    // when moving to next cycle, promote next->current and clear next\r\n    this._useAasCurrent = !this._useAasCurrent;\r\n    this._nextBuf().clear();\r\n  }\r\n  // data helpers\r\n  setOutput(nodeId, portId, value) {\r\n    this._nextBuf().set(`${nodeId}:${portId}`, value);\r\n  }\r\n  getInput(nodeId, portId) {\r\n    // find upstream edge feeding this input\r\n    for (const e of this.edges.values()) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return this._curBuf().get(`${e.fromNode}:${e.fromPort}`);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  toJSON() {\r\n    const json = {\r\n      nodes: [...this.nodes.values()].map((n) => ({\r\n        id: n.id,\r\n        type: n.type,\r\n        title: n.title,\r\n        x: n.pos.x,\r\n        y: n.pos.y,\r\n        w: n.size.width,\r\n        h: n.size.height,\r\n        inputs: n.inputs,\r\n        outputs: n.outputs,\r\n        state: n.state,\r\n      })),\r\n      edges: [...this.edges.values()],\r\n    };\r\n    this.hooks?.emit(\"graph:serialize\", json);\r\n    return json;\r\n  }\r\n  static fromJSON(json, { hooks, registry }) {\r\n    const g = new Graph({ hooks, registry });\r\n    for (const nd of json.nodes) {\r\n      const node = new Node({\r\n        id: nd.id,\r\n        type: nd.type,\r\n        title: nd.title,\r\n        x: nd.x,\r\n        y: nd.y,\r\n        width: nd.w,\r\n        height: nd.h,\r\n      });\r\n      node.inputs = nd.inputs;\r\n      node.outputs = nd.outputs;\r\n      node.state = nd.state || {};\r\n      g.nodes.set(node.id, node);\r\n    }\r\n    for (const ed of json.edges) g.edges.set(ed.id, new Edge(ed));\r\n    return g;\r\n  }\r\n}\r\n","// src/render/hitTest.js\r\nexport function hitTestNode(node, x, y) {\r\n  const { x: nx, y: ny } = node.pos;\r\n  const { width, height } = node.size;\r\n  return x >= nx && x <= nx + width && y >= ny && y <= ny + height;\r\n}\r\nexport function portRect(node, port, idx, dir) {\r\n  const pad = 8,\r\n    row = 20;\r\n  const y = node.pos.y + 28 + idx * row;\r\n  if (dir === \"in\") return { x: node.pos.x - pad, y, w: pad, h: 14 };\r\n  if (dir === \"out\")\r\n    return { x: node.pos.x + node.size.width, y, w: pad, h: 14 };\r\n}\r\n","import { hitTestNode, portRect } from \"./hitTest.js\";\r\n\r\nexport class CanvasRenderer {\r\n  static FONT_SIZE = 12;\r\n  constructor(canvas, { theme = {}, registry, edgeStyle = \"orthogonal\" } = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.registry = registry; // to call per-node onDraw\r\n\r\n    // viewport transform\r\n    this.scale = 1;\r\n    this.minScale = 0.25;\r\n    this.maxScale = 3;\r\n    this.offsetX = 0;\r\n    this.offsetY = 0;\r\n\r\n    // 'bezier' | 'line' | 'orthogonal'\r\n    this.edgeStyle = edgeStyle;\r\n\r\n    this.theme = Object.assign(\r\n      {\r\n        bg: \"#141417\",\r\n        grid: \"#25252a\",\r\n        node: \"#1e1e24\",\r\n        title: \"#2a2a31\",\r\n        text: \"#e9e9ef\",\r\n        port: \"#8aa1ff\",\r\n        edge: \"#7f8cff\",\r\n      },\r\n      theme\r\n    );\r\n  }\r\n  setEdgeStyle(style) {\r\n    this.edgeStyle =\r\n      style === \"line\" || style === \"orthogonal\" ? style : \"bezier\";\r\n  }\r\n  setRegistry(reg) {\r\n    this.registry = reg;\r\n  }\r\n  resize(w, h) {\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n  }\r\n  setTransform({\r\n    scale = this.scale,\r\n    offsetX = this.offsetX,\r\n    offsetY = this.offsetY,\r\n  } = {}) {\r\n    this.scale = Math.min(this.maxScale, Math.max(this.minScale, scale));\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n  }\r\n  panBy(dx, dy) {\r\n    this.offsetX += dx;\r\n    this.offsetY += dy;\r\n  }\r\n  zoomAt(factor, cx, cy) {\r\n    // factor > 1 zoom in, < 1 zoom out, centered at screen point (cx, cy)\r\n    const prev = this.scale;\r\n    const next = Math.min(\r\n      this.maxScale,\r\n      Math.max(this.minScale, prev * factor)\r\n    );\r\n    if (next === prev) return;\r\n    // keep the world point under cursor fixed: adjust offset\r\n    const wx = (cx - this.offsetX) / prev;\r\n    const wy = (cy - this.offsetY) / prev;\r\n    this.offsetX = cx - wx * next;\r\n    this.offsetY = cy - wy * next;\r\n    this.scale = next;\r\n  }\r\n\r\n  screenToWorld(x, y) {\r\n    return {\r\n      x: (x - this.offsetX) / this.scale,\r\n      y: (y - this.offsetY) / this.scale,\r\n    };\r\n  }\r\n  worldToScreen(x, y) {\r\n    return {\r\n      x: x * this.scale + this.offsetX,\r\n      y: y * this.scale + this.offsetY,\r\n    };\r\n  }\r\n  _applyTransform() {\r\n    const { ctx } = this;\r\n    ctx.setTransform(this.scale, 0, 0, this.scale, this.offsetX, this.offsetY);\r\n  }\r\n  _resetTransform() {\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  // ── Drawing ────────────────────────────────────────────────────────────────\r\n  _drawArrowhead(x1, y1, x2, y2, size = 10) {\r\n    const { ctx } = this;\r\n    const s = size / this.scale; // 줌에 따라 크기 보정\r\n    const ang = Math.atan2(y2 - y1, x2 - x1);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x2, y2);\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang - Math.PI / 6),\r\n      y2 - s * Math.sin(ang - Math.PI / 6)\r\n    );\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang + Math.PI / 6),\r\n      y2 - s * Math.sin(ang + Math.PI / 6)\r\n    );\r\n    ctx.closePath();\r\n    ctx.fill(); // 선 색상과 동일한 fill이 자연스러움\r\n  }\r\n\r\n  _drawScreenText(\r\n    text,\r\n    lx,\r\n    ly,\r\n    {\r\n      fontPx = 12,\r\n      color = this.theme.text,\r\n      align = \"left\",\r\n      baseline = \"alphabetic\",\r\n      dpr = 1, // 추후 devicePixelRatio 도입\r\n    } = {}\r\n  ) {\r\n    const { ctx } = this;\r\n    const { x: sx, y: sy } = this.worldToScreen(lx, ly);\r\n\r\n    ctx.save();\r\n    // 화면 좌표계(스케일=1)로 리셋\r\n    this._resetTransform();\r\n\r\n    // 픽셀 스냅(번짐 방지)\r\n    const px = Math.round(sx) + 0.5;\r\n    const py = Math.round(sy) + 0.5;\r\n\r\n    ctx.font = `${fontPx * this.scale}px system-ui`;\r\n    ctx.fillStyle = color;\r\n    ctx.textAlign = align;\r\n    ctx.textBaseline = baseline;\r\n    ctx.fillText(text, px, py);\r\n    ctx.restore();\r\n  }\r\n\r\n  drawGrid() {\r\n    const { ctx, canvas, theme, scale, offsetX, offsetY } = this;\r\n    // clear screen in screen space\r\n\r\n    this._resetTransform();\r\n    ctx.fillStyle = theme.bg;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // draw grid in world space so it pans/zooms\r\n    this._applyTransform();\r\n    ctx.strokeStyle = theme.grid;\r\n    ctx.lineWidth = 1 / scale; // keep 1px apparent\r\n\r\n    const base = 20; // world units\r\n    const step = base;\r\n\r\n    // visible world bounds\r\n    const x0 = -offsetX / scale;\r\n    const y0 = -offsetY / scale;\r\n    const x1 = (canvas.width - offsetX) / scale;\r\n    const y1 = (canvas.height - offsetY) / scale;\r\n\r\n    const startX = Math.floor(x0 / step) * step;\r\n    const startY = Math.floor(y0 / step) * step;\r\n\r\n    ctx.beginPath();\r\n    for (let x = startX; x <= x1; x += step) {\r\n      ctx.moveTo(x, y0);\r\n      ctx.lineTo(x, y1);\r\n    }\r\n    for (let y = startY; y <= y1; y += step) {\r\n      ctx.moveTo(x0, y);\r\n      ctx.lineTo(x1, y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  draw(\r\n    graph,\r\n    {\r\n      selection = new Set(),\r\n      tempEdge = null,\r\n      running = false,\r\n      time = performance.now(),\r\n      dt = 0,\r\n    } = {}\r\n  ) {\r\n    this.drawGrid();\r\n    const { ctx, theme } = this;\r\n    this._applyTransform();\r\n\r\n    ctx.save();\r\n    if (running) {\r\n      const speed = 120; // px/s\r\n      const phase =\r\n        (((time / 1000) * speed) / this.scale) % CanvasRenderer.FONT_SIZE;\r\n      ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n      ctx.lineDashOffset = -phase;\r\n    } else {\r\n      ctx.setLineDash([]);\r\n      ctx.lineDashOffset = 0;\r\n    }\r\n\r\n    // edges\r\n    ctx.strokeStyle = theme.edge;\r\n    ctx.lineWidth = 2 * this.scale;\r\n    for (const e of graph.edges.values()) this._drawEdge(graph, e);\r\n\r\n    // temp edge (given in screen coords); convert to world if needed\r\n    // draw(graph, { selection, tempEdge }) 내부의 tempEdge 처리 구간만 교체\r\n    if (tempEdge) {\r\n      const a = this.screenToWorld(tempEdge.x1, tempEdge.y1);\r\n      const b = this.screenToWorld(tempEdge.x2, tempEdge.y2);\r\n\r\n      // 점선 프리뷰\r\n      const prevDash = this.ctx.getLineDash();\r\n      this.ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n\r\n      let ptsForArrow = null;\r\n      if (this.edgeStyle === \"line\") {\r\n        this._drawLine(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      } else if (this.edgeStyle === \"orthogonal\") {\r\n        ptsForArrow = this._drawOrthogonal(a.x, a.y, b.x, b.y);\r\n      } else {\r\n        this._drawCurve(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      }\r\n\r\n      this.ctx.setLineDash(prevDash);\r\n\r\n      // 화살표 표시: 마지막 세그먼트 방향 사용\r\n      if (ptsForArrow && ptsForArrow.length >= 2) {\r\n        const p1 = ptsForArrow[ptsForArrow.length - 2];\r\n        const p2 = ptsForArrow[ptsForArrow.length - 1];\r\n        this.ctx.fillStyle = this.theme.edge;\r\n        this.ctx.strokeStyle = this.theme.edge;\r\n        this._drawArrowhead(p1.x, p1.y, p2.x, p2.y, 12);\r\n      }\r\n    }\r\n    ctx.restore();\r\n\r\n    // nodes\r\n    for (const n of graph.nodes.values()) {\r\n      const sel = selection.has(n.id);\r\n      this._drawNode(n, sel);\r\n      const def = this.registry?.types?.get(n.type);\r\n      if (def?.onDraw) def.onDraw(n, { ctx, theme });\r\n    }\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  _drawNode(node, selected) {\r\n    const { ctx, theme } = this;\r\n    const r = 8;\r\n    const { x, y } = node.pos;\r\n    const { width: w, height: h } = node.size;\r\n    ctx.fillStyle = theme.node;\r\n    ctx.strokeStyle = selected ? \"#6cf\" : \"#333\";\r\n    ctx.lineWidth = (selected ? 2 : 1.2) / this.scale;\r\n    roundRect(ctx, x, y, w, h, r);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.fillStyle = theme.title;\r\n    roundRect(ctx, x, y, w, 24, { tl: r, tr: r, br: 0, bl: 0 });\r\n    ctx.fill();\r\n\r\n    this._drawScreenText(node.title, x + 8, y + CanvasRenderer.FONT_SIZE, {\r\n      fontPx: CanvasRenderer.FONT_SIZE,\r\n      color: theme.text,\r\n      baseline: \"middle\",\r\n      align: \"left\",\r\n    });\r\n    ctx.fillStyle = theme.port;\r\n    node.inputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"in\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n    node.outputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"out\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n  }\r\n\r\n  _drawEdge(graph, e) {\r\n    const from = graph.nodes.get(e.fromNode);\r\n    const to = graph.nodes.get(e.toNode);\r\n    if (!from || !to) return;\r\n    const iOut = from.outputs.findIndex((p) => p.id === e.fromPort);\r\n    const iIn = to.inputs.findIndex((p) => p.id === e.toPort);\r\n    const pr1 = portRect(from, null, iOut, \"out\");\r\n    const pr2 = portRect(to, null, iIn, \"in\");\r\n    const x1 = pr1.x,\r\n      y1 = pr1.y + 7,\r\n      x2 = pr2.x,\r\n      y2 = pr2.y + 7;\r\n    if (this.edgeStyle === \"line\") {\r\n      this._drawLine(x1, y1, x2, y2);\r\n    } else if (this.edgeStyle === \"orthogonal\") {\r\n      this._drawOrthogonal(x1, y1, x2, y2);\r\n    } else {\r\n      this._drawCurve(x1, y1, x2, y2); // bezier (기존)\r\n    }\r\n  }\r\n\r\n  _drawLine(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawPolyline(points) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; i++)\r\n      ctx.lineTo(points[i].x, points[i].y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawOrthogonal(x1, y1, x2, y2) {\r\n    const dx = Math.abs(x2 - x1);\r\n    const dy = Math.abs(y2 - y1);\r\n    // 중간 축을 결정 (더 짧은 축을 가운데에 두면 보기 좋음)\r\n    const useHVH = true; // 가로-세로-가로(HVH) vs 세로-가로-세로(VHV)\r\n    const midX = (x1 + x2) / 2;\r\n    const midY = (y1 + y2) / 2;\r\n\r\n    let pts;\r\n    if (useHVH) {\r\n      // x1,y1 → midX,y1 → midX,y2 → x2,y2\r\n      pts = [\r\n        { x: x1, y: y1 },\r\n        { x: midX, y: y1 },\r\n        { x: midX, y: y2 },\r\n        { x: x2, y: y2 },\r\n      ];\r\n    }\r\n    // else {\r\n    //   // x1,y1 → x1,midY → x2,midY → x2,y2\r\n    //   pts = [\r\n    //     { x: x1, y: y1 },\r\n    //     { x: x1, y: midY },\r\n    //     { x: x2, y: midY },\r\n    //     { x: x2, y: y2 },\r\n    //   ];\r\n    // }\r\n\r\n    // 라운드 코너\r\n    const { ctx } = this;\r\n    const prevJoin = ctx.lineJoin,\r\n      prevCap = ctx.lineCap;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    this._drawPolyline(pts);\r\n    ctx.lineJoin = prevJoin;\r\n    ctx.lineCap = prevCap;\r\n\r\n    return pts; // 화살표 각도 계산에 사용\r\n  }\r\n  _drawCurve(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    const dx = Math.max(40, Math.abs(x2 - x1) * 0.4);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.bezierCurveTo(x1 + dx, y1, x2 - dx, y2, x2, y2);\r\n    ctx.stroke();\r\n  }\r\n}\r\nfunction roundRect(ctx, x, y, w, h, r = 6) {\r\n  if (typeof r === \"number\") r = { tl: r, tr: r, br: r, bl: r };\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + r.tl, y);\r\n  ctx.lineTo(x + w - r.tr, y);\r\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r.tr);\r\n  ctx.lineTo(x + w, y + h - r.br);\r\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);\r\n  ctx.lineTo(x + r.bl, y + h);\r\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r.bl);\r\n  ctx.lineTo(x, y + r.tl);\r\n  ctx.quadraticCurveTo(x, y, x + r.tl, y);\r\n  ctx.closePath();\r\n}\r\n","// Find an edge id by its endpoints (fallback for undo)\r\nfunction findEdgeId(graph, a, b, c, d) {\r\n  for (const [id, e] of graph.edges) {\r\n    if (\r\n      e.fromNode === a &&\r\n      e.fromPort === b &&\r\n      e.toNode === c &&\r\n      e.toPort === d\r\n    )\r\n      return id;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function MoveNodeCmd(node, fromPos, toPos) {\r\n  return {\r\n    do() {\r\n      node.pos = { ...toPos };\r\n    },\r\n    undo() {\r\n      node.pos = { ...fromPos };\r\n    },\r\n  };\r\n}\r\n\r\nexport function AddEdgeCmd(graph, fromNode, fromPort, toNode, toPort) {\r\n  let addedId = null;\r\n  return {\r\n    do() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n      addedId = findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n    },\r\n    undo() {\r\n      const id =\r\n        addedId ?? findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n      if (id != null) graph.edges.delete(id);\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveEdgeCmd(graph, edgeId) {\r\n  const e = graph.edges.get(edgeId);\r\n  if (!e) return null;\r\n  // capture for undo\r\n  const { fromNode, fromPort, toNode, toPort } = e;\r\n  return {\r\n    do() {\r\n      graph.edges.delete(edgeId);\r\n    },\r\n    undo() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n    },\r\n  };\r\n}\r\n\r\n// Optional: group multiple commands as one (used for \"rewire\")\r\nexport function CompoundCmd(cmds) {\r\n  return {\r\n    do() {\r\n      cmds.forEach((c) => c?.do());\r\n    },\r\n    undo() {\r\n      [...cmds].reverse().forEach((c) => c?.undo());\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveNodeCmd(graph, node) {\r\n  let removedNode = null;\r\n  let removedEdges = [];\r\n\r\n  return {\r\n    do() {\r\n      // Store the node and its connected edges for undo\r\n      removedNode = node;\r\n      removedEdges = graph.edges\r\n        ? [...graph.edges.values()].filter((e) => {\r\n            console.log(e);\r\n            return e.fromNode === node.id || e.toNode === node.id;\r\n          })\r\n        : [];\r\n\r\n      // Remove edges first\r\n      for (const edge of removedEdges) {\r\n        graph.edges.delete(edge.id);\r\n      }\r\n      // Remove the node\r\n      graph.nodes.delete(node.id);\r\n    },\r\n\r\n    undo() {\r\n      // Restore node\r\n      if (removedNode) {\r\n        graph.nodes.set(removedNode.id, removedNode);\r\n      }\r\n      // Restore edges\r\n      for (const edge of removedEdges) {\r\n        graph.edges.set(edge.id, edge);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport function ResizeNodeCmd(node, fromSize, toSize) {\r\n  return {\r\n    do() {\r\n      node.size.width = toSize.w;\r\n      node.size.height = toSize.h;\r\n    },\r\n    undo() {\r\n      node.size.width = fromSize.w;\r\n      node.size.height = fromSize.h;\r\n    },\r\n  };\r\n}\r\n","// src/core/CommandStack.js\r\nexport class CommandStack {\r\n  constructor() {\r\n    this.undoStack = [];\r\n    this.redoStack = [];\r\n  }\r\n  exec(cmd) {\r\n    cmd.do();\r\n    this.undoStack.push(cmd);\r\n    this.redoStack.length = 0;\r\n  }\r\n  undo() {\r\n    const c = this.undoStack.pop();\r\n    if (c) {\r\n      c.undo();\r\n      this.redoStack.push(c);\r\n    }\r\n  }\r\n  redo() {\r\n    const c = this.redoStack.pop();\r\n    if (c) {\r\n      c.do();\r\n      this.undoStack.push(c);\r\n    }\r\n  }\r\n}\r\n","import { hitTestNode, portRect } from \"../render/hitTest.js\";\r\nimport {\r\n  MoveNodeCmd,\r\n  AddEdgeCmd,\r\n  RemoveEdgeCmd,\r\n  CompoundCmd,\r\n  RemoveNodeCmd,\r\n  ResizeNodeCmd,\r\n} from \"../core/commands.js\";\r\nimport { CommandStack } from \"../core/CommandStack.js\";\r\n\r\nexport class Controller {\r\n\r\n  static MIN_NODE_WIDTH = 80;\r\n  static MIN_NODE_HEIGHT = 60;\r\n\r\n  constructor({ graph, renderer, hooks }) {\r\n    this.graph = graph;\r\n    this.renderer = renderer;\r\n    this.hooks = hooks;\r\n\r\n    this.stack = new CommandStack();\r\n    this.selection = new Set();\r\n    this.dragging = null; // { nodeId, dx, dy }\r\n    this.connecting = null; // { fromNode, fromPort, x(screen), y(screen) }\r\n    this.panning = null; // { x(screen), y(screen) }\r\n    this.resizing = null;\r\n\r\n    this._cursor = \"default\";\r\n\r\n    this._onKeyPressEvt = this._onKeyPress.bind(this);\r\n    this._onDownEvt = this._onDown.bind(this);\r\n    this._onWheelEvt = this._onWheel.bind(this);\r\n    this._onMoveEvt = this._onMove.bind(this);\r\n    this._onUpEvt = this._onUp.bind(this);\r\n\r\n    this._bindEvents();\r\n  }\r\n\r\n  destructor() {\r\n    const c = this.renderer.canvas;\r\n    c.removeEventListener(\"mousedown\", this._onDownEvt);\r\n    c.removeEventListener(\"wheel\", this._onWheelEvt, { passive: false });\r\n    window.removeEventListener(\"mousemove\", this._onMoveEvt);\r\n    window.removeEventListener(\"mouseup\", this._onUpEvt);\r\n    window.removeEventListener(\"keydown\", this._onKeyPressEvt);\r\n  }\r\n\r\n  _bindEvents() {\r\n    const c = this.renderer.canvas;\r\n    c.addEventListener(\"mousedown\", this._onDownEvt);\r\n    c.addEventListener(\"wheel\", this._onWheelEvt, { passive: false });\r\n    window.addEventListener(\"mousemove\", this._onMoveEvt);\r\n    window.addEventListener(\"mouseup\", this._onUpEvt);\r\n    window.addEventListener(\"keydown\", this._onKeyPressEvt);\r\n  }\r\n\r\n  _onKeyPress(e) {\r\n    // Undo: Ctrl/Cmd + Z  (Shift+Z → Redo)\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"z\") {\r\n      e.preventDefault();\r\n      if (e.shiftKey) this.stack.redo();\r\n      else this.stack.undo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // Redo: Ctrl/Cmd + Y\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"y\") {\r\n      e.preventDefault();\r\n      this.stack.redo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // remove the selected nodes\r\n    if (e.key === \"Delete\") {\r\n      [...this.selection].forEach((node) => {\r\n        const nodeObj = this.graph.getNodeById(node);\r\n        this.stack.exec(RemoveNodeCmd(this.graph, nodeObj));\r\n        this.graph.removeNode(node);\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  _setCursor(c) {\r\n    if (this._cursor !== c) {\r\n      this._cursor = c;\r\n      this.renderer.canvas.style.cursor = c;\r\n    }\r\n  }\r\n\r\n  _posScreen(e) {\r\n    const r = this.renderer.canvas.getBoundingClientRect();\r\n    return { x: e.clientX - r.left, y: e.clientY - r.top };\r\n  }\r\n\r\n  _posWorld(e) {\r\n    const s = this._posScreen(e);\r\n    return this.renderer.screenToWorld(s.x, s.y);\r\n  }\r\n\r\n  _findNodeAtWorld(x, y) {\r\n    const list = [...this.graph.nodes.values()];\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n      const n = list[i];\r\n      if (hitTestNode(n, x, y)) return n;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findPortAtWorld(x, y) {\r\n    for (const n of this.graph.nodes.values()) {\r\n      for (let i = 0; i < n.inputs.length; i++) {\r\n        const r = portRect(n, n.inputs[i], i, \"in\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.inputs[i], dir: \"in\", idx: i };\r\n      }\r\n      for (let i = 0; i < n.outputs.length; i++) {\r\n        const r = portRect(n, n.outputs[i], i, \"out\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.outputs[i], dir: \"out\", idx: i };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { x, y } = this._posScreen(e);\r\n    const factor = Math.pow(1.0015, -e.deltaY); // smooth zoom\r\n    this.renderer.zoomAt(factor, x, y);\r\n    this.render();\r\n  }\r\n\r\n  _findIncomingEdge(nodeId, portId) {\r\n    for (const [eid, e] of this.graph.edges) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return { id: eid, edge: e };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _resizeHandleRect(node) {\r\n    const s = 10; // handle size (world units)\r\n    return {\r\n      x: node.pos.x + node.size.width - s,\r\n      y: node.pos.y + node.size.height - s,\r\n      w: s,\r\n      h: s,\r\n    };\r\n  }\r\n\r\n  _hitResizeHandle(node, wx, wy) {\r\n    const r = this._resizeHandleRect(node);\r\n    return wx >= r.x && wx <= r.x + r.w && wy >= r.y && wy <= r.y + r.h;\r\n  }\r\n\r\n  _onDown(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    // 0) MMB(휠 버튼) 드래그는 항상 패닝\r\n    if (e.button === 1) {\r\n      this.panning = { x: s.x, y: s.y };\r\n      return;\r\n    }\r\n\r\n    // 1) 포트(OUT) 위 좌클릭이면 연결 시작\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (e.button === 0 && port && port.dir === \"out\") {\r\n      const outR = portRect(port.node, port.port, port.idx, \"out\");\r\n      const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n      this.connecting = {\r\n        fromNode: port.node.id,\r\n        fromPort: port.port.id,\r\n        x: screenFrom.x,\r\n        y: screenFrom.y,\r\n      };\r\n      return;\r\n    }\r\n\r\n    if (e.button === 0 && port && port.dir === \"in\") {\r\n      const incoming = this._findIncomingEdge(port.node.id, port.port.id);\r\n      if (incoming) {\r\n        const { edge, id } = incoming;\r\n\r\n        // remove as command (즉시 실행 → 미리보기에서도 사라짐)\r\n        const rm = RemoveEdgeCmd(this.graph, id);\r\n        if (rm) this.stack.exec(rm);\r\n\r\n        const outNode = this.graph.nodes.get(edge.fromNode);\r\n        const iOut = outNode.outputs.findIndex((p) => p.id === edge.fromPort);\r\n        const outR = portRect(outNode, outNode.outputs[iOut], iOut, \"out\");\r\n        const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n\r\n        this.connecting = {\r\n          fromNode: edge.fromNode,\r\n          fromPort: edge.fromPort,\r\n          x: screenFrom.x,\r\n          y: screenFrom.y,\r\n          _removedEdge: { id, edge }, // 참고용 메모 (이미 제거됨)\r\n        };\r\n        this.render();\r\n        return;\r\n      }\r\n      // 들어오는 엣지가 없으면 그냥 무시\r\n    }\r\n\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    // 먼저 리사이즈 핸들 클릭인지 확인\r\n    if (e.button === 0 && node && this._hitResizeHandle(node, w.x, w.y)) {\r\n      this.resizing = {\r\n        nodeId: node.id,\r\n        startW: node.size.width,\r\n        startH: node.size.height,\r\n        startX: w.x,\r\n        startY: w.y,\r\n      };\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 2) 노드 위 좌클릭이면 선택 전환 + 드래그 시작\r\n    if (e.button === 0 && node) {\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this.dragging = {\r\n        nodeId: node.id,\r\n        dx: w.x - node.pos.x,\r\n        dy: w.y - node.pos.y,\r\n        startPos: { x: node.pos.x, y: node.pos.y }, // 원위치 저장\r\n      };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 3) 빈 공간 좌클릭이면: 선택 해제 + 패닝 시작\r\n    if (e.button === 0) {\r\n      if (this.selection.size) this.selection.clear();\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 기타는 무시\r\n  }\r\n\r\n  _onMove(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this.renderer.screenToWorld(s.x, s.y);\r\n\r\n    if (this.resizing) {\r\n      const n = this.graph.nodes.get(this.resizing.nodeId);\r\n      const dx = w.x - this.resizing.startX;\r\n      const dy = w.y - this.resizing.startY;\r\n\r\n      const minW = Controller.MIN_NODE_WIDTH;\r\n      const minH = Controller.MIN_NODE_HEIGHT; // 최소 크기 (원하면 조정)\r\n      n.size.width = Math.max(minW, this.resizing.startW + dx);\r\n      n.size.height = Math.max(minH, this.resizing.startH + dy);\r\n\r\n      this.hooks?.emit(\"node:resize\", n);\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.panning) {\r\n      const dx = s.x - this.panning.x;\r\n      const dy = s.y - this.panning.y;\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.renderer.panBy(dx, dy);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      n.pos.x = w.x - this.dragging.dx;\r\n      n.pos.y = w.y - this.dragging.dy;\r\n      this.hooks?.emit(\"node:move\", n);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 연결 드래그 프리뷰: 화면 좌표로 저장\r\n    if (this.connecting) {\r\n      this.connecting.x = s.x;\r\n      this.connecting.y = s.y;\r\n      this.render();\r\n    }\r\n\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (port && (port.dir === \"out\" || port.dir === \"in\")) {\r\n      this._setCursor(\"grabbing\");\r\n    } else {\r\n      this._setCursor(\"default\");\r\n    }\r\n\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    if (node && this._hitResizeHandle(node, w.x, w.y)) {\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  _onUp(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    if (this.panning) {\r\n      this.panning = null;\r\n      return;\r\n    }\r\n\r\n    if (this.connecting) {\r\n      const from = this.connecting;\r\n      const portIn = this._findPortAtWorld(w.x, w.y);\r\n      if (portIn && portIn.dir === \"in\") {\r\n        // AddEdge as command\r\n        this.stack.exec(\r\n          AddEdgeCmd(\r\n            this.graph,\r\n            from.fromNode,\r\n            from.fromPort,\r\n            portIn.node.id,\r\n            portIn.port.id\r\n          )\r\n        );\r\n      }\r\n      // else: 빈 곳에 놓으면 이미 RemoveEdgeCmd 실행된 상태 → \"해제\" 완료\r\n\r\n      this.connecting = null;\r\n      this.render();\r\n    }\r\n\r\n    if (this.resizing) {\r\n      const n = this.graph.nodes.get(this.resizing.nodeId);\r\n      const from = { w: this.resizing.startW, h: this.resizing.startH };\r\n      const to = { w: n.size.width, h: n.size.height };\r\n      if (from.w !== to.w || from.h !== to.h) {\r\n        this.stack.exec(ResizeNodeCmd(n, from, to));\r\n      }\r\n      this.resizing = null;\r\n      this._setCursor(\"default\");\r\n      // render()는 위에서 이미 호출하고 있으면 생략 가능\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      const start = this.dragging.startPos;\r\n      const end = { x: n.pos.x, y: n.pos.y };\r\n      // 위치가 바뀐 경우만 커밋\r\n      if (start.x !== end.x || start.y !== end.y) {\r\n        this.stack.exec(MoveNodeCmd(n, start, end));\r\n      }\r\n      this.dragging = null;\r\n    }\r\n\r\n    this.dragging = null;\r\n  }\r\n\r\n  render() {\r\n    const tEdge = this.renderTempEdge();\r\n\r\n    this.renderer.draw(this.graph, {\r\n      selection: this.selection,\r\n      tempEdge: tEdge, // 그대로 전달\r\n    });\r\n  }\r\n\r\n  renderTempEdge() {\r\n    if (!this.connecting) return null;\r\n    const a = this._portAnchorScreen(\r\n      this.connecting.fromNode,\r\n      this.connecting.fromPort\r\n    ); // {x,y}\r\n    return {\r\n      x1: a.x,\r\n      y1: a.y,\r\n      x2: this.connecting.x,\r\n      y2: this.connecting.y,\r\n    };\r\n  }\r\n\r\n  _portAnchorScreen(nodeId, portId) {\r\n    const n = this.graph.nodes.get(nodeId);\r\n    const iOut = n.outputs.findIndex((p) => p.id === portId);\r\n    const r = portRect(n, null, iOut, \"out\"); // world rect\r\n    return this.renderer.worldToScreen(r.x, r.y + 7); // -> screen point\r\n  }\r\n}\r\n\r\nfunction rectHas(r, x, y) {\r\n  return x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h;\r\n}\r\n","export class Runner {\r\n  constructor({ graph, registry, hooks, cyclesPerFrame = 1 }) {\r\n    this.graph = graph;\r\n    this.registry = registry;\r\n    this.hooks = hooks;\r\n    this.running = false;\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.cyclesPerFrame = Math.max(1, cyclesPerFrame | 0);\r\n  }\r\n\r\n  // 외부에서 실행 중인지 확인\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  // 실행 도중에도 CPS 변경 가능\r\n  setCyclesPerFrame(n) {\r\n    this.cyclesPerFrame = Math.max(1, n | 0);\r\n  }\r\n\r\n  step(cycles = 1, dt = 0) {\r\n    const nCycles = Math.max(1, cycles | 0);\r\n    for (let c = 0; c < nCycles; c++) {\r\n      for (const node of this.graph.nodes.values()) {\r\n        const def = this.registry.types.get(node.type);\r\n        if (def?.onExecute) {\r\n          try {\r\n            def.onExecute(node, {\r\n              dt,\r\n              graph: this.graph,\r\n              getInput: (portName) => {\r\n                const p =\r\n                  node.inputs.find((i) => i.name === portName) ||\r\n                  node.inputs[0];\r\n                return p ? this.graph.getInput(node.id, p.id) : undefined;\r\n              },\r\n              setOutput: (portName, value) => {\r\n                const p =\r\n                  node.outputs.find((o) => o.name === portName) ||\r\n                  node.outputs[0];\r\n                if (p) this.graph.setOutput(node.id, p.id, value);\r\n              },\r\n            });\r\n          } catch (err) {\r\n            this.hooks?.emit?.(\"error\", err);\r\n          }\r\n        }\r\n      }\r\n      // commit writes for this cycle\r\n      this.graph.swapBuffers();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:start\");\r\n\r\n    const loop = (t) => {\r\n      if (!this.running) return;\r\n      const dtMs = this._last ? t - this._last : 0;\r\n      this._last = t;\r\n      const dt = dtMs / 1000; // seconds\r\n\r\n      // 1) 스텝 실행\r\n      this.step(this.cyclesPerFrame, dt);\r\n\r\n      // 2) 프레임 훅 (렌더러/컨트롤러는 여기서 running, time, dt를 받아 표현 업데이트)\r\n      this.hooks?.emit?.(\"runner:tick\", {\r\n        time: t,\r\n        dt,\r\n        running: true,\r\n        cps: this.cyclesPerFrame,\r\n      });\r\n\r\n      this._raf = requestAnimationFrame(loop);\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(loop);\r\n  }\r\n\r\n  stop() {\r\n    if (!this.running) return;\r\n    this.running = false;\r\n    if (this._raf) cancelAnimationFrame(this._raf);\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:stop\");\r\n  }\r\n}\r\n","import { Registry } from \"./core/Registry.js\";\r\nimport { createHooks } from \"./core/Hooks.js\";\r\nimport { Graph } from \"./core/Graph.js\";\r\nimport { CanvasRenderer } from \"./render/CanvasRenderer.js\";\r\nimport { Controller } from \"./interact/Controller.js\";\r\nimport { Runner } from \"./core/Runner.js\";\r\n\r\nexport function createGraphEditor(\r\n  canvas,\r\n  { theme, hooks: customHooks, autorun = true } = {}\r\n) {\r\n  const hooks =\r\n    customHooks ??\r\n    createHooks([\r\n      // essential hooks\r\n      \"node:create\",\r\n      \"node:move\",\r\n      \"edge:create\",\r\n      \"edge:delete\",\r\n      \"graph:serialize\",\r\n      \"error\",\r\n      \"runner:tick\",\r\n      \"runner:start\",\r\n      \"runner:stop\",\r\n      \"node:resize\",\r\n    ]);\r\n  const registry = new Registry();\r\n  const graph = new Graph({ hooks, registry });\r\n  const renderer = new CanvasRenderer(canvas, { theme, registry });\r\n  const controller = new Controller({ graph, renderer, hooks });\r\n  const runner = new Runner({ graph, registry, hooks });\r\n\r\n  hooks.on(\"runner:tick\", ({ time, dt }) => {\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null, // 필요시 helper\r\n      running: true,\r\n      time,\r\n      dt,\r\n    });\r\n  });\r\n  hooks.on(\"runner:start\", () => {\r\n    // 첫 프레임 즉시 렌더\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: true,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n  hooks.on(\"runner:stop\", () => {\r\n    // 정지 프레임\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: false,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n\r\n  // default node\r\n  registry.register(\"core/Note\", {\r\n    title: \"Note\",\r\n    size: { w: 180, h: 80 },\r\n    inputs: [{ name: \"in\", datatype: \"any\" }],\r\n    outputs: [{ name: \"out\", datatype: \"any\" }],\r\n    onCreate(node) {\r\n      node.state.text = \"hello\";\r\n    },\r\n    onExecute(node, { dt, getInput, setOutput }) {\r\n      // Simple passthrough with uppercase and a heartbeat value\r\n      const incoming = getInput(\"in\");\r\n      const out = (incoming ?? node.state.text ?? \"\").toString().toUpperCase();\r\n      setOutput(\r\n        \"out\",\r\n        out + ` · ${Math.floor((performance.now() / 1000) % 100)}`\r\n      );\r\n    },\r\n    onDraw(node, { ctx, theme }) {\r\n      const pr = 8;\r\n      const { x, y } = node.pos;\r\n      const { width: w } = node.size;\r\n      const lx = x + pr; // 월드 x\r\n      const ly = y + 24 + 6; // 타이틀 바(24) 아래 여백 6\r\n      // renderer._drawScreenText(node.state.text ?? \"hello\", lx, ly, {\r\n      //   fontPx: 11,\r\n      //   color: theme.text,\r\n      //   baseline: \"top\",\r\n      //   align: \"left\",\r\n      // });\r\n    },\r\n  });\r\n\r\n  // initial render & resize\r\n\r\n  renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n  controller.render();\r\n\r\n  const ro = new ResizeObserver(() => {\r\n    renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n    controller.render();\r\n  });\r\n  ro.observe(canvas);\r\n\r\n  const api = {\r\n    graph,\r\n    renderer,\r\n    controller,\r\n    hooks,\r\n    registry,\r\n    runner,\r\n    addNode: (...args) => graph.addNode(...args),\r\n    toJSON: () => graph.toJSON(),\r\n    fromJSON: (data) => Graph.fromJSON(data, { hooks, registry }),\r\n    resize: (w, h) => renderer.resize(w, h),\r\n    render: () => controller.render(),\r\n    start: () => runner.start(),\r\n    stop: () => runner.stop(),\r\n    destroy: () => {\r\n      runner.stop();\r\n      ro.disconnect();\r\n    },\r\n  };\r\n\r\n  if (autorun) runner.start();\r\n  return api;\r\n}\r\n","export function createHooks(names) {\r\n  const map = Object.fromEntries(names.map((n) => [n, new Set()]));\r\n  return {\r\n    on(name, fn) {\r\n      map[name].add(fn);\r\n      return () => map[name].delete(fn);\r\n    },\r\n    async emit(name, ...args) {\r\n      for (const fn of map[name]) await fn(...args);\r\n    },\r\n  };\r\n}\r\n"],"names":["Registry","constructor","this","types","Map","register","type","def","has","Error","set","unregister","delete","removeAll","clear","createInstance","get","randomUUID","g","globalThis","self","window","global","c","crypto","msCrypto","getRandomValues","bytes","Uint8Array","hex","Array","from","b","toString","padStart","slice","join","req","Function","nodeCrypto","randomBytes","i","Math","floor","random","Node","id","title","x","y","width","height","pos","size","inputs","outputs","state","addInput","name","datatype","port","dir","push","addOutput","Edge","fromNode","fromPort","toNode","toPort","Graph","hooks","registry","nodes","edges","_valuesA","_valuesB","_useAasCurrent","getNodeById","_id","node","entries","addNode","opts","_a","w","_b","h","o","_c","onCreate","call","_d","emit","removeNode","nodeId","eid","e","addEdge","_curBuf","_nextBuf","swapBuffers","setOutput","portId","value","getInput","values","toJSON","json","map","n","fromJSON","nd","ed","hitTestNode","nx","ny","portRect","idx","_CanvasRenderer","canvas","theme","edgeStyle","ctx","getContext","scale","minScale","maxScale","offsetX","offsetY","Object","assign","bg","grid","text","edge","setEdgeStyle","style","setRegistry","reg","resize","setTransform","min","max","panBy","dx","dy","zoomAt","factor","cx","cy","prev","next","wx","wy","screenToWorld","worldToScreen","_applyTransform","_resetTransform","_drawArrowhead","x1","y1","x2","y2","s","ang","atan2","beginPath","moveTo","lineTo","cos","PI","sin","closePath","fill","_drawScreenText","lx","ly","fontPx","color","align","baseline","dpr","sx","sy","save","px","round","py","font","fillStyle","textAlign","textBaseline","fillText","restore","drawGrid","fillRect","strokeStyle","lineWidth","step","x0","y0","startX","startY","stroke","draw","graph","selection","Set","tempEdge","running","time","performance","now","dt","phase","FONT_SIZE","setLineDash","lineDashOffset","_drawEdge","a","prevDash","getLineDash","ptsForArrow","_drawLine","_drawOrthogonal","_drawCurve","length","p1","p2","sel","_drawNode","onDraw","selected","roundRect","tl","tr","br","bl","forEach","p","rct","to","iOut","findIndex","iIn","pr1","pr2","_drawPolyline","points","midX","pts","prevJoin","lineJoin","prevCap","lineCap","abs","bezierCurveTo","__publicField","CanvasRenderer","r","quadraticCurveTo","findEdgeId","d","CommandStack","undoStack","redoStack","exec","cmd","do","undo","pop","redo","_Controller","renderer","stack","dragging","connecting","panning","resizing","_cursor","_onKeyPressEvt","_onKeyPress","bind","_onDownEvt","_onDown","_onWheelEvt","_onWheel","_onMoveEvt","_onMove","_onUpEvt","_onUp","_bindEvents","destructor","removeEventListener","passive","addEventListener","ctrlKey","metaKey","key","toLowerCase","preventDefault","shiftKey","render","nodeObj","removedNode","removedEdges","filter","console","log","RemoveNodeCmd","_setCursor","cursor","_posScreen","getBoundingClientRect","clientX","left","clientY","top","_posWorld","_findNodeAtWorld","list","_findPortAtWorld","rectHas","pow","deltaY","_findIncomingEdge","_resizeHandleRect","_hitResizeHandle","button","outR","screenFrom","incoming","rm","edgeId","RemoveEdgeCmd","outNode","_removedEdge","startW","startH","add","startPos","minW","MIN_NODE_WIDTH","minH","MIN_NODE_HEIGHT","portIn","addedId","AddEdgeCmd","fromSize","toSize","start","end","fromPos","toPos","MoveNodeCmd","tEdge","renderTempEdge","_portAnchorScreen","Controller","Runner","cyclesPerFrame","_raf","_last","isRunning","setCyclesPerFrame","cycles","nCycles","onExecute","portName","find","err","loop","t","dtMs","cps","requestAnimationFrame","stop","cancelAnimationFrame","customHooks","autorun","names","fromEntries","on","fn","args","createHooks","controller","runner","toUpperCase","clientWidth","clientHeight","ro","ResizeObserver","observe","api","data","destroy","disconnect"],"mappings":"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"}