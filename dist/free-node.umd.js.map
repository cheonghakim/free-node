{"version":3,"file":"free-node.umd.js","sources":["../src/core/Registry.js","../src/utils/utils.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Graph.js","../src/render/hitTest.js","../src/render/CanvasRenderer.js","../src/interact/Controller.js","../src/core/Runner.js","../src/index.js","../src/core/Hooks.js"],"sourcesContent":["// src/core/Registry.js\r\nexport class Registry {\r\n  constructor() {\r\n    this.types = new Map();\r\n  }\r\n  register(type, def) {\r\n    // def: {title?, size?, inputs?, outputs?, onCreate?, onExecute?, onDraw?}\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.set(type, def);\r\n  }\r\n  createInstance(type) {\r\n    const def = this.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    return def;\r\n  }\r\n}\r\n","export function randomUUID() {\r\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\r\n    // 네이티브 지원\r\n    return crypto.randomUUID();\r\n  }\r\n\r\n  // 네이티브 미지원 → RFC 4122 v4 직접 구현\r\n  const bytes = new Uint8Array(16);\r\n  crypto.getRandomValues(bytes);\r\n\r\n  // RFC4122 version & variant bits 설정\r\n  bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n  const hex = Array.from(bytes).map((b) => b.toString(16).padStart(2, \"0\"));\r\n\r\n  return (\r\n    hex.slice(0, 4).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(4, 6).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(6, 8).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(8, 10).join(\"\") +\r\n    \"-\" +\r\n    hex.slice(10).join(\"\")\r\n  );\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Node.js\r\nexport class Node {\r\n  constructor({ id, type, title, x = 0, y = 0, width = 160, height = 60 }) {\r\n    this.id = id ?? randomUUID();\r\n    this.type = type;\r\n    this.title = title ?? type;\r\n    this.pos = { x, y };\r\n    this.size = { width, height };\r\n    this.inputs = []; // {id,name,datatype}\r\n    this.outputs = []; // {id,name,datatype}\r\n    this.state = {}; // 사용자 상태\r\n  }\r\n  addInput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"in\" };\r\n    this.inputs.push(port);\r\n    return port;\r\n  }\r\n  addOutput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"out\" };\r\n    this.outputs.push(port);\r\n    return port;\r\n  }\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Edge.js\r\nexport class Edge {\r\n  constructor({ id, fromNode, fromPort, toNode, toPort }) {\r\n    this.id = id ?? randomUUID();\r\n    this.fromNode = fromNode;\r\n    this.fromPort = fromPort;\r\n    this.toNode = toNode;\r\n    this.toPort = toPort;\r\n  }\r\n}\r\n","import { Node } from \"./Node.js\";\r\nimport { Edge } from \"./Edge.js\";\r\n\r\nexport class Graph {\r\n  constructor({ hooks, registry }) {\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n    this.hooks = hooks;\r\n    this.registry = registry;\r\n    // double buffer for deterministic cycles\r\n    this._valuesA = new Map(); // current\r\n    this._valuesB = new Map(); // next\r\n    this._useAasCurrent = true;\r\n  }\r\n  addNode(type, opts = {}) {\r\n    const def = this.registry.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    const node = new Node({\r\n      type,\r\n      title: def.title,\r\n      width: def.size?.w,\r\n      height: def.size?.h,\r\n      ...opts,\r\n    });\r\n    for (const i of def.inputs || []) node.addInput(i.name, i.datatype);\r\n    for (const o of def.outputs || []) node.addOutput(o.name, o.datatype);\r\n    def.onCreate?.(node);\r\n    this.nodes.set(node.id, node);\r\n    this.hooks?.emit(\"node:create\", node);\r\n    return node;\r\n  }\r\n  removeNode(nodeId) {\r\n    for (const [eid, e] of this.edges)\r\n      if (e.fromNode === nodeId || e.toNode === nodeId) this.edges.delete(eid);\r\n    this.nodes.delete(nodeId);\r\n  }\r\n  addEdge(fromNode, fromPort, toNode, toPort) {\r\n    const e = new Edge({ fromNode, fromPort, toNode, toPort });\r\n    this.edges.set(e.id, e);\r\n    this.hooks?.emit(\"edge:create\", e);\r\n    return e;\r\n  }\r\n  // buffer helpers\r\n  _curBuf() {\r\n    return this._useAasCurrent ? this._valuesA : this._valuesB;\r\n  }\r\n  _nextBuf() {\r\n    return this._useAasCurrent ? this._valuesB : this._valuesA;\r\n  }\r\n  swapBuffers() {\r\n    // when moving to next cycle, promote next->current and clear next\r\n    this._useAasCurrent = !this._useAasCurrent;\r\n    this._nextBuf().clear();\r\n  }\r\n  // data helpers\r\n  setOutput(nodeId, portId, value) {\r\n    this._nextBuf().set(`${nodeId}:${portId}`, value);\r\n  }\r\n  getInput(nodeId, portId) {\r\n    // find upstream edge feeding this input\r\n    for (const e of this.edges.values()) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return this._curBuf().get(`${e.fromNode}:${e.fromPort}`);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  toJSON() {\r\n    const json = {\r\n      nodes: [...this.nodes.values()].map((n) => ({\r\n        id: n.id,\r\n        type: n.type,\r\n        title: n.title,\r\n        x: n.pos.x,\r\n        y: n.pos.y,\r\n        w: n.size.width,\r\n        h: n.size.height,\r\n        inputs: n.inputs,\r\n        outputs: n.outputs,\r\n        state: n.state,\r\n      })),\r\n      edges: [...this.edges.values()],\r\n    };\r\n    this.hooks?.emit(\"graph:serialize\", json);\r\n    return json;\r\n  }\r\n  static fromJSON(json, { hooks, registry }) {\r\n    const g = new Graph({ hooks, registry });\r\n    for (const nd of json.nodes) {\r\n      const node = new Node({\r\n        id: nd.id,\r\n        type: nd.type,\r\n        title: nd.title,\r\n        x: nd.x,\r\n        y: nd.y,\r\n        width: nd.w,\r\n        height: nd.h,\r\n      });\r\n      node.inputs = nd.inputs;\r\n      node.outputs = nd.outputs;\r\n      node.state = nd.state || {};\r\n      g.nodes.set(node.id, node);\r\n    }\r\n    for (const ed of json.edges) g.edges.set(ed.id, new Edge(ed));\r\n    return g;\r\n  }\r\n}\r\n","// src/render/hitTest.js\r\nexport function hitTestNode(node, x, y) {\r\n  const { x: nx, y: ny } = node.pos;\r\n  const { width, height } = node.size;\r\n  return x >= nx && x <= nx + width && y >= ny && y <= ny + height;\r\n}\r\nexport function portRect(node, port, idx, dir) {\r\n  const pad = 8,\r\n    row = 20;\r\n  const y = node.pos.y + 28 + idx * row;\r\n  if (dir === \"in\") return { x: node.pos.x - pad, y, w: pad, h: 14 };\r\n  if (dir === \"out\")\r\n    return { x: node.pos.x + node.size.width, y, w: pad, h: 14 };\r\n}\r\n","import { hitTestNode, portRect } from \"./hitTest.js\";\r\n\r\nexport class CanvasRenderer {\r\n  constructor(canvas, { theme = {}, registry, edgeStyle = \"orthogonal\" } = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.registry = registry; // to call per-node onDraw\r\n\r\n    // viewport transform\r\n    this.scale = 1;\r\n    this.minScale = 0.25;\r\n    this.maxScale = 3;\r\n    this.offsetX = 0;\r\n    this.offsetY = 0;\r\n\r\n    // 'bezier' | 'line' | 'orthogonal'\r\n    this.edgeStyle = edgeStyle;\r\n\r\n    this.theme = Object.assign(\r\n      {\r\n        bg: \"#141417\",\r\n        grid: \"#25252a\",\r\n        node: \"#1e1e24\",\r\n        title: \"#2a2a31\",\r\n        text: \"#e9e9ef\",\r\n        port: \"#8aa1ff\",\r\n        edge: \"#7f8cff\",\r\n      },\r\n      theme\r\n    );\r\n  }\r\n  setEdgeStyle(style) {\r\n    this.edgeStyle =\r\n      style === \"line\" || style === \"orthogonal\" ? style : \"bezier\";\r\n  }\r\n  setRegistry(reg) {\r\n    this.registry = reg;\r\n  }\r\n  resize(w, h) {\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n  }\r\n  setTransform({\r\n    scale = this.scale,\r\n    offsetX = this.offsetX,\r\n    offsetY = this.offsetY,\r\n  } = {}) {\r\n    this.scale = Math.min(this.maxScale, Math.max(this.minScale, scale));\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n  }\r\n  panBy(dx, dy) {\r\n    this.offsetX += dx;\r\n    this.offsetY += dy;\r\n  }\r\n  zoomAt(factor, cx, cy) {\r\n    // factor > 1 zoom in, < 1 zoom out, centered at screen point (cx, cy)\r\n    const prev = this.scale;\r\n    const next = Math.min(\r\n      this.maxScale,\r\n      Math.max(this.minScale, prev * factor)\r\n    );\r\n    if (next === prev) return;\r\n    // keep the world point under cursor fixed: adjust offset\r\n    const wx = (cx - this.offsetX) / prev;\r\n    const wy = (cy - this.offsetY) / prev;\r\n    this.offsetX = cx - wx * next;\r\n    this.offsetY = cy - wy * next;\r\n    this.scale = next;\r\n  }\r\n  _drawArrowhead(x1, y1, x2, y2, size = 10) {\r\n    const { ctx } = this;\r\n    const s = size / this.scale; // 줌에 따라 크기 보정\r\n    const ang = Math.atan2(y2 - y1, x2 - x1);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x2, y2);\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang - Math.PI / 6),\r\n      y2 - s * Math.sin(ang - Math.PI / 6)\r\n    );\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang + Math.PI / 6),\r\n      y2 - s * Math.sin(ang + Math.PI / 6)\r\n    );\r\n    ctx.closePath();\r\n    ctx.fill(); // 선 색상과 동일한 fill이 자연스러움\r\n  }\r\n\r\n  screenToWorld(x, y) {\r\n    return {\r\n      x: (x - this.offsetX) / this.scale,\r\n      y: (y - this.offsetY) / this.scale,\r\n    };\r\n  }\r\n  worldToScreen(x, y) {\r\n    return {\r\n      x: x * this.scale + this.offsetX,\r\n      y: y * this.scale + this.offsetY,\r\n    };\r\n  }\r\n\r\n  // ── Drawing ────────────────────────────────────────────────────────────────\r\n  _applyTransform() {\r\n    const { ctx } = this;\r\n    ctx.setTransform(this.scale, 0, 0, this.scale, this.offsetX, this.offsetY);\r\n  }\r\n  _resetTransform() {\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  drawGrid() {\r\n    const { ctx, canvas, theme, scale, offsetX, offsetY } = this;\r\n    // clear screen in screen space\r\n\r\n    this._resetTransform();\r\n    ctx.fillStyle = theme.bg;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // draw grid in world space so it pans/zooms\r\n    this._applyTransform();\r\n    ctx.strokeStyle = theme.grid;\r\n    ctx.lineWidth = 1 / scale; // keep 1px apparent\r\n\r\n    const base = 20; // world units\r\n    const step = base;\r\n\r\n    // visible world bounds\r\n    const x0 = -offsetX / scale;\r\n    const y0 = -offsetY / scale;\r\n    const x1 = (canvas.width - offsetX) / scale;\r\n    const y1 = (canvas.height - offsetY) / scale;\r\n\r\n    const startX = Math.floor(x0 / step) * step;\r\n    const startY = Math.floor(y0 / step) * step;\r\n\r\n    ctx.beginPath();\r\n    for (let x = startX; x <= x1; x += step) {\r\n      ctx.moveTo(x, y0);\r\n      ctx.lineTo(x, y1);\r\n    }\r\n    for (let y = startY; y <= y1; y += step) {\r\n      ctx.moveTo(x0, y);\r\n      ctx.lineTo(x1, y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  draw(graph, { selection = new Set(), tempEdge = null } = {}) {\r\n    this.drawGrid();\r\n    console.log(tempEdge);\r\n    const { ctx, theme } = this;\r\n    this._applyTransform();\r\n\r\n    // edges\r\n    ctx.strokeStyle = theme.edge;\r\n    ctx.lineWidth = 2 / this.scale;\r\n    for (const e of graph.edges.values()) this._drawEdge(graph, e);\r\n\r\n    // temp edge (given in screen coords); convert to world if needed\r\n    // draw(graph, { selection, tempEdge }) 내부의 tempEdge 처리 구간만 교체\r\n    if (tempEdge) {\r\n      const a = this.screenToWorld(tempEdge.x1, tempEdge.y1);\r\n      const b = this.screenToWorld(tempEdge.x2, tempEdge.y2);\r\n\r\n      // 점선 프리뷰\r\n      const prevDash = this.ctx.getLineDash();\r\n      this.ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n\r\n      let ptsForArrow = null;\r\n      if (this.edgeStyle === \"line\") {\r\n        this._drawLine(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      } else if (this.edgeStyle === \"orthogonal\") {\r\n        ptsForArrow = this._drawOrthogonal(a.x, a.y, b.x, b.y);\r\n      } else {\r\n        this._drawCurve(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      }\r\n\r\n      this.ctx.setLineDash(prevDash);\r\n\r\n      // (선택) 화살표 표시: 마지막 세그먼트 방향 사용\r\n      if (ptsForArrow && ptsForArrow.length >= 2) {\r\n        const p1 = ptsForArrow[ptsForArrow.length - 2];\r\n        const p2 = ptsForArrow[ptsForArrow.length - 1];\r\n        this.ctx.fillStyle = this.theme.edge;\r\n        this.ctx.strokeStyle = this.theme.edge;\r\n        this._drawArrowhead(p1.x, p1.y, p2.x, p2.y, 12);\r\n      }\r\n    }\r\n\r\n    // nodes\r\n    for (const n of graph.nodes.values()) {\r\n      const sel = selection.has(n.id);\r\n      this._drawNode(n, sel);\r\n      const def = this.registry?.types?.get(n.type);\r\n      if (def?.onDraw) def.onDraw(n, { ctx, theme });\r\n    }\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  _drawNode(node, selected) {\r\n    const { ctx, theme } = this;\r\n    const r = 8;\r\n    const { x, y } = node.pos;\r\n    const { width: w, height: h } = node.size;\r\n    ctx.fillStyle = theme.node;\r\n    ctx.strokeStyle = selected ? \"#6cf\" : \"#333\";\r\n    ctx.lineWidth = (selected ? 2 : 1.2) / this.scale;\r\n    roundRect(ctx, x, y, w, h, r);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.fillStyle = theme.title;\r\n    roundRect(ctx, x, y, w, 24, { tl: r, tr: r, br: 0, bl: 0 });\r\n    ctx.fill();\r\n    ctx.fillStyle = theme.text;\r\n    ctx.font = `${12 / this.scale}px system-ui`;\r\n    ctx.fillText(node.title, x + 8, y + 16 / 1);\r\n    ctx.fillStyle = theme.port;\r\n    node.inputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"in\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n    node.outputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"out\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n  }\r\n\r\n  _drawEdge(graph, e) {\r\n    const from = graph.nodes.get(e.fromNode);\r\n    const to = graph.nodes.get(e.toNode);\r\n    if (!from || !to) return;\r\n    const iOut = from.outputs.findIndex((p) => p.id === e.fromPort);\r\n    const iIn = to.inputs.findIndex((p) => p.id === e.toPort);\r\n    const pr1 = portRect(from, null, iOut, \"out\");\r\n    const pr2 = portRect(to, null, iIn, \"in\");\r\n    const x1 = pr1.x,\r\n      y1 = pr1.y + 7,\r\n      x2 = pr2.x,\r\n      y2 = pr2.y + 7;\r\n    if (this.edgeStyle === \"line\") {\r\n      this._drawLine(x1, y1, x2, y2);\r\n    } else if (this.edgeStyle === \"orthogonal\") {\r\n      this._drawOrthogonal(x1, y1, x2, y2);\r\n    } else {\r\n      this._drawCurve(x1, y1, x2, y2); // bezier (기존)\r\n    }\r\n  }\r\n\r\n  _drawLine(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawPolyline(points) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; i++)\r\n      ctx.lineTo(points[i].x, points[i].y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawOrthogonal(x1, y1, x2, y2) {\r\n    const dx = Math.abs(x2 - x1);\r\n    const dy = Math.abs(y2 - y1);\r\n    // 중간 축을 결정 (더 짧은 축을 가운데에 두면 보기 좋음)\r\n    const useHVH = true; // 가로-세로-가로(HVH) vs 세로-가로-세로(VHV)\r\n    const midX = (x1 + x2) / 2;\r\n    const midY = (y1 + y2) / 2;\r\n\r\n    let pts;\r\n    if (useHVH) {\r\n      // x1,y1 → midX,y1 → midX,y2 → x2,y2\r\n      pts = [\r\n        { x: x1, y: y1 },\r\n        { x: midX, y: y1 },\r\n        { x: midX, y: y2 },\r\n        { x: x2, y: y2 },\r\n      ];\r\n    }\r\n    // else {\r\n    //   // x1,y1 → x1,midY → x2,midY → x2,y2\r\n    //   pts = [\r\n    //     { x: x1, y: y1 },\r\n    //     { x: x1, y: midY },\r\n    //     { x: x2, y: midY },\r\n    //     { x: x2, y: y2 },\r\n    //   ];\r\n    // }\r\n\r\n    // 라운드 코너\r\n    const { ctx } = this;\r\n    const prevJoin = ctx.lineJoin,\r\n      prevCap = ctx.lineCap;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    this._drawPolyline(pts);\r\n    ctx.lineJoin = prevJoin;\r\n    ctx.lineCap = prevCap;\r\n\r\n    return pts; // 화살표 각도 계산에 사용\r\n  }\r\n  _drawCurve(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    const dx = Math.max(40, Math.abs(x2 - x1) * 0.4);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.bezierCurveTo(x1 + dx, y1, x2 - dx, y2, x2, y2);\r\n    ctx.stroke();\r\n  }\r\n}\r\nfunction roundRect(ctx, x, y, w, h, r = 6) {\r\n  if (typeof r === \"number\") r = { tl: r, tr: r, br: r, bl: r };\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + r.tl, y);\r\n  ctx.lineTo(x + w - r.tr, y);\r\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r.tr);\r\n  ctx.lineTo(x + w, y + h - r.br);\r\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);\r\n  ctx.lineTo(x + r.bl, y + h);\r\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r.bl);\r\n  ctx.lineTo(x, y + r.tl);\r\n  ctx.quadraticCurveTo(x, y, x + r.tl, y);\r\n  ctx.closePath();\r\n}\r\n","import { hitTestNode, portRect } from \"../render/hitTest.js\";\r\n\r\nexport class Controller {\r\n  constructor({ graph, renderer, hooks }) {\r\n    this.graph = graph;\r\n    this.renderer = renderer;\r\n    this.hooks = hooks;\r\n\r\n    this.selection = new Set();\r\n    this.dragging = null; // { nodeId, dx, dy }\r\n    this.connecting = null; // { fromNode, fromPort, x(screen), y(screen) }\r\n    this.panning = null; // { x(screen), y(screen) }\r\n\r\n    this._cursor = \"default\";\r\n\r\n    this._bindEvents();\r\n  }\r\n\r\n  _bindEvents() {\r\n    const c = this.renderer.canvas;\r\n    c.addEventListener(\"mousedown\", (e) => this._onDown(e));\r\n    window.addEventListener(\"mousemove\", (e) => this._onMove(e));\r\n    window.addEventListener(\"mouseup\", (e) => this._onUp(e));\r\n    // 더블클릭으로 노드 생성하지 않음 (요청 사항)\r\n    // c.addEventListener(\"dblclick\", (e) => this._onDbl(e));\r\n    c.addEventListener(\"wheel\", (e) => this._onWheel(e), { passive: false });\r\n\r\n    // 필요 시 우클릭 패닝을 원하면 이걸 켜세요.\r\n    // c.addEventListener(\"contextmenu\", e => e.preventDefault());\r\n  }\r\n\r\n  _setCursor(c) {\r\n    if (this._cursor !== c) {\r\n      this._cursor = c;\r\n      this.renderer.canvas.style.cursor = c;\r\n    }\r\n  }\r\n\r\n  _posScreen(e) {\r\n    const r = this.renderer.canvas.getBoundingClientRect();\r\n    return { x: e.clientX - r.left, y: e.clientY - r.top };\r\n  }\r\n\r\n  _posWorld(e) {\r\n    const s = this._posScreen(e);\r\n    return this.renderer.screenToWorld(s.x, s.y);\r\n  }\r\n\r\n  _findNodeAtWorld(x, y) {\r\n    const list = [...this.graph.nodes.values()];\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n      const n = list[i];\r\n      if (hitTestNode(n, x, y)) return n;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findPortAtWorld(x, y) {\r\n    for (const n of this.graph.nodes.values()) {\r\n      for (let i = 0; i < n.inputs.length; i++) {\r\n        const r = portRect(n, n.inputs[i], i, \"in\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.inputs[i], dir: \"in\", idx: i };\r\n      }\r\n      for (let i = 0; i < n.outputs.length; i++) {\r\n        const r = portRect(n, n.outputs[i], i, \"out\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.outputs[i], dir: \"out\", idx: i };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { x, y } = this._posScreen(e);\r\n    const factor = Math.pow(1.0015, -e.deltaY); // smooth zoom\r\n    this.renderer.zoomAt(factor, x, y);\r\n    this.render();\r\n  }\r\n\r\n  _findIncomingEdge(nodeId, portId) {\r\n    for (const [eid, e] of this.graph.edges) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return { id: eid, edge: e };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onDown(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    // 0) MMB(휠 버튼) 드래그는 항상 패닝\r\n    if (e.button === 1) {\r\n      this.panning = { x: s.x, y: s.y };\r\n      return;\r\n    }\r\n\r\n    // 1) 포트(OUT) 위 좌클릭이면 연결 시작\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (e.button === 0 && port && port.dir === \"out\") {\r\n      const outR = portRect(port.node, port.port, port.idx, \"out\");\r\n      const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n      this.connecting = {\r\n        fromNode: port.node.id,\r\n        fromPort: port.port.id,\r\n        x: screenFrom.x,\r\n        y: screenFrom.y,\r\n      };\r\n      return;\r\n    }\r\n\r\n    if (e.button === 0 && port && port.dir === \"in\") {\r\n      const incoming = this._findIncomingEdge(port.node.id, port.port.id);\r\n      if (incoming) {\r\n        // 원래 소스 쪽에서 다시 끌어오도록, 엣지를 임시 삭제\r\n        const { edge, id } = incoming;\r\n        this.graph.edges.delete(id);\r\n        const outR = portRect(\r\n          this.graph.nodes.get(edge.fromNode),\r\n          this.graph.nodes\r\n            .get(edge.fromNode)\r\n            .outputs.find((p) => p.id === edge.fromPort),\r\n          this.graph.nodes\r\n            .get(edge.fromNode)\r\n            .outputs.findIndex((p) => p.id === edge.fromPort),\r\n          \"out\"\r\n        );\r\n        const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n        this.connecting = {\r\n          fromNode: edge.fromNode,\r\n          fromPort: edge.fromPort,\r\n          x: screenFrom.x,\r\n          y: screenFrom.y,\r\n          // 표시용: 끊어낸 대상 인풋\r\n          _rewireFromEdgeId: id,\r\n        };\r\n        this.render();\r\n        return;\r\n      }\r\n      // 들어오는 엣지가 없으면 그냥 무시\r\n    }\r\n\r\n    // 2) 노드 위 좌클릭이면 선택 전환 + 드래그 시작\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    if (e.button === 0 && node) {\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this.dragging = {\r\n        nodeId: node.id,\r\n        dx: w.x - node.pos.x,\r\n        dy: w.y - node.pos.y,\r\n      };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 3) 빈 공간 좌클릭이면: 선택 해제 + 패닝 시작\r\n    if (e.button === 0) {\r\n      if (this.selection.size) this.selection.clear();\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 기타는 무시\r\n  }\r\n\r\n  _onMove(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this.renderer.screenToWorld(s.x, s.y);\r\n\r\n    if (this.panning) {\r\n      const dx = s.x - this.panning.x;\r\n      const dy = s.y - this.panning.y;\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.renderer.panBy(dx, dy);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      n.pos.x = w.x - this.dragging.dx;\r\n      n.pos.y = w.y - this.dragging.dy;\r\n      this.hooks?.emit(\"node:move\", n);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 연결 드래그 프리뷰: 화면 좌표로 저장\r\n    if (this.connecting) {\r\n      this.connecting.x = s.x;\r\n      this.connecting.y = s.y;\r\n      this.render();\r\n    }\r\n\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (port && (port.dir === \"out\" || port.dir === \"in\")) {\r\n      this._setCursor(\"grabbing\");\r\n    } else {\r\n      this._setCursor(\"default\");\r\n    }\r\n  }\r\n\r\n  _onUp(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    if (this.panning) {\r\n      this.panning = null;\r\n      return;\r\n    }\r\n\r\n    if (this.connecting) {\r\n      const from = this.connecting;\r\n      const portIn = this._findPortAtWorld(w.x, w.y);\r\n      if (portIn && portIn.dir === \"in\") {\r\n        this.graph.addEdge(\r\n          from.fromNode,\r\n          from.fromPort,\r\n          portIn.node.id,\r\n          portIn.port.id\r\n        );\r\n      }\r\n      this.connecting = null;\r\n      this.render();\r\n    }\r\n\r\n    this.dragging = null;\r\n  }\r\n\r\n  render() {\r\n    const tEdge = this.connecting\r\n      ? (() => {\r\n          const a = this._portAnchorScreen(\r\n            this.connecting.fromNode,\r\n            this.connecting.fromPort\r\n          ); // {x,y}\r\n          const b = { x: this.connecting.x, y: this.connecting.y }; // {x,y}\r\n          return { x1: a.x, y1: a.y, x2: b.x, y2: b.y }; // 명시적으로 x1,y1,x2,y2 구성\r\n        })()\r\n      : null;\r\n\r\n    this.renderer.draw(this.graph, {\r\n      selection: this.selection,\r\n      tempEdge: tEdge, // 그대로 전달\r\n    });\r\n  }\r\n\r\n  _portAnchorScreen(nodeId, portId) {\r\n    const n = this.graph.nodes.get(nodeId);\r\n    const iOut = n.outputs.findIndex((p) => p.id === portId);\r\n    const r = portRect(n, null, iOut, \"out\"); // world rect\r\n    return this.renderer.worldToScreen(r.x, r.y + 7); // -> screen point\r\n  }\r\n}\r\n\r\nfunction rectHas(r, x, y) {\r\n  return x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h;\r\n}\r\n","export class Runner {\r\n  constructor({ graph, registry, hooks, cyclesPerFrame = 1 }) {\r\n    this.graph = graph;\r\n    this.registry = registry;\r\n    this.hooks = hooks;\r\n    this.running = false;\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.cyclesPerFrame = Math.max(1, cyclesPerFrame | 0);\r\n  }\r\n  step(cycles = 1, dt = 0) {\r\n    const nCycles = Math.max(1, cycles | 0);\r\n    for (let c = 0; c < nCycles; c++) {\r\n      for (const node of this.graph.nodes.values()) {\r\n        const def = this.registry.types.get(node.type);\r\n        if (def?.onExecute) {\r\n          try {\r\n            def.onExecute(node, {\r\n              dt,\r\n              graph: this.graph,\r\n              getInput: (portName) => {\r\n                const p =\r\n                  node.inputs.find((i) => i.name === portName) ||\r\n                  node.inputs[0];\r\n                return p ? this.graph.getInput(node.id, p.id) : undefined;\r\n              },\r\n              setOutput: (portName, value) => {\r\n                const p =\r\n                  node.outputs.find((o) => o.name === portName) ||\r\n                  node.outputs[0];\r\n                if (p) this.graph.setOutput(node.id, p.id, value);\r\n              },\r\n            });\r\n          } catch (err) {\r\n            this.hooks?.emit(\"error\", err);\r\n          }\r\n        }\r\n      }\r\n      // commit writes for this cycle\r\n      this.graph.swapBuffers();\r\n    }\r\n  }\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    const step = (t) => {\r\n      if (!this.running) return;\r\n      const dt = this._last ? (t - this._last) / 1000 : 0; // seconds\r\n      this._last = t;\r\n      this.step(this.cyclesPerFrame, dt);\r\n      this._raf = requestAnimationFrame(step);\r\n    };\r\n    this._raf = requestAnimationFrame(step);\r\n  }\r\n  stop() {\r\n    this.running = false;\r\n    if (this._raf) cancelAnimationFrame(this._raf);\r\n    this._raf = null;\r\n    this._last = 0;\r\n  }\r\n}\r\n","import { Registry } from \"./core/Registry.js\";\r\nimport { createHooks } from \"./core/Hooks.js\";\r\nimport { Graph } from \"./core/Graph.js\";\r\nimport { CanvasRenderer } from \"./render/CanvasRenderer.js\";\r\nimport { Controller } from \"./interact/Controller.js\";\r\nimport { Runner } from \"./core/Runner.js\";\r\n\r\nexport function createGraphEditor(\r\n  canvas,\r\n  { theme, hooks: customHooks, autorun = true } = {}\r\n) {\r\n  const hooks =\r\n    customHooks ??\r\n    createHooks([\r\n      \"node:create\",\r\n      \"node:move\",\r\n      \"edge:create\",\r\n      \"edge:delete\",\r\n      \"graph:serialize\",\r\n      \"error\",\r\n    ]);\r\n  const registry = new Registry();\r\n  const graph = new Graph({ hooks, registry });\r\n  const renderer = new CanvasRenderer(canvas, { theme, registry });\r\n  const controller = new Controller({ graph, renderer, hooks });\r\n  const runner = new Runner({ graph, registry, hooks });\r\n\r\n  // default node\r\n  registry.register(\"core/Note\", {\r\n    title: \"Note\",\r\n    size: { w: 180, h: 80 },\r\n    inputs: [{ name: \"in\", datatype: \"any\" }],\r\n    outputs: [{ name: \"out\", datatype: \"any\" }],\r\n    onCreate(node) {\r\n      node.state.text = \"hello\";\r\n    },\r\n    onExecute(node, { dt, getInput, setOutput }) {\r\n      // Simple passthrough with uppercase and a heartbeat value\r\n      const incoming = getInput(\"in\");\r\n      const out = (incoming ?? node.state.text ?? \"\").toString().toUpperCase();\r\n      setOutput(\r\n        \"out\",\r\n        out + ` · ${Math.floor((performance.now() / 1000) % 100)}`\r\n      );\r\n    },\r\n    onDraw(node, { ctx, theme }) {\r\n      const pr = 8;\r\n      const { x, y } = node.pos;\r\n      const { width: w } = node.size;\r\n      ctx.fillStyle = theme.text;\r\n      ctx.font = \"11px system-ui\";\r\n      ctx.fillText(node.state.text ?? \"hello\", x + pr, y + 40);\r\n    },\r\n  });\r\n\r\n  // initial render & resize\r\n\r\n  renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n  controller.render();\r\n\r\n  const ro = new ResizeObserver(() => {\r\n    renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n    controller.render();\r\n  });\r\n  ro.observe(canvas);\r\n\r\n  const api = {\r\n    graph,\r\n    renderer,\r\n    controller,\r\n    hooks,\r\n    registry,\r\n    runner,\r\n    addNode: (...args) => graph.addNode(...args),\r\n    toJSON: () => graph.toJSON(),\r\n    fromJSON: (data) => Graph.fromJSON(data, { hooks, registry }),\r\n    resize: (w, h) => renderer.resize(w, h),\r\n    render: () => controller.render(),\r\n    start: () => runner.start(),\r\n    stop: () => runner.stop(),\r\n    destroy: () => {\r\n      runner.stop();\r\n      ro.disconnect();\r\n    },\r\n  };\r\n\r\n  if (autorun) runner.start();\r\n  return api;\r\n}\r\n","export function createHooks(names) {\r\n  const map = Object.fromEntries(names.map((n) => [n, new Set()]));\r\n  return {\r\n    on(name, fn) {\r\n      map[name].add(fn);\r\n      return () => map[name].delete(fn);\r\n    },\r\n    async emit(name, ...args) {\r\n      for (const fn of map[name]) await fn(...args);\r\n    },\r\n  };\r\n}\r\n"],"names":["Registry","constructor","this","types","Map","register","type","def","has","Error","set","createInstance","get","randomUUID","crypto","bytes","Uint8Array","getRandomValues","hex","Array","from","map","b","toString","padStart","slice","join","Node","id","title","x","y","width","height","pos","size","inputs","outputs","state","addInput","name","datatype","port","dir","push","addOutput","Edge","fromNode","fromPort","toNode","toPort","Graph","hooks","registry","nodes","edges","_valuesA","_valuesB","_useAasCurrent","addNode","opts","node","_a","w","_b","h","i","o","_c","onCreate","call","_d","emit","removeNode","nodeId","eid","e","delete","addEdge","_curBuf","_nextBuf","swapBuffers","clear","setOutput","portId","value","getInput","values","toJSON","json","n","fromJSON","g","nd","ed","hitTestNode","nx","ny","portRect","idx","CanvasRenderer","canvas","theme","edgeStyle","ctx","getContext","scale","minScale","maxScale","offsetX","offsetY","Object","assign","bg","grid","text","edge","setEdgeStyle","style","setRegistry","reg","resize","setTransform","Math","min","max","panBy","dx","dy","zoomAt","factor","cx","cy","prev","next","wx","wy","_drawArrowhead","x1","y1","x2","y2","s","ang","atan2","beginPath","moveTo","lineTo","cos","PI","sin","closePath","fill","screenToWorld","worldToScreen","_applyTransform","_resetTransform","drawGrid","fillStyle","fillRect","strokeStyle","lineWidth","step","x0","y0","startX","floor","startY","stroke","draw","graph","selection","Set","tempEdge","console","log","_drawEdge","a","prevDash","getLineDash","setLineDash","ptsForArrow","_drawLine","_drawOrthogonal","_drawCurve","length","p1","p2","sel","_drawNode","onDraw","selected","roundRect","tl","tr","br","bl","font","fillText","forEach","p","rct","to","iOut","findIndex","iIn","pr1","pr2","_drawPolyline","points","midX","pts","prevJoin","lineJoin","prevCap","lineCap","abs","bezierCurveTo","r","quadraticCurveTo","Controller","renderer","dragging","connecting","panning","_cursor","_bindEvents","c","addEventListener","_onDown","window","_onMove","_onUp","_onWheel","passive","_setCursor","cursor","_posScreen","getBoundingClientRect","clientX","left","clientY","top","_posWorld","_findNodeAtWorld","list","_findPortAtWorld","rectHas","preventDefault","pow","deltaY","render","_findIncomingEdge","button","outR","screenFrom","incoming","find","_rewireFromEdgeId","shiftKey","add","portIn","tEdge","_portAnchorScreen","Runner","cyclesPerFrame","running","_raf","_last","cycles","dt","nCycles","onExecute","portName","err","start","t","requestAnimationFrame","stop","cancelAnimationFrame","customHooks","autorun","names","fromEntries","on","fn","args","createHooks","controller","runner","toUpperCase","performance","now","clientWidth","clientHeight","ro","ResizeObserver","observe","api","data","destroy","disconnect"],"mappings":"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"}