{"version":3,"file":"free-node.es.js","sources":["../src/core/Registry.js","../src/core/Hooks.js","../src/utils/utils.js","../src/core/Node.js","../src/core/Edge.js","../src/core/Graph.js","../src/render/hitTest.js","../src/render/CanvasRenderer.js","../src/core/commands.js","../src/core/CommandStack.js","../src/interact/Controller.js","../src/core/Runner.js","../src/index.js"],"sourcesContent":["// src/core/Registry.js\r\nexport class Registry {\r\n  constructor() {\r\n    this.types = new Map();\r\n  }\r\n  register(type, def) {\r\n    // def: {title?, size?, inputs?, outputs?, onCreate?, onExecute?, onDraw?}\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.set(type, def);\r\n  }\r\n  unregister(type) {\r\n    if (this.types.has(type)) throw new Error(`Node type exists: ${type}`);\r\n    this.types.delete(type);\r\n  }\r\n  removeAll() {\r\n    this.types.clear();\r\n    this.types = new Map();\r\n  }\r\n  createInstance(type) {\r\n    const def = this.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    return def;\r\n  }\r\n}\r\n","export function createHooks(names) {\r\n  const map = Object.fromEntries(names.map((n) => [n, new Set()]));\r\n  return {\r\n    on(name, fn) {\r\n      map[name].add(fn);\r\n      return () => map[name].delete(fn);\r\n    },\r\n    async emit(name, ...args) {\r\n      for (const fn of map[name]) await fn(...args);\r\n    },\r\n  };\r\n}\r\n","export function randomUUID() {\r\n  // 1) 전역 객체 안전 획득\r\n  const g =\r\n    typeof globalThis !== \"undefined\" ? globalThis :\r\n    typeof self !== \"undefined\" ? self :\r\n    typeof window !== \"undefined\" ? window :\r\n    typeof global !== \"undefined\" ? global : {};\r\n\r\n  const c = g.crypto || g.msCrypto; // IE11 호환\r\n\r\n  // 2) 네이티브 지원 (브라우저/Deno 등)\r\n  if (c && typeof c.randomUUID === \"function\") {\r\n    return c.randomUUID();\r\n  }\r\n\r\n  // 3) Web Crypto만 있는 경우 (getRandomValues로 직접 생성)\r\n  if (c && typeof c.getRandomValues === \"function\") {\r\n    const bytes = new Uint8Array(16);\r\n    c.getRandomValues(bytes);\r\n    // RFC4122 버전/변형 비트 설정\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n    return (\r\n      hex.slice(0, 4).join(\"\") + \"-\" +\r\n      hex.slice(4, 6).join(\"\") + \"-\" +\r\n      hex.slice(6, 8).join(\"\") + \"-\" +\r\n      hex.slice(8, 10).join(\"\") + \"-\" +\r\n      hex.slice(10, 16).join(\"\")\r\n    );\r\n  }\r\n\r\n  // 4) Node.js 전용 대체 (require가 있을 때)\r\n  try {\r\n    // 번들러/ESM 충돌 피하려고 런타임에만 require 접근\r\n    // eslint-disable-next-line no-new-func\r\n    const req = Function('return typeof require === \"function\" ? require : null')();\r\n    if (req) {\r\n      const nodeCrypto = req(\"crypto\");\r\n      if (typeof nodeCrypto.randomUUID === \"function\") {\r\n        return nodeCrypto.randomUUID();\r\n      }\r\n      const bytes = nodeCrypto.randomBytes(16);\r\n      bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n      bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n      const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n      return (\r\n        hex.slice(0, 4).join(\"\") + \"-\" +\r\n        hex.slice(4, 6).join(\"\") + \"-\" +\r\n        hex.slice(6, 8).join(\"\") + \"-\" +\r\n        hex.slice(8, 10).join(\"\") + \"-\" +\r\n        hex.slice(10, 16).join(\"\")\r\n      );\r\n    }\r\n  } catch {\r\n    // ignore\r\n  }\r\n\r\n  // 5) 최후의 비보안 대체 (CSPRNG 아님!)\r\n  const bytes = new Uint8Array(16);\r\n  for (let i = 0; i < 16; i++) bytes[i] = Math.floor(Math.random() * 256);\r\n  bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n  bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n  const hex = Array.from(bytes, (b) => b.toString(16).padStart(2, \"0\"));\r\n  return (\r\n    hex.slice(0, 4).join(\"\") + \"-\" +\r\n    hex.slice(4, 6).join(\"\") + \"-\" +\r\n    hex.slice(6, 8).join(\"\") + \"-\" +\r\n    hex.slice(8, 10).join(\"\") + \"-\" +\r\n    hex.slice(10, 16).join(\"\")\r\n  );\r\n}","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Node.js\r\nexport class Node {\r\n  constructor({ id, type, title, x = 0, y = 0, width = 160, height = 60 }) {\r\n    this.id = id ?? randomUUID();\r\n    this.type = type;\r\n    this.title = title ?? type;\r\n    this.pos = { x, y };\r\n    this.size = { width, height };\r\n    this.inputs = []; // {id,name,datatype}\r\n    this.outputs = []; // {id,name,datatype}\r\n    this.state = {}; // 사용자 상태\r\n  }\r\n  addInput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"in\" };\r\n    this.inputs.push(port);\r\n    return port;\r\n  }\r\n  addOutput(name, datatype = \"any\") {\r\n    const port = { id: randomUUID(), name, datatype, dir: \"out\" };\r\n    this.outputs.push(port);\r\n    return port;\r\n  }\r\n}\r\n","import { randomUUID } from \"../utils/utils.js\";\r\n\r\n// src/core/Edge.js\r\nexport class Edge {\r\n  constructor({ id, fromNode, fromPort, toNode, toPort }) {\r\n    this.id = id ?? randomUUID();\r\n    this.fromNode = fromNode;\r\n    this.fromPort = fromPort;\r\n    this.toNode = toNode;\r\n    this.toPort = toPort;\r\n  }\r\n}\r\n","import { Node } from \"./Node.js\";\r\nimport { Edge } from \"./Edge.js\";\r\n\r\nexport class Graph {\r\n  constructor({ hooks, registry }) {\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n    this.hooks = hooks;\r\n    this.registry = registry;\r\n    // double buffer for deterministic cycles\r\n    this._valuesA = new Map(); // current\r\n    this._valuesB = new Map(); // next\r\n    this._useAasCurrent = true;\r\n  }\r\n  getNodeById(id) {\r\n    for (let [_id, node] of this.nodes.entries()) {\r\n      if (id === _id) {\r\n        return node;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  addNode(type, opts = {}) {\r\n    const def = this.registry.types.get(type);\r\n    if (!def) throw new Error(`Unknown node type: ${type}`);\r\n    const node = new Node({\r\n      type,\r\n      title: def.title,\r\n      width: def.size?.w,\r\n      height: def.size?.h,\r\n      ...opts,\r\n    });\r\n    for (const i of def.inputs || []) node.addInput(i.name, i.datatype);\r\n    for (const o of def.outputs || []) node.addOutput(o.name, o.datatype);\r\n    def.onCreate?.(node);\r\n    this.nodes.set(node.id, node);\r\n    this.hooks?.emit(\"node:create\", node);\r\n    return node;\r\n  }\r\n  removeNode(nodeId) {\r\n    for (const [eid, e] of this.edges)\r\n      if (e.fromNode === nodeId || e.toNode === nodeId) this.edges.delete(eid);\r\n    this.nodes.delete(nodeId);\r\n  }\r\n  addEdge(fromNode, fromPort, toNode, toPort) {\r\n    const e = new Edge({ fromNode, fromPort, toNode, toPort });\r\n    this.edges.set(e.id, e);\r\n    this.hooks?.emit(\"edge:create\", e);\r\n    return e;\r\n  }\r\n\r\n  clear() {\r\n    this.nodes?.clear();\r\n    this.edges?.clear();\r\n    this.nodes = new Map();\r\n    this.edges = new Map();\r\n  }\r\n\r\n  // buffer helpers\r\n  _curBuf() {\r\n    return this._useAasCurrent ? this._valuesA : this._valuesB;\r\n  }\r\n  _nextBuf() {\r\n    return this._useAasCurrent ? this._valuesB : this._valuesA;\r\n  }\r\n  swapBuffers() {\r\n    // when moving to next cycle, promote next->current and clear next\r\n    this._useAasCurrent = !this._useAasCurrent;\r\n    this._nextBuf().clear();\r\n  }\r\n  // data helpers\r\n  setOutput(nodeId, portId, value) {\r\n    this._nextBuf().set(`${nodeId}:${portId}`, value);\r\n  }\r\n  getInput(nodeId, portId) {\r\n    // find upstream edge feeding this input\r\n    for (const e of this.edges.values()) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return this._curBuf().get(`${e.fromNode}:${e.fromPort}`);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  toJSON() {\r\n    const json = {\r\n      nodes: [...this.nodes.values()].map((n) => ({\r\n        id: n.id,\r\n        type: n.type,\r\n        title: n.title,\r\n        x: n.pos.x,\r\n        y: n.pos.y,\r\n        w: n.size.width,\r\n        h: n.size.height,\r\n        inputs: n.inputs,\r\n        outputs: n.outputs,\r\n        state: n.state,\r\n      })),\r\n      edges: [...this.edges.values()],\r\n    };\r\n    this.hooks?.emit(\"graph:serialize\", json);\r\n    return json;\r\n  }\r\n  static fromJSON(json, { hooks, registry }) {\r\n    const g = new Graph({ hooks, registry });\r\n    for (const nd of json.nodes) {\r\n      const node = new Node({\r\n        id: nd.id,\r\n        type: nd.type,\r\n        title: nd.title,\r\n        x: nd.x,\r\n        y: nd.y,\r\n        width: nd.w,\r\n        height: nd.h,\r\n      });\r\n      node.inputs = nd.inputs;\r\n      node.outputs = nd.outputs;\r\n      node.state = nd.state || {};\r\n      g.nodes.set(node.id, node);\r\n    }\r\n    for (const ed of json.edges) g.edges.set(ed.id, new Edge(ed));\r\n    return g;\r\n  }\r\n}\r\n","// src/render/hitTest.js\r\nexport function hitTestNode(node, x, y) {\r\n  const { x: nx, y: ny } = node.pos;\r\n  const { width, height } = node.size;\r\n  return x >= nx && x <= nx + width && y >= ny && y <= ny + height;\r\n}\r\nexport function portRect(node, port, idx, dir) {\r\n  const pad = 8,\r\n    row = 20;\r\n  const y = node.pos.y + 28 + idx * row;\r\n  if (dir === \"in\") return { x: node.pos.x - pad, y, w: pad, h: 14 };\r\n  if (dir === \"out\")\r\n    return { x: node.pos.x + node.size.width, y, w: pad, h: 14 };\r\n}\r\n","import { hitTestNode, portRect } from \"./hitTest.js\";\r\n\r\nexport class CanvasRenderer {\r\n  static FONT_SIZE = 12;\r\n  constructor(canvas, { theme = {}, registry, edgeStyle = \"orthogonal\" } = {}) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.registry = registry; // to call per-node onDraw\r\n\r\n    // viewport transform\r\n    this.scale = 1;\r\n    this.minScale = 0.25;\r\n    this.maxScale = 3;\r\n    this.offsetX = 0;\r\n    this.offsetY = 0;\r\n\r\n    // 'bezier' | 'line' | 'orthogonal'\r\n    this.edgeStyle = edgeStyle;\r\n\r\n    this.theme = Object.assign(\r\n      {\r\n        bg: \"#141417\",\r\n        grid: \"#25252a\",\r\n        node: \"#1e1e24\",\r\n        title: \"#2a2a31\",\r\n        text: \"#e9e9ef\",\r\n        port: \"#8aa1ff\",\r\n        edge: \"#7f8cff\",\r\n      },\r\n      theme\r\n    );\r\n  }\r\n  setEdgeStyle(style) {\r\n    this.edgeStyle =\r\n      style === \"line\" || style === \"orthogonal\" ? style : \"bezier\";\r\n  }\r\n  setRegistry(reg) {\r\n    this.registry = reg;\r\n  }\r\n  resize(w, h) {\r\n    this.canvas.width = w;\r\n    this.canvas.height = h;\r\n  }\r\n  setTransform({\r\n    scale = this.scale,\r\n    offsetX = this.offsetX,\r\n    offsetY = this.offsetY,\r\n  } = {}) {\r\n    this.scale = Math.min(this.maxScale, Math.max(this.minScale, scale));\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n  }\r\n  panBy(dx, dy) {\r\n    this.offsetX += dx;\r\n    this.offsetY += dy;\r\n  }\r\n  zoomAt(factor, cx, cy) {\r\n    // factor > 1 zoom in, < 1 zoom out, centered at screen point (cx, cy)\r\n    const prev = this.scale;\r\n    const next = Math.min(\r\n      this.maxScale,\r\n      Math.max(this.minScale, prev * factor)\r\n    );\r\n    if (next === prev) return;\r\n    // keep the world point under cursor fixed: adjust offset\r\n    const wx = (cx - this.offsetX) / prev;\r\n    const wy = (cy - this.offsetY) / prev;\r\n    this.offsetX = cx - wx * next;\r\n    this.offsetY = cy - wy * next;\r\n    this.scale = next;\r\n  }\r\n\r\n  screenToWorld(x, y) {\r\n    return {\r\n      x: (x - this.offsetX) / this.scale,\r\n      y: (y - this.offsetY) / this.scale,\r\n    };\r\n  }\r\n  worldToScreen(x, y) {\r\n    return {\r\n      x: x * this.scale + this.offsetX,\r\n      y: y * this.scale + this.offsetY,\r\n    };\r\n  }\r\n  _applyTransform() {\r\n    const { ctx } = this;\r\n    ctx.setTransform(this.scale, 0, 0, this.scale, this.offsetX, this.offsetY);\r\n  }\r\n  _resetTransform() {\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  // ── Drawing ────────────────────────────────────────────────────────────────\r\n  _drawArrowhead(x1, y1, x2, y2, size = 10) {\r\n    const { ctx } = this;\r\n    const s = size / this.scale; // 줌에 따라 크기 보정\r\n    const ang = Math.atan2(y2 - y1, x2 - x1);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x2, y2);\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang - Math.PI / 6),\r\n      y2 - s * Math.sin(ang - Math.PI / 6)\r\n    );\r\n    ctx.lineTo(\r\n      x2 - s * Math.cos(ang + Math.PI / 6),\r\n      y2 - s * Math.sin(ang + Math.PI / 6)\r\n    );\r\n    ctx.closePath();\r\n    ctx.fill(); // 선 색상과 동일한 fill이 자연스러움\r\n  }\r\n\r\n  _drawScreenText(\r\n    text,\r\n    lx,\r\n    ly,\r\n    {\r\n      fontPx = 12,\r\n      color = this.theme.text,\r\n      align = \"left\",\r\n      baseline = \"alphabetic\",\r\n      dpr = 1, // 추후 devicePixelRatio 도입\r\n    } = {}\r\n  ) {\r\n    const { ctx } = this;\r\n    const { x: sx, y: sy } = this.worldToScreen(lx, ly);\r\n\r\n    ctx.save();\r\n    // 화면 좌표계(스케일=1)로 리셋\r\n    this._resetTransform();\r\n\r\n    // 픽셀 스냅(번짐 방지)\r\n    const px = Math.round(sx) + 0.5;\r\n    const py = Math.round(sy) + 0.5;\r\n\r\n    ctx.font = `${fontPx * this.scale}px system-ui`;\r\n    ctx.fillStyle = color;\r\n    ctx.textAlign = align;\r\n    ctx.textBaseline = baseline;\r\n    ctx.fillText(text, px, py);\r\n    ctx.restore();\r\n  }\r\n\r\n  drawGrid() {\r\n    const { ctx, canvas, theme, scale, offsetX, offsetY } = this;\r\n    // clear screen in screen space\r\n\r\n    this._resetTransform();\r\n    ctx.fillStyle = theme.bg;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // draw grid in world space so it pans/zooms\r\n    this._applyTransform();\r\n    ctx.strokeStyle = theme.grid;\r\n    ctx.lineWidth = 1 / scale; // keep 1px apparent\r\n\r\n    const base = 20; // world units\r\n    const step = base;\r\n\r\n    // visible world bounds\r\n    const x0 = -offsetX / scale;\r\n    const y0 = -offsetY / scale;\r\n    const x1 = (canvas.width - offsetX) / scale;\r\n    const y1 = (canvas.height - offsetY) / scale;\r\n\r\n    const startX = Math.floor(x0 / step) * step;\r\n    const startY = Math.floor(y0 / step) * step;\r\n\r\n    ctx.beginPath();\r\n    for (let x = startX; x <= x1; x += step) {\r\n      ctx.moveTo(x, y0);\r\n      ctx.lineTo(x, y1);\r\n    }\r\n    for (let y = startY; y <= y1; y += step) {\r\n      ctx.moveTo(x0, y);\r\n      ctx.lineTo(x1, y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  draw(\r\n    graph,\r\n    {\r\n      selection = new Set(),\r\n      tempEdge = null,\r\n      running = false,\r\n      time = performance.now(),\r\n      dt = 0,\r\n    } = {}\r\n  ) {\r\n    this.drawGrid();\r\n    const { ctx, theme } = this;\r\n    this._applyTransform();\r\n\r\n    ctx.save();\r\n    if (running) {\r\n      const speed = 120; // px/s\r\n      const phase =\r\n        (((time / 1000) * speed) / this.scale) % CanvasRenderer.FONT_SIZE;\r\n      ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n      ctx.lineDashOffset = -phase;\r\n    } else {\r\n      ctx.setLineDash([]);\r\n      ctx.lineDashOffset = 0;\r\n    }\r\n\r\n    // edges\r\n    ctx.strokeStyle = theme.edge;\r\n    ctx.lineWidth = 2 * this.scale;\r\n    for (const e of graph.edges.values()) this._drawEdge(graph, e);\r\n\r\n    // temp edge (given in screen coords); convert to world if needed\r\n    // draw(graph, { selection, tempEdge }) 내부의 tempEdge 처리 구간만 교체\r\n    if (tempEdge) {\r\n      const a = this.screenToWorld(tempEdge.x1, tempEdge.y1);\r\n      const b = this.screenToWorld(tempEdge.x2, tempEdge.y2);\r\n\r\n      // 점선 프리뷰\r\n      const prevDash = this.ctx.getLineDash();\r\n      this.ctx.setLineDash([6 / this.scale, 6 / this.scale]);\r\n\r\n      let ptsForArrow = null;\r\n      if (this.edgeStyle === \"line\") {\r\n        this._drawLine(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      } else if (this.edgeStyle === \"orthogonal\") {\r\n        ptsForArrow = this._drawOrthogonal(a.x, a.y, b.x, b.y);\r\n      } else {\r\n        this._drawCurve(a.x, a.y, b.x, b.y);\r\n        ptsForArrow = [\r\n          { x: a.x, y: a.y },\r\n          { x: b.x, y: b.y },\r\n        ];\r\n      }\r\n\r\n      this.ctx.setLineDash(prevDash);\r\n\r\n      // 화살표 표시: 마지막 세그먼트 방향 사용\r\n      if (ptsForArrow && ptsForArrow.length >= 2) {\r\n        const p1 = ptsForArrow[ptsForArrow.length - 2];\r\n        const p2 = ptsForArrow[ptsForArrow.length - 1];\r\n        this.ctx.fillStyle = this.theme.edge;\r\n        this.ctx.strokeStyle = this.theme.edge;\r\n        this._drawArrowhead(p1.x, p1.y, p2.x, p2.y, 12);\r\n      }\r\n    }\r\n    ctx.restore();\r\n\r\n    // nodes\r\n    for (const n of graph.nodes.values()) {\r\n      const sel = selection.has(n.id);\r\n      this._drawNode(n, sel);\r\n      const def = this.registry?.types?.get(n.type);\r\n      if (def?.onDraw) def.onDraw(n, { ctx, theme });\r\n    }\r\n\r\n    this._resetTransform();\r\n  }\r\n\r\n  _drawNode(node, selected) {\r\n    const { ctx, theme } = this;\r\n    const r = 8;\r\n    const { x, y } = node.pos;\r\n    const { width: w, height: h } = node.size;\r\n    ctx.fillStyle = theme.node;\r\n    ctx.strokeStyle = selected ? \"#6cf\" : \"#333\";\r\n    ctx.lineWidth = (selected ? 2 : 1.2) / this.scale;\r\n    roundRect(ctx, x, y, w, h, r);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.fillStyle = theme.title;\r\n    roundRect(ctx, x, y, w, 24, { tl: r, tr: r, br: 0, bl: 0 });\r\n    ctx.fill();\r\n\r\n    this._drawScreenText(node.title, x + 8, y + CanvasRenderer.FONT_SIZE, {\r\n      fontPx: CanvasRenderer.FONT_SIZE,\r\n      color: theme.text,\r\n      baseline: \"middle\",\r\n      align: \"left\",\r\n    });\r\n    ctx.fillStyle = theme.port;\r\n    node.inputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"in\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n    node.outputs.forEach((p, i) => {\r\n      const rct = portRect(node, p, i, \"out\");\r\n      ctx.fillRect(rct.x, rct.y, rct.w, rct.h);\r\n    });\r\n  }\r\n\r\n  _drawEdge(graph, e) {\r\n    const from = graph.nodes.get(e.fromNode);\r\n    const to = graph.nodes.get(e.toNode);\r\n    if (!from || !to) return;\r\n    const iOut = from.outputs.findIndex((p) => p.id === e.fromPort);\r\n    const iIn = to.inputs.findIndex((p) => p.id === e.toPort);\r\n    const pr1 = portRect(from, null, iOut, \"out\");\r\n    const pr2 = portRect(to, null, iIn, \"in\");\r\n    const x1 = pr1.x,\r\n      y1 = pr1.y + 7,\r\n      x2 = pr2.x,\r\n      y2 = pr2.y + 7;\r\n    if (this.edgeStyle === \"line\") {\r\n      this._drawLine(x1, y1, x2, y2);\r\n    } else if (this.edgeStyle === \"orthogonal\") {\r\n      this._drawOrthogonal(x1, y1, x2, y2);\r\n    } else {\r\n      this._drawCurve(x1, y1, x2, y2); // bezier (기존)\r\n    }\r\n  }\r\n\r\n  _drawLine(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.lineTo(x2, y2);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawPolyline(points) {\r\n    const { ctx } = this;\r\n    ctx.beginPath();\r\n    ctx.moveTo(points[0].x, points[0].y);\r\n    for (let i = 1; i < points.length; i++)\r\n      ctx.lineTo(points[i].x, points[i].y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  _drawOrthogonal(x1, y1, x2, y2) {\r\n    const dx = Math.abs(x2 - x1);\r\n    const dy = Math.abs(y2 - y1);\r\n    // 중간 축을 결정 (더 짧은 축을 가운데에 두면 보기 좋음)\r\n    const useHVH = true; // 가로-세로-가로(HVH) vs 세로-가로-세로(VHV)\r\n    const midX = (x1 + x2) / 2;\r\n    const midY = (y1 + y2) / 2;\r\n\r\n    let pts;\r\n    if (useHVH) {\r\n      // x1,y1 → midX,y1 → midX,y2 → x2,y2\r\n      pts = [\r\n        { x: x1, y: y1 },\r\n        { x: midX, y: y1 },\r\n        { x: midX, y: y2 },\r\n        { x: x2, y: y2 },\r\n      ];\r\n    }\r\n    // else {\r\n    //   // x1,y1 → x1,midY → x2,midY → x2,y2\r\n    //   pts = [\r\n    //     { x: x1, y: y1 },\r\n    //     { x: x1, y: midY },\r\n    //     { x: x2, y: midY },\r\n    //     { x: x2, y: y2 },\r\n    //   ];\r\n    // }\r\n\r\n    // 라운드 코너\r\n    const { ctx } = this;\r\n    const prevJoin = ctx.lineJoin,\r\n      prevCap = ctx.lineCap;\r\n    ctx.lineJoin = \"round\";\r\n    ctx.lineCap = \"round\";\r\n    this._drawPolyline(pts);\r\n    ctx.lineJoin = prevJoin;\r\n    ctx.lineCap = prevCap;\r\n\r\n    return pts; // 화살표 각도 계산에 사용\r\n  }\r\n  _drawCurve(x1, y1, x2, y2) {\r\n    const { ctx } = this;\r\n    const dx = Math.max(40, Math.abs(x2 - x1) * 0.4);\r\n    ctx.beginPath();\r\n    ctx.moveTo(x1, y1);\r\n    ctx.bezierCurveTo(x1 + dx, y1, x2 - dx, y2, x2, y2);\r\n    ctx.stroke();\r\n  }\r\n}\r\nfunction roundRect(ctx, x, y, w, h, r = 6) {\r\n  if (typeof r === \"number\") r = { tl: r, tr: r, br: r, bl: r };\r\n  ctx.beginPath();\r\n  ctx.moveTo(x + r.tl, y);\r\n  ctx.lineTo(x + w - r.tr, y);\r\n  ctx.quadraticCurveTo(x + w, y, x + w, y + r.tr);\r\n  ctx.lineTo(x + w, y + h - r.br);\r\n  ctx.quadraticCurveTo(x + w, y + h, x + w - r.br, y + h);\r\n  ctx.lineTo(x + r.bl, y + h);\r\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r.bl);\r\n  ctx.lineTo(x, y + r.tl);\r\n  ctx.quadraticCurveTo(x, y, x + r.tl, y);\r\n  ctx.closePath();\r\n}\r\n","// Find an edge id by its endpoints (fallback for undo)\r\nfunction findEdgeId(graph, a, b, c, d) {\r\n  for (const [id, e] of graph.edges) {\r\n    if (\r\n      e.fromNode === a &&\r\n      e.fromPort === b &&\r\n      e.toNode === c &&\r\n      e.toPort === d\r\n    )\r\n      return id;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function MoveNodeCmd(node, fromPos, toPos) {\r\n  return {\r\n    do() {\r\n      node.pos = { ...toPos };\r\n    },\r\n    undo() {\r\n      node.pos = { ...fromPos };\r\n    },\r\n  };\r\n}\r\n\r\nexport function AddEdgeCmd(graph, fromNode, fromPort, toNode, toPort) {\r\n  let addedId = null;\r\n  return {\r\n    do() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n      addedId = findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n    },\r\n    undo() {\r\n      const id =\r\n        addedId ?? findEdgeId(graph, fromNode, fromPort, toNode, toPort);\r\n      if (id != null) graph.edges.delete(id);\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveEdgeCmd(graph, edgeId) {\r\n  const e = graph.edges.get(edgeId);\r\n  if (!e) return null;\r\n  // capture for undo\r\n  const { fromNode, fromPort, toNode, toPort } = e;\r\n  return {\r\n    do() {\r\n      graph.edges.delete(edgeId);\r\n    },\r\n    undo() {\r\n      graph.addEdge(fromNode, fromPort, toNode, toPort);\r\n    },\r\n  };\r\n}\r\n\r\n// Optional: group multiple commands as one (used for \"rewire\")\r\nexport function CompoundCmd(cmds) {\r\n  return {\r\n    do() {\r\n      cmds.forEach((c) => c?.do());\r\n    },\r\n    undo() {\r\n      [...cmds].reverse().forEach((c) => c?.undo());\r\n    },\r\n  };\r\n}\r\n\r\nexport function RemoveNodeCmd(graph, node) {\r\n  let removedNode = null;\r\n  let removedEdges = [];\r\n\r\n  return {\r\n    do() {\r\n      // Store the node and its connected edges for undo\r\n      removedNode = node;\r\n      removedEdges = graph.edges\r\n        ? [...graph.edges.values()].filter((e) => {\r\n            console.log(e);\r\n            return e.fromNode === node.id || e.toNode === node.id;\r\n          })\r\n        : [];\r\n\r\n      // Remove edges first\r\n      for (const edge of removedEdges) {\r\n        graph.edges.delete(edge.id);\r\n      }\r\n      // Remove the node\r\n      graph.nodes.delete(node.id);\r\n    },\r\n\r\n    undo() {\r\n      // Restore node\r\n      if (removedNode) {\r\n        graph.nodes.set(removedNode.id, removedNode);\r\n      }\r\n      // Restore edges\r\n      for (const edge of removedEdges) {\r\n        graph.edges.set(edge.id, edge);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport function ResizeNodeCmd(node, fromSize, toSize) {\r\n  return {\r\n    do() {\r\n      node.size.width = toSize.w;\r\n      node.size.height = toSize.h;\r\n    },\r\n    undo() {\r\n      node.size.width = fromSize.w;\r\n      node.size.height = fromSize.h;\r\n    },\r\n  };\r\n}\r\n","// src/core/CommandStack.js\r\nexport class CommandStack {\r\n  constructor() {\r\n    this.undoStack = [];\r\n    this.redoStack = [];\r\n  }\r\n  exec(cmd) {\r\n    cmd.do();\r\n    this.undoStack.push(cmd);\r\n    this.redoStack.length = 0;\r\n  }\r\n  undo() {\r\n    const c = this.undoStack.pop();\r\n    if (c) {\r\n      c.undo();\r\n      this.redoStack.push(c);\r\n    }\r\n  }\r\n  redo() {\r\n    const c = this.redoStack.pop();\r\n    if (c) {\r\n      c.do();\r\n      this.undoStack.push(c);\r\n    }\r\n  }\r\n}\r\n","import { hitTestNode, portRect } from \"../render/hitTest.js\";\r\nimport {\r\n  MoveNodeCmd,\r\n  AddEdgeCmd,\r\n  RemoveEdgeCmd,\r\n  CompoundCmd,\r\n  RemoveNodeCmd,\r\n  ResizeNodeCmd,\r\n} from \"../core/commands.js\";\r\nimport { CommandStack } from \"../core/CommandStack.js\";\r\n\r\nexport class Controller {\r\n\r\n  static MIN_NODE_WIDTH = 80;\r\n  static MIN_NODE_HEIGHT = 60;\r\n\r\n  constructor({ graph, renderer, hooks }) {\r\n    this.graph = graph;\r\n    this.renderer = renderer;\r\n    this.hooks = hooks;\r\n\r\n    this.stack = new CommandStack();\r\n    this.selection = new Set();\r\n    this.dragging = null; // { nodeId, dx, dy }\r\n    this.connecting = null; // { fromNode, fromPort, x(screen), y(screen) }\r\n    this.panning = null; // { x(screen), y(screen) }\r\n    this.resizing = null;\r\n\r\n    this._cursor = \"default\";\r\n\r\n    this._onKeyPressEvt = this._onKeyPress.bind(this);\r\n    this._onDownEvt = this._onDown.bind(this);\r\n    this._onWheelEvt = this._onWheel.bind(this);\r\n    this._onMoveEvt = this._onMove.bind(this);\r\n    this._onUpEvt = this._onUp.bind(this);\r\n\r\n    this._bindEvents();\r\n  }\r\n\r\n  destructor() {\r\n    const c = this.renderer.canvas;\r\n    c.removeEventListener(\"mousedown\", this._onDownEvt);\r\n    c.removeEventListener(\"wheel\", this._onWheelEvt, { passive: false });\r\n    window.removeEventListener(\"mousemove\", this._onMoveEvt);\r\n    window.removeEventListener(\"mouseup\", this._onUpEvt);\r\n    window.removeEventListener(\"keydown\", this._onKeyPressEvt);\r\n  }\r\n\r\n  _bindEvents() {\r\n    const c = this.renderer.canvas;\r\n    c.addEventListener(\"mousedown\", this._onDownEvt);\r\n    c.addEventListener(\"wheel\", this._onWheelEvt, { passive: false });\r\n    window.addEventListener(\"mousemove\", this._onMoveEvt);\r\n    window.addEventListener(\"mouseup\", this._onUpEvt);\r\n    window.addEventListener(\"keydown\", this._onKeyPressEvt);\r\n  }\r\n\r\n  _onKeyPress(e) {\r\n    // Undo: Ctrl/Cmd + Z  (Shift+Z → Redo)\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"z\") {\r\n      e.preventDefault();\r\n      if (e.shiftKey) this.stack.redo();\r\n      else this.stack.undo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // Redo: Ctrl/Cmd + Y\r\n    if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"y\") {\r\n      e.preventDefault();\r\n      this.stack.redo();\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // remove the selected nodes\r\n    if (e.key === \"Delete\") {\r\n      [...this.selection].forEach((node) => {\r\n        const nodeObj = this.graph.getNodeById(node);\r\n        this.stack.exec(RemoveNodeCmd(this.graph, nodeObj));\r\n        this.graph.removeNode(node);\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  _setCursor(c) {\r\n    if (this._cursor !== c) {\r\n      this._cursor = c;\r\n      this.renderer.canvas.style.cursor = c;\r\n    }\r\n  }\r\n\r\n  _posScreen(e) {\r\n    const r = this.renderer.canvas.getBoundingClientRect();\r\n    return { x: e.clientX - r.left, y: e.clientY - r.top };\r\n  }\r\n\r\n  _posWorld(e) {\r\n    const s = this._posScreen(e);\r\n    return this.renderer.screenToWorld(s.x, s.y);\r\n  }\r\n\r\n  _findNodeAtWorld(x, y) {\r\n    const list = [...this.graph.nodes.values()];\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n      const n = list[i];\r\n      if (hitTestNode(n, x, y)) return n;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _findPortAtWorld(x, y) {\r\n    for (const n of this.graph.nodes.values()) {\r\n      for (let i = 0; i < n.inputs.length; i++) {\r\n        const r = portRect(n, n.inputs[i], i, \"in\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.inputs[i], dir: \"in\", idx: i };\r\n      }\r\n      for (let i = 0; i < n.outputs.length; i++) {\r\n        const r = portRect(n, n.outputs[i], i, \"out\");\r\n        if (rectHas(r, x, y))\r\n          return { node: n, port: n.outputs[i], dir: \"out\", idx: i };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { x, y } = this._posScreen(e);\r\n    const factor = Math.pow(1.0015, -e.deltaY); // smooth zoom\r\n    this.renderer.zoomAt(factor, x, y);\r\n    this.render();\r\n  }\r\n\r\n  _findIncomingEdge(nodeId, portId) {\r\n    for (const [eid, e] of this.graph.edges) {\r\n      if (e.toNode === nodeId && e.toPort === portId) {\r\n        return { id: eid, edge: e };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _resizeHandleRect(node) {\r\n    const s = 10; // handle size (world units)\r\n    return {\r\n      x: node.pos.x + node.size.width - s,\r\n      y: node.pos.y + node.size.height - s,\r\n      w: s,\r\n      h: s,\r\n    };\r\n  }\r\n\r\n  _hitResizeHandle(node, wx, wy) {\r\n    const r = this._resizeHandleRect(node);\r\n    return wx >= r.x && wx <= r.x + r.w && wy >= r.y && wy <= r.y + r.h;\r\n  }\r\n\r\n  _onDown(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    // 0) MMB(휠 버튼) 드래그는 항상 패닝\r\n    if (e.button === 1) {\r\n      this.panning = { x: s.x, y: s.y };\r\n      return;\r\n    }\r\n\r\n    // 1) 포트(OUT) 위 좌클릭이면 연결 시작\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (e.button === 0 && port && port.dir === \"out\") {\r\n      const outR = portRect(port.node, port.port, port.idx, \"out\");\r\n      const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n      this.connecting = {\r\n        fromNode: port.node.id,\r\n        fromPort: port.port.id,\r\n        x: screenFrom.x,\r\n        y: screenFrom.y,\r\n      };\r\n      return;\r\n    }\r\n\r\n    if (e.button === 0 && port && port.dir === \"in\") {\r\n      const incoming = this._findIncomingEdge(port.node.id, port.port.id);\r\n      if (incoming) {\r\n        const { edge, id } = incoming;\r\n\r\n        // remove as command (즉시 실행 → 미리보기에서도 사라짐)\r\n        const rm = RemoveEdgeCmd(this.graph, id);\r\n        if (rm) this.stack.exec(rm);\r\n\r\n        const outNode = this.graph.nodes.get(edge.fromNode);\r\n        const iOut = outNode.outputs.findIndex((p) => p.id === edge.fromPort);\r\n        const outR = portRect(outNode, outNode.outputs[iOut], iOut, \"out\");\r\n        const screenFrom = this.renderer.worldToScreen(outR.x, outR.y + 7);\r\n\r\n        this.connecting = {\r\n          fromNode: edge.fromNode,\r\n          fromPort: edge.fromPort,\r\n          x: screenFrom.x,\r\n          y: screenFrom.y,\r\n          _removedEdge: { id, edge }, // 참고용 메모 (이미 제거됨)\r\n        };\r\n        this.render();\r\n        return;\r\n      }\r\n      // 들어오는 엣지가 없으면 그냥 무시\r\n    }\r\n\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    // 먼저 리사이즈 핸들 클릭인지 확인\r\n    if (e.button === 0 && node && this._hitResizeHandle(node, w.x, w.y)) {\r\n      this.resizing = {\r\n        nodeId: node.id,\r\n        startW: node.size.width,\r\n        startH: node.size.height,\r\n        startX: w.x,\r\n        startY: w.y,\r\n      };\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 2) 노드 위 좌클릭이면 선택 전환 + 드래그 시작\r\n    if (e.button === 0 && node) {\r\n      if (!e.shiftKey) this.selection.clear();\r\n      this.selection.add(node.id);\r\n      this.dragging = {\r\n        nodeId: node.id,\r\n        dx: w.x - node.pos.x,\r\n        dy: w.y - node.pos.y,\r\n        startPos: { x: node.pos.x, y: node.pos.y }, // 원위치 저장\r\n      };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 3) 빈 공간 좌클릭이면: 선택 해제 + 패닝 시작\r\n    if (e.button === 0) {\r\n      if (this.selection.size) this.selection.clear();\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 기타는 무시\r\n  }\r\n\r\n  _onMove(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this.renderer.screenToWorld(s.x, s.y);\r\n\r\n    if (this.resizing) {\r\n      const n = this.graph.nodes.get(this.resizing.nodeId);\r\n      const dx = w.x - this.resizing.startX;\r\n      const dy = w.y - this.resizing.startY;\r\n\r\n      const minW = Controller.MIN_NODE_WIDTH;\r\n      const minH = Controller.MIN_NODE_HEIGHT; // 최소 크기 (원하면 조정)\r\n      n.size.width = Math.max(minW, this.resizing.startW + dx);\r\n      n.size.height = Math.max(minH, this.resizing.startH + dy);\r\n\r\n      this.hooks?.emit(\"node:resize\", n);\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.panning) {\r\n      const dx = s.x - this.panning.x;\r\n      const dy = s.y - this.panning.y;\r\n      this.panning = { x: s.x, y: s.y };\r\n      this.renderer.panBy(dx, dy);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      n.pos.x = w.x - this.dragging.dx;\r\n      n.pos.y = w.y - this.dragging.dy;\r\n      this.hooks?.emit(\"node:move\", n);\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    // 연결 드래그 프리뷰: 화면 좌표로 저장\r\n    if (this.connecting) {\r\n      this.connecting.x = s.x;\r\n      this.connecting.y = s.y;\r\n      this.render();\r\n    }\r\n\r\n    const port = this._findPortAtWorld(w.x, w.y);\r\n    if (port && (port.dir === \"out\" || port.dir === \"in\")) {\r\n      this._setCursor(\"grabbing\");\r\n    } else {\r\n      this._setCursor(\"default\");\r\n    }\r\n\r\n    const node = this._findNodeAtWorld(w.x, w.y);\r\n    if (node && this._hitResizeHandle(node, w.x, w.y)) {\r\n      this._setCursor(\"se-resize\");\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  _onUp(e) {\r\n    const s = this._posScreen(e);\r\n    const w = this._posWorld(e);\r\n\r\n    if (this.panning) {\r\n      this.panning = null;\r\n      return;\r\n    }\r\n\r\n    if (this.connecting) {\r\n      const from = this.connecting;\r\n      const portIn = this._findPortAtWorld(w.x, w.y);\r\n      if (portIn && portIn.dir === \"in\") {\r\n        // AddEdge as command\r\n        this.stack.exec(\r\n          AddEdgeCmd(\r\n            this.graph,\r\n            from.fromNode,\r\n            from.fromPort,\r\n            portIn.node.id,\r\n            portIn.port.id\r\n          )\r\n        );\r\n      }\r\n      // else: 빈 곳에 놓으면 이미 RemoveEdgeCmd 실행된 상태 → \"해제\" 완료\r\n\r\n      this.connecting = null;\r\n      this.render();\r\n    }\r\n\r\n    if (this.resizing) {\r\n      const n = this.graph.nodes.get(this.resizing.nodeId);\r\n      const from = { w: this.resizing.startW, h: this.resizing.startH };\r\n      const to = { w: n.size.width, h: n.size.height };\r\n      if (from.w !== to.w || from.h !== to.h) {\r\n        this.stack.exec(ResizeNodeCmd(n, from, to));\r\n      }\r\n      this.resizing = null;\r\n      this._setCursor(\"default\");\r\n      // render()는 위에서 이미 호출하고 있으면 생략 가능\r\n    }\r\n\r\n    if (this.dragging) {\r\n      const n = this.graph.nodes.get(this.dragging.nodeId);\r\n      const start = this.dragging.startPos;\r\n      const end = { x: n.pos.x, y: n.pos.y };\r\n      // 위치가 바뀐 경우만 커밋\r\n      if (start.x !== end.x || start.y !== end.y) {\r\n        this.stack.exec(MoveNodeCmd(n, start, end));\r\n      }\r\n      this.dragging = null;\r\n    }\r\n\r\n    this.dragging = null;\r\n  }\r\n\r\n  render() {\r\n    const tEdge = this.renderTempEdge();\r\n\r\n    this.renderer.draw(this.graph, {\r\n      selection: this.selection,\r\n      tempEdge: tEdge, // 그대로 전달\r\n    });\r\n  }\r\n\r\n  renderTempEdge() {\r\n    if (!this.connecting) return null;\r\n    const a = this._portAnchorScreen(\r\n      this.connecting.fromNode,\r\n      this.connecting.fromPort\r\n    ); // {x,y}\r\n    return {\r\n      x1: a.x,\r\n      y1: a.y,\r\n      x2: this.connecting.x,\r\n      y2: this.connecting.y,\r\n    };\r\n  }\r\n\r\n  _portAnchorScreen(nodeId, portId) {\r\n    const n = this.graph.nodes.get(nodeId);\r\n    const iOut = n.outputs.findIndex((p) => p.id === portId);\r\n    const r = portRect(n, null, iOut, \"out\"); // world rect\r\n    return this.renderer.worldToScreen(r.x, r.y + 7); // -> screen point\r\n  }\r\n}\r\n\r\nfunction rectHas(r, x, y) {\r\n  return x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h;\r\n}\r\n","export class Runner {\r\n  constructor({ graph, registry, hooks, cyclesPerFrame = 1 }) {\r\n    this.graph = graph;\r\n    this.registry = registry;\r\n    this.hooks = hooks;\r\n    this.running = false;\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.cyclesPerFrame = Math.max(1, cyclesPerFrame | 0);\r\n  }\r\n\r\n  // 외부에서 실행 중인지 확인\r\n  isRunning() {\r\n    return this.running;\r\n  }\r\n\r\n  // 실행 도중에도 CPS 변경 가능\r\n  setCyclesPerFrame(n) {\r\n    this.cyclesPerFrame = Math.max(1, n | 0);\r\n  }\r\n\r\n  step(cycles = 1, dt = 0) {\r\n    const nCycles = Math.max(1, cycles | 0);\r\n    for (let c = 0; c < nCycles; c++) {\r\n      for (const node of this.graph.nodes.values()) {\r\n        const def = this.registry.types.get(node.type);\r\n        if (def?.onExecute) {\r\n          try {\r\n            def.onExecute(node, {\r\n              dt,\r\n              graph: this.graph,\r\n              getInput: (portName) => {\r\n                const p =\r\n                  node.inputs.find((i) => i.name === portName) ||\r\n                  node.inputs[0];\r\n                return p ? this.graph.getInput(node.id, p.id) : undefined;\r\n              },\r\n              setOutput: (portName, value) => {\r\n                const p =\r\n                  node.outputs.find((o) => o.name === portName) ||\r\n                  node.outputs[0];\r\n                if (p) this.graph.setOutput(node.id, p.id, value);\r\n              },\r\n            });\r\n          } catch (err) {\r\n            this.hooks?.emit?.(\"error\", err);\r\n          }\r\n        }\r\n      }\r\n      // commit writes for this cycle\r\n      this.graph.swapBuffers();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (this.running) return;\r\n    this.running = true;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:start\");\r\n\r\n    const loop = (t) => {\r\n      if (!this.running) return;\r\n      const dtMs = this._last ? t - this._last : 0;\r\n      this._last = t;\r\n      const dt = dtMs / 1000; // seconds\r\n\r\n      // 1) 스텝 실행\r\n      this.step(this.cyclesPerFrame, dt);\r\n\r\n      // 2) 프레임 훅 (렌더러/컨트롤러는 여기서 running, time, dt를 받아 표현 업데이트)\r\n      this.hooks?.emit?.(\"runner:tick\", {\r\n        time: t,\r\n        dt,\r\n        running: true,\r\n        cps: this.cyclesPerFrame,\r\n      });\r\n\r\n      this._raf = requestAnimationFrame(loop);\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(loop);\r\n  }\r\n\r\n  stop() {\r\n    if (!this.running) return;\r\n    this.running = false;\r\n    if (this._raf) cancelAnimationFrame(this._raf);\r\n    this._raf = null;\r\n    this._last = 0;\r\n    this.hooks?.emit?.(\"runner:stop\");\r\n  }\r\n}\r\n","import { Registry } from \"./core/Registry.js\";\r\nimport { createHooks } from \"./core/Hooks.js\";\r\nimport { Graph } from \"./core/Graph.js\";\r\nimport { CanvasRenderer } from \"./render/CanvasRenderer.js\";\r\nimport { Controller } from \"./interact/Controller.js\";\r\nimport { Runner } from \"./core/Runner.js\";\r\n\r\nexport function createGraphEditor(\r\n  canvas,\r\n  { theme, hooks: customHooks, autorun = true } = {}\r\n) {\r\n  const hooks =\r\n    customHooks ??\r\n    createHooks([\r\n      // essential hooks\r\n      \"node:create\",\r\n      \"node:move\",\r\n      \"edge:create\",\r\n      \"edge:delete\",\r\n      \"graph:serialize\",\r\n      \"error\",\r\n      \"runner:tick\",\r\n      \"runner:start\",\r\n      \"runner:stop\",\r\n      \"node:resize\",\r\n    ]);\r\n  const registry = new Registry();\r\n  const graph = new Graph({ hooks, registry });\r\n  const renderer = new CanvasRenderer(canvas, { theme, registry });\r\n  const controller = new Controller({ graph, renderer, hooks });\r\n  const runner = new Runner({ graph, registry, hooks });\r\n\r\n  hooks.on(\"runner:tick\", ({ time, dt }) => {\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null, // 필요시 helper\r\n      running: true,\r\n      time,\r\n      dt,\r\n    });\r\n  });\r\n  hooks.on(\"runner:start\", () => {\r\n    // 첫 프레임 즉시 렌더\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: true,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n  hooks.on(\"runner:stop\", () => {\r\n    // 정지 프레임\r\n    renderer.draw(graph, {\r\n      selection: controller.selection,\r\n      tempEdge: controller.connecting ? controller.renderTempEdge() : null,\r\n      running: false,\r\n      time: performance.now(),\r\n      dt: 0,\r\n    });\r\n  });\r\n\r\n  // default node\r\n  registry.register(\"core/Note\", {\r\n    title: \"Note\",\r\n    size: { w: 180, h: 80 },\r\n    inputs: [{ name: \"in\", datatype: \"any\" }],\r\n    outputs: [{ name: \"out\", datatype: \"any\" }],\r\n    onCreate(node) {\r\n      node.state.text = \"hello\";\r\n    },\r\n    onExecute(node, { dt, getInput, setOutput }) {\r\n      // Simple passthrough with uppercase and a heartbeat value\r\n      const incoming = getInput(\"in\");\r\n      const out = (incoming ?? node.state.text ?? \"\").toString().toUpperCase();\r\n      setOutput(\r\n        \"out\",\r\n        out + ` · ${Math.floor((performance.now() / 1000) % 100)}`\r\n      );\r\n    },\r\n    onDraw(node, { ctx, theme }) {\r\n      const pr = 8;\r\n      const { x, y } = node.pos;\r\n      const { width: w } = node.size;\r\n      const lx = x + pr; // 월드 x\r\n      const ly = y + 24 + 6; // 타이틀 바(24) 아래 여백 6\r\n      // renderer._drawScreenText(node.state.text ?? \"hello\", lx, ly, {\r\n      //   fontPx: 11,\r\n      //   color: theme.text,\r\n      //   baseline: \"top\",\r\n      //   align: \"left\",\r\n      // });\r\n    },\r\n  });\r\n\r\n  // initial render & resize\r\n\r\n  renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n  controller.render();\r\n\r\n  const ro = new ResizeObserver(() => {\r\n    renderer.resize(canvas.clientWidth, canvas.clientHeight);\r\n    controller.render();\r\n  });\r\n  ro.observe(canvas);\r\n\r\n  const api = {\r\n    graph,\r\n    renderer,\r\n    controller,\r\n    hooks,\r\n    registry,\r\n    runner,\r\n    addNode: (...args) => graph.addNode(...args),\r\n    toJSON: () => graph.toJSON(),\r\n    fromJSON: (data) => Graph.fromJSON(data, { hooks, registry }),\r\n    resize: (w, h) => renderer.resize(w, h),\r\n    render: () => controller.render(),\r\n    start: () => runner.start(),\r\n    stop: () => runner.stop(),\r\n    destroy: () => {\r\n      runner.stop();\r\n      ro.disconnect();\r\n    },\r\n  };\r\n\r\n  if (autorun) runner.start();\r\n  return api;\r\n}\r\n"],"names":["bytes","hex","_a","_b","theme"],"mappings":";;;AACO,MAAM,SAAS;AAAA,EACpB,cAAc;AACZ,SAAK,QAAQ,oBAAI;EACnB;AAAA,EACA,SAAS,MAAM,KAAK;AAElB,QAAI,KAAK,MAAM,IAAI,IAAI,EAAG,OAAM,IAAI,MAAM,qBAAqB,IAAI,EAAE;AACrE,SAAK,MAAM,IAAI,MAAM,GAAG;AAAA,EAC1B;AAAA,EACA,WAAW,MAAM;AACf,QAAI,KAAK,MAAM,IAAI,IAAI,EAAG,OAAM,IAAI,MAAM,qBAAqB,IAAI,EAAE;AACrE,SAAK,MAAM,OAAO,IAAI;AAAA,EACxB;AAAA,EACA,YAAY;AACV,SAAK,MAAM;AACX,SAAK,QAAQ,oBAAI;EACnB;AAAA,EACA,eAAe,MAAM;AACnB,UAAM,MAAM,KAAK,MAAM,IAAI,IAAI;AAC/B,QAAI,CAAC,IAAK,OAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AACtD,WAAO;AAAA,EACT;AACF;ACvBO,SAAS,YAAY,OAAO;AACjC,QAAM,MAAM,OAAO,YAAY,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,oBAAI,IAAG,CAAE,CAAC,CAAC;AAC/D,SAAO;AAAA,IACL,GAAG,MAAM,IAAI;AACX,UAAI,IAAI,EAAE,IAAI,EAAE;AAChB,aAAO,MAAM,IAAI,IAAI,EAAE,OAAO,EAAE;AAAA,IAClC;AAAA,IACA,MAAM,KAAK,SAAS,MAAM;AACxB,iBAAW,MAAM,IAAI,IAAI,EAAG,OAAM,GAAG,GAAG,IAAI;AAAA,IAC9C;AAAA,EACJ;AACA;ACXO,SAAS,aAAa;AAE3B,QAAM,IACJ,OAAO,eAAe,cAAc,aACpC,OAAO,SAAS,cAAc,OAC9B,OAAO,WAAW,cAAc,SAChC,OAAO,WAAW,cAAc,SAAS;AAE3C,QAAM,IAAI,EAAE,UAAU,EAAE;AAGxB,MAAI,KAAK,OAAO,EAAE,eAAe,YAAY;AAC3C,WAAO,EAAE;EACX;AAGA,MAAI,KAAK,OAAO,EAAE,oBAAoB,YAAY;AAChD,UAAMA,SAAQ,IAAI,WAAW,EAAE;AAC/B,MAAE,gBAAgBA,MAAK;AAEvB,IAAAA,OAAM,CAAC,IAAKA,OAAM,CAAC,IAAI,KAAQ;AAC/B,IAAAA,OAAM,CAAC,IAAKA,OAAM,CAAC,IAAI,KAAQ;AAE/B,UAAMC,OAAM,MAAM,KAAKD,QAAO,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AACpE,WACEC,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,MAC5BA,KAAI,MAAM,IAAI,EAAE,EAAE,KAAK,EAAE;AAAA,EAE7B;AAGA,MAAI;AAGF,UAAM,MAAM,SAAS,uDAAuD;AAC5E,QAAI,KAAK;AACP,YAAM,aAAa,IAAI,QAAQ;AAC/B,UAAI,OAAO,WAAW,eAAe,YAAY;AAC/C,eAAO,WAAW;MACpB;AACA,YAAMD,SAAQ,WAAW,YAAY,EAAE;AACvC,MAAAA,OAAM,CAAC,IAAKA,OAAM,CAAC,IAAI,KAAQ;AAC/B,MAAAA,OAAM,CAAC,IAAKA,OAAM,CAAC,IAAI,KAAQ;AAE/B,YAAMC,OAAM,MAAM,KAAKD,QAAO,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AACpE,aACEC,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3BA,KAAI,MAAM,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,MAC5BA,KAAI,MAAM,IAAI,EAAE,EAAE,KAAK,EAAE;AAAA,IAE7B;AAAA,EACF,QAAQ;AAAA,EAER;AAGA,QAAM,QAAQ,IAAI,WAAW,EAAE;AAC/B,WAAS,IAAI,GAAG,IAAI,IAAI,IAAK,OAAM,CAAC,IAAI,KAAK,MAAM,KAAK,OAAM,IAAK,GAAG;AACtE,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAC/B,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,KAAQ;AAE/B,QAAM,MAAM,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AACpE,SACE,IAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3B,IAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3B,IAAI,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,MAC3B,IAAI,MAAM,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,MAC5B,IAAI,MAAM,IAAI,EAAE,EAAE,KAAK,EAAE;AAE7B;ACvEO,MAAM,KAAK;AAAA,EAChB,YAAY,EAAE,IAAI,MAAM,OAAO,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK,SAAS,GAAE,GAAI;AACvE,SAAK,KAAK,MAAM;AAChB,SAAK,OAAO;AACZ,SAAK,QAAQ,SAAS;AACtB,SAAK,MAAM,EAAE,GAAG,EAAC;AACjB,SAAK,OAAO,EAAE,OAAO,OAAM;AAC3B,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,QAAQ;EACf;AAAA,EACA,SAAS,MAAM,WAAW,OAAO;AAC/B,UAAM,OAAO,EAAE,IAAI,WAAU,GAAI,MAAM,UAAU,KAAK;AACtD,SAAK,OAAO,KAAK,IAAI;AACrB,WAAO;AAAA,EACT;AAAA,EACA,UAAU,MAAM,WAAW,OAAO;AAChC,UAAM,OAAO,EAAE,IAAI,WAAU,GAAI,MAAM,UAAU,KAAK;AACtD,SAAK,QAAQ,KAAK,IAAI;AACtB,WAAO;AAAA,EACT;AACF;ACrBO,MAAM,KAAK;AAAA,EAChB,YAAY,EAAE,IAAI,UAAU,UAAU,QAAQ,UAAU;AACtD,SAAK,KAAK,MAAM;AAChB,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAChB;AACF;ACRO,MAAM,MAAM;AAAA,EACjB,YAAY,EAAE,OAAO,YAAY;AAC/B,SAAK,QAAQ,oBAAI;AACjB,SAAK,QAAQ,oBAAI;AACjB,SAAK,QAAQ;AACb,SAAK,WAAW;AAEhB,SAAK,WAAW,oBAAI;AACpB,SAAK,WAAW,oBAAI;AACpB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,YAAY,IAAI;AACd,aAAS,CAAC,KAAK,IAAI,KAAK,KAAK,MAAM,WAAW;AAC5C,UAAI,OAAO,KAAK;AACd,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,MAAM,OAAO,IAAI;ALvB3B;AKwBI,UAAM,MAAM,KAAK,SAAS,MAAM,IAAI,IAAI;AACxC,QAAI,CAAC,IAAK,OAAM,IAAI,MAAM,sBAAsB,IAAI,EAAE;AACtD,UAAM,OAAO,IAAI,KAAK;AAAA,MACpB;AAAA,MACA,OAAO,IAAI;AAAA,MACX,QAAO,SAAI,SAAJ,mBAAU;AAAA,MACjB,SAAQ,SAAI,SAAJ,mBAAU;AAAA,MAClB,GAAG;AAAA,IACT,CAAK;AACD,eAAW,KAAK,IAAI,UAAU,CAAA,EAAI,MAAK,SAAS,EAAE,MAAM,EAAE,QAAQ;AAClE,eAAW,KAAK,IAAI,WAAW,CAAA,EAAI,MAAK,UAAU,EAAE,MAAM,EAAE,QAAQ;AACpE,cAAI,aAAJ,6BAAe;AACf,SAAK,MAAM,IAAI,KAAK,IAAI,IAAI;AAC5B,eAAK,UAAL,mBAAY,KAAK,eAAe;AAChC,WAAO;AAAA,EACT;AAAA,EACA,WAAW,QAAQ;AACjB,eAAW,CAAC,KAAK,CAAC,KAAK,KAAK;AAC1B,UAAI,EAAE,aAAa,UAAU,EAAE,WAAW,OAAQ,MAAK,MAAM,OAAO,GAAG;AACzE,SAAK,MAAM,OAAO,MAAM;AAAA,EAC1B;AAAA,EACA,QAAQ,UAAU,UAAU,QAAQ,QAAQ;AL7C9C;AK8CI,UAAM,IAAI,IAAI,KAAK,EAAE,UAAU,UAAU,QAAQ,OAAM,CAAE;AACzD,SAAK,MAAM,IAAI,EAAE,IAAI,CAAC;AACtB,eAAK,UAAL,mBAAY,KAAK,eAAe;AAChC,WAAO;AAAA,EACT;AAAA,EAEA,QAAQ;ALpDV;AKqDI,eAAK,UAAL,mBAAY;AACZ,eAAK,UAAL,mBAAY;AACZ,SAAK,QAAQ,oBAAI;AACjB,SAAK,QAAQ,oBAAI;EACnB;AAAA;AAAA,EAGA,UAAU;AACR,WAAO,KAAK,iBAAiB,KAAK,WAAW,KAAK;AAAA,EACpD;AAAA,EACA,WAAW;AACT,WAAO,KAAK,iBAAiB,KAAK,WAAW,KAAK;AAAA,EACpD;AAAA,EACA,cAAc;AAEZ,SAAK,iBAAiB,CAAC,KAAK;AAC5B,SAAK,WAAW;EAClB;AAAA;AAAA,EAEA,UAAU,QAAQ,QAAQ,OAAO;AAC/B,SAAK,WAAW,IAAI,GAAG,MAAM,IAAI,MAAM,IAAI,KAAK;AAAA,EAClD;AAAA,EACA,SAAS,QAAQ,QAAQ;AAEvB,eAAW,KAAK,KAAK,MAAM,OAAM,GAAI;AACnC,UAAI,EAAE,WAAW,UAAU,EAAE,WAAW,QAAQ;AAC9C,eAAO,KAAK,UAAU,IAAI,GAAG,EAAE,QAAQ,IAAI,EAAE,QAAQ,EAAE;AAAA,MACzD;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS;ALpFX;AKqFI,UAAM,OAAO;AAAA,MACX,OAAO,CAAC,GAAG,KAAK,MAAM,OAAM,CAAE,EAAE,IAAI,CAAC,OAAO;AAAA,QAC1C,IAAI,EAAE;AAAA,QACN,MAAM,EAAE;AAAA,QACR,OAAO,EAAE;AAAA,QACT,GAAG,EAAE,IAAI;AAAA,QACT,GAAG,EAAE,IAAI;AAAA,QACT,GAAG,EAAE,KAAK;AAAA,QACV,GAAG,EAAE,KAAK;AAAA,QACV,QAAQ,EAAE;AAAA,QACV,SAAS,EAAE;AAAA,QACX,OAAO,EAAE;AAAA,MACjB,EAAQ;AAAA,MACF,OAAO,CAAC,GAAG,KAAK,MAAM,OAAM,CAAE;AAAA,IACpC;AACI,eAAK,UAAL,mBAAY,KAAK,mBAAmB;AACpC,WAAO;AAAA,EACT;AAAA,EACA,OAAO,SAAS,MAAM,EAAE,OAAO,SAAQ,GAAI;AACzC,UAAM,IAAI,IAAI,MAAM,EAAE,OAAO,SAAQ,CAAE;AACvC,eAAW,MAAM,KAAK,OAAO;AAC3B,YAAM,OAAO,IAAI,KAAK;AAAA,QACpB,IAAI,GAAG;AAAA,QACP,MAAM,GAAG;AAAA,QACT,OAAO,GAAG;AAAA,QACV,GAAG,GAAG;AAAA,QACN,GAAG,GAAG;AAAA,QACN,OAAO,GAAG;AAAA,QACV,QAAQ,GAAG;AAAA,MACnB,CAAO;AACD,WAAK,SAAS,GAAG;AACjB,WAAK,UAAU,GAAG;AAClB,WAAK,QAAQ,GAAG,SAAS,CAAA;AACzB,QAAE,MAAM,IAAI,KAAK,IAAI,IAAI;AAAA,IAC3B;AACA,eAAW,MAAM,KAAK,MAAO,GAAE,MAAM,IAAI,GAAG,IAAI,IAAI,KAAK,EAAE,CAAC;AAC5D,WAAO;AAAA,EACT;AACF;AC1HO,SAAS,YAAY,MAAM,GAAG,GAAG;AACtC,QAAM,EAAE,GAAG,IAAI,GAAG,GAAE,IAAK,KAAK;AAC9B,QAAM,EAAE,OAAO,WAAW,KAAK;AAC/B,SAAO,KAAK,MAAM,KAAK,KAAK,SAAS,KAAK,MAAM,KAAK,KAAK;AAC5D;AACO,SAAS,SAAS,MAAM,MAAM,KAAK,KAAK;AAC7C,QAAM,MAAM,GACV,MAAM;AACR,QAAM,IAAI,KAAK,IAAI,IAAI,KAAK,MAAM;AAClC,MAAI,QAAQ,KAAM,QAAO,EAAE,GAAG,KAAK,IAAI,IAAI,KAAK,GAAG,GAAG,KAAK,GAAG,GAAE;AAChE,MAAI,QAAQ;AACV,WAAO,EAAE,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,OAAO,GAAG,GAAG,KAAK,GAAG,GAAE;AAC9D;ACXO,MAAM,kBAAN,MAAM,gBAAe;AAAA,EAE1B,YAAY,QAAQ,EAAE,QAAQ,CAAA,GAAI,UAAU,YAAY,aAAY,IAAK,IAAI;AAC3E,SAAK,SAAS;AACd,SAAK,MAAM,OAAO,WAAW,IAAI;AACjC,SAAK,WAAW;AAGhB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,UAAU;AAGf,SAAK,YAAY;AAEjB,SAAK,QAAQ,OAAO;AAAA,MAClB;AAAA,QACE,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,MACd;AAAA,MACM;AAAA,IACN;AAAA,EACE;AAAA,EACA,aAAa,OAAO;AAClB,SAAK,YACH,UAAU,UAAU,UAAU,eAAe,QAAQ;AAAA,EACzD;AAAA,EACA,YAAY,KAAK;AACf,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,OAAO,GAAG,GAAG;AACX,SAAK,OAAO,QAAQ;AACpB,SAAK,OAAO,SAAS;AAAA,EACvB;AAAA,EACA,aAAa;AAAA,IACX,QAAQ,KAAK;AAAA,IACb,UAAU,KAAK;AAAA,IACf,UAAU,KAAK;AAAA,EACnB,IAAM,IAAI;AACN,SAAK,QAAQ,KAAK,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,UAAU,KAAK,CAAC;AACnE,SAAK,UAAU;AACf,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,MAAM,IAAI,IAAI;AACZ,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,OAAO,QAAQ,IAAI,IAAI;AAErB,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAAA,MAChB,KAAK;AAAA,MACL,KAAK,IAAI,KAAK,UAAU,OAAO,MAAM;AAAA,IAC3C;AACI,QAAI,SAAS,KAAM;AAEnB,UAAM,MAAM,KAAK,KAAK,WAAW;AACjC,UAAM,MAAM,KAAK,KAAK,WAAW;AACjC,SAAK,UAAU,KAAK,KAAK;AACzB,SAAK,UAAU,KAAK,KAAK;AACzB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,cAAc,GAAG,GAAG;AAClB,WAAO;AAAA,MACL,IAAI,IAAI,KAAK,WAAW,KAAK;AAAA,MAC7B,IAAI,IAAI,KAAK,WAAW,KAAK;AAAA,IACnC;AAAA,EACE;AAAA,EACA,cAAc,GAAG,GAAG;AAClB,WAAO;AAAA,MACL,GAAG,IAAI,KAAK,QAAQ,KAAK;AAAA,MACzB,GAAG,IAAI,KAAK,QAAQ,KAAK;AAAA,IAC/B;AAAA,EACE;AAAA,EACA,kBAAkB;AAChB,UAAM,EAAE,IAAG,IAAK;AAChB,QAAI,aAAa,KAAK,OAAO,GAAG,GAAG,KAAK,OAAO,KAAK,SAAS,KAAK,OAAO;AAAA,EAC3E;AAAA,EACA,kBAAkB;AAChB,SAAK,IAAI,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACxC;AAAA;AAAA,EAGA,eAAe,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI;AACxC,UAAM,EAAE,IAAG,IAAK;AAChB,UAAM,IAAI,OAAO,KAAK;AACtB,UAAM,MAAM,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;AAEvC,QAAI,UAAS;AACb,QAAI,OAAO,IAAI,EAAE;AACjB,QAAI;AAAA,MACF,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,MACnC,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,IACzC;AACI,QAAI;AAAA,MACF,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,MACnC,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,IACzC;AACI,QAAI,UAAS;AACb,QAAI,KAAI;AAAA,EACV;AAAA,EAEA,gBACE,MACA,IACA,IACA;AAAA,IACE,SAAS;AAAA,IACT,QAAQ,KAAK,MAAM;AAAA,IACnB,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,MAAM;AAAA;AAAA,EACZ,IAAQ,CAAA,GACJ;AACA,UAAM,EAAE,IAAG,IAAK;AAChB,UAAM,EAAE,GAAG,IAAI,GAAG,OAAO,KAAK,cAAc,IAAI,EAAE;AAElD,QAAI,KAAI;AAER,SAAK,gBAAe;AAGpB,UAAM,KAAK,KAAK,MAAM,EAAE,IAAI;AAC5B,UAAM,KAAK,KAAK,MAAM,EAAE,IAAI;AAE5B,QAAI,OAAO,GAAG,SAAS,KAAK,KAAK;AACjC,QAAI,YAAY;AAChB,QAAI,YAAY;AAChB,QAAI,eAAe;AACnB,QAAI,SAAS,MAAM,IAAI,EAAE;AACzB,QAAI,QAAO;AAAA,EACb;AAAA,EAEA,WAAW;AACT,UAAM,EAAE,KAAK,QAAQ,OAAO,OAAO,SAAS,QAAO,IAAK;AAGxD,SAAK,gBAAe;AACpB,QAAI,YAAY,MAAM;AACtB,QAAI,SAAS,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AAG9C,SAAK,gBAAe;AACpB,QAAI,cAAc,MAAM;AACxB,QAAI,YAAY,IAAI;AAEpB,UAAM,OAAO;AACb,UAAM,OAAO;AAGb,UAAM,KAAK,CAAC,UAAU;AACtB,UAAM,KAAK,CAAC,UAAU;AACtB,UAAM,MAAM,OAAO,QAAQ,WAAW;AACtC,UAAM,MAAM,OAAO,SAAS,WAAW;AAEvC,UAAM,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI;AACvC,UAAM,SAAS,KAAK,MAAM,KAAK,IAAI,IAAI;AAEvC,QAAI,UAAS;AACb,aAAS,IAAI,QAAQ,KAAK,IAAI,KAAK,MAAM;AACvC,UAAI,OAAO,GAAG,EAAE;AAChB,UAAI,OAAO,GAAG,EAAE;AAAA,IAClB;AACA,aAAS,IAAI,QAAQ,KAAK,IAAI,KAAK,MAAM;AACvC,UAAI,OAAO,IAAI,CAAC;AAChB,UAAI,OAAO,IAAI,CAAC;AAAA,IAClB;AACA,QAAI,OAAM;AAEV,SAAK,gBAAe;AAAA,EACtB;AAAA,EAEA,KACE,OACA;AAAA,IACE,YAAY,oBAAI,IAAG;AAAA,IACnB,WAAW;AAAA,IACX,UAAU;AAAA,IACV,OAAO,YAAY,IAAG;AAAA,IACtB,KAAK;AAAA,EACX,IAAQ,CAAA,GACJ;AP/LJ;AOgMI,SAAK,SAAQ;AACb,UAAM,EAAE,KAAK,MAAK,IAAK;AACvB,SAAK,gBAAe;AAEpB,QAAI,KAAI;AACR,QAAI,SAAS;AACX,YAAM,QAAQ;AACd,YAAM,QACD,OAAO,MAAQ,QAAS,KAAK,QAAS,gBAAe;AAC1D,UAAI,YAAY,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,CAAC;AAChD,UAAI,iBAAiB,CAAC;AAAA,IACxB,OAAO;AACL,UAAI,YAAY,CAAA,CAAE;AAClB,UAAI,iBAAiB;AAAA,IACvB;AAGA,QAAI,cAAc,MAAM;AACxB,QAAI,YAAY,IAAI,KAAK;AACzB,eAAW,KAAK,MAAM,MAAM,SAAU,MAAK,UAAU,OAAO,CAAC;AAI7D,QAAI,UAAU;AACZ,YAAM,IAAI,KAAK,cAAc,SAAS,IAAI,SAAS,EAAE;AACrD,YAAM,IAAI,KAAK,cAAc,SAAS,IAAI,SAAS,EAAE;AAGrD,YAAM,WAAW,KAAK,IAAI,YAAW;AACrC,WAAK,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,CAAC;AAErD,UAAI,cAAc;AAClB,UAAI,KAAK,cAAc,QAAQ;AAC7B,aAAK,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACjC,sBAAc;AAAA,UACZ,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAC;AAAA,UAChB,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAC;AAAA,QAC1B;AAAA,MACM,WAAW,KAAK,cAAc,cAAc;AAC1C,sBAAc,KAAK,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,MACvD,OAAO;AACL,aAAK,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAClC,sBAAc;AAAA,UACZ,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAC;AAAA,UAChB,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAC;AAAA,QAC1B;AAAA,MACM;AAEA,WAAK,IAAI,YAAY,QAAQ;AAG7B,UAAI,eAAe,YAAY,UAAU,GAAG;AAC1C,cAAM,KAAK,YAAY,YAAY,SAAS,CAAC;AAC7C,cAAM,KAAK,YAAY,YAAY,SAAS,CAAC;AAC7C,aAAK,IAAI,YAAY,KAAK,MAAM;AAChC,aAAK,IAAI,cAAc,KAAK,MAAM;AAClC,aAAK,eAAe,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,MAChD;AAAA,IACF;AACA,QAAI,QAAO;AAGX,eAAW,KAAK,MAAM,MAAM,OAAM,GAAI;AACpC,YAAM,MAAM,UAAU,IAAI,EAAE,EAAE;AAC9B,WAAK,UAAU,GAAG,GAAG;AACrB,YAAM,OAAM,gBAAK,aAAL,mBAAe,UAAf,mBAAsB,IAAI,EAAE;AACxC,UAAI,2BAAK,OAAQ,KAAI,OAAO,GAAG,EAAE,KAAK,MAAK,CAAE;AAAA,IAC/C;AAEA,SAAK,gBAAe;AAAA,EACtB;AAAA,EAEA,UAAU,MAAM,UAAU;AACxB,UAAM,EAAE,KAAK,MAAK,IAAK;AACvB,UAAM,IAAI;AACV,UAAM,EAAE,GAAG,MAAM,KAAK;AACtB,UAAM,EAAE,OAAO,GAAG,QAAQ,EAAC,IAAK,KAAK;AACrC,QAAI,YAAY,MAAM;AACtB,QAAI,cAAc,WAAW,SAAS;AACtC,QAAI,aAAa,WAAW,IAAI,OAAO,KAAK;AAC5C,cAAU,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5B,QAAI,KAAI;AACR,QAAI,OAAM;AACV,QAAI,YAAY,MAAM;AACtB,cAAU,KAAK,GAAG,GAAG,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC,CAAE;AAC1D,QAAI,KAAI;AAER,SAAK,gBAAgB,KAAK,OAAO,IAAI,GAAG,IAAI,gBAAe,WAAW;AAAA,MACpE,QAAQ,gBAAe;AAAA,MACvB,OAAO,MAAM;AAAA,MACb,UAAU;AAAA,MACV,OAAO;AAAA,IACb,CAAK;AACD,QAAI,YAAY,MAAM;AACtB,SAAK,OAAO,QAAQ,CAAC,GAAG,MAAM;AAC5B,YAAM,MAAM,SAAS,MAAM,GAAG,GAAG,IAAI;AACrC,UAAI,SAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAAA,IACzC,CAAC;AACD,SAAK,QAAQ,QAAQ,CAAC,GAAG,MAAM;AAC7B,YAAM,MAAM,SAAS,MAAM,GAAG,GAAG,KAAK;AACtC,UAAI,SAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAAA,IACzC,CAAC;AAAA,EACH;AAAA,EAEA,UAAU,OAAO,GAAG;AAClB,UAAM,OAAO,MAAM,MAAM,IAAI,EAAE,QAAQ;AACvC,UAAM,KAAK,MAAM,MAAM,IAAI,EAAE,MAAM;AACnC,QAAI,CAAC,QAAQ,CAAC,GAAI;AAClB,UAAM,OAAO,KAAK,QAAQ,UAAU,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ;AAC9D,UAAM,MAAM,GAAG,OAAO,UAAU,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM;AACxD,UAAM,MAAM,SAAS,MAAM,MAAM,MAAM,KAAK;AAC5C,UAAM,MAAM,SAAS,IAAI,MAAM,KAAK,IAAI;AACxC,UAAM,KAAK,IAAI,GACb,KAAK,IAAI,IAAI,GACb,KAAK,IAAI,GACT,KAAK,IAAI,IAAI;AACf,QAAI,KAAK,cAAc,QAAQ;AAC7B,WAAK,UAAU,IAAI,IAAI,IAAI,EAAE;AAAA,IAC/B,WAAW,KAAK,cAAc,cAAc;AAC1C,WAAK,gBAAgB,IAAI,IAAI,IAAI,EAAE;AAAA,IACrC,OAAO;AACL,WAAK,WAAW,IAAI,IAAI,IAAI,EAAE;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,UAAU,IAAI,IAAI,IAAI,IAAI;AACxB,UAAM,EAAE,IAAG,IAAK;AAChB,QAAI,UAAS;AACb,QAAI,OAAO,IAAI,EAAE;AACjB,QAAI,OAAO,IAAI,EAAE;AACjB,QAAI,OAAM;AAAA,EACZ;AAAA,EAEA,cAAc,QAAQ;AACpB,UAAM,EAAE,IAAG,IAAK;AAChB,QAAI,UAAS;AACb,QAAI,OAAO,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AACnC,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ;AACjC,UAAI,OAAO,OAAO,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;AACrC,QAAI,OAAM;AAAA,EACZ;AAAA,EAEA,gBAAgB,IAAI,IAAI,IAAI,IAAI;AAK9B,UAAM,QAAQ,KAAK,MAAM;AAGzB,QAAI;AACQ;AAEV,YAAM;AAAA,QACJ,EAAE,GAAG,IAAI,GAAG,GAAE;AAAA,QACd,EAAE,GAAG,MAAM,GAAG,GAAE;AAAA,QAChB,EAAE,GAAG,MAAM,GAAG,GAAE;AAAA,QAChB,EAAE,GAAG,IAAI,GAAG,GAAE;AAAA,MACtB;AAAA,IACI;AAYA,UAAM,EAAE,IAAG,IAAK;AAChB,UAAM,WAAW,IAAI,UACnB,UAAU,IAAI;AAChB,QAAI,WAAW;AACf,QAAI,UAAU;AACd,SAAK,cAAc,GAAG;AACtB,QAAI,WAAW;AACf,QAAI,UAAU;AAEd,WAAO;AAAA,EACT;AAAA,EACA,WAAW,IAAI,IAAI,IAAI,IAAI;AACzB,UAAM,EAAE,IAAG,IAAK;AAChB,UAAM,KAAK,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,EAAE,IAAI,GAAG;AAC/C,QAAI,UAAS;AACb,QAAI,OAAO,IAAI,EAAE;AACjB,QAAI,cAAc,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,EAAE;AAClD,QAAI,OAAM;AAAA,EACZ;AACF;AA3XE,cADW,iBACJ,aAAY;AADd,IAAM,iBAAN;AA6XP,SAAS,UAAU,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;AACzC,MAAI,OAAO,MAAM,SAAU,KAAI,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAC;AAC3D,MAAI,UAAS;AACb,MAAI,OAAO,IAAI,EAAE,IAAI,CAAC;AACtB,MAAI,OAAO,IAAI,IAAI,EAAE,IAAI,CAAC;AAC1B,MAAI,iBAAiB,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE;AAC9C,MAAI,OAAO,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE;AAC9B,MAAI,iBAAiB,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC;AACtD,MAAI,OAAO,IAAI,EAAE,IAAI,IAAI,CAAC;AAC1B,MAAI,iBAAiB,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,EAAE;AAC9C,MAAI,OAAO,GAAG,IAAI,EAAE,EAAE;AACtB,MAAI,iBAAiB,GAAG,GAAG,IAAI,EAAE,IAAI,CAAC;AACtC,MAAI,UAAS;AACf;AC3YA,SAAS,WAAW,OAAO,GAAG,GAAG,GAAG,GAAG;AACrC,aAAW,CAAC,IAAI,CAAC,KAAK,MAAM,OAAO;AACjC,QACE,EAAE,aAAa,KACf,EAAE,aAAa,KACf,EAAE,WAAW,KACb,EAAE,WAAW;AAEb,aAAO;AAAA,EACX;AACA,SAAO;AACT;AAEO,SAAS,YAAY,MAAM,SAAS,OAAO;AAChD,SAAO;AAAA,IACL,KAAK;AACH,WAAK,MAAM,EAAE,GAAG;IAClB;AAAA,IACA,OAAO;AACL,WAAK,MAAM,EAAE,GAAG;IAClB;AAAA,EACJ;AACA;AAEO,SAAS,WAAW,OAAO,UAAU,UAAU,QAAQ,QAAQ;AACpE,MAAI,UAAU;AACd,SAAO;AAAA,IACL,KAAK;AACH,YAAM,QAAQ,UAAU,UAAU,QAAQ,MAAM;AAChD,gBAAU,WAAW,OAAO,UAAU,UAAU,QAAQ,MAAM;AAAA,IAChE;AAAA,IACA,OAAO;AACL,YAAM,KACJ,WAAW,WAAW,OAAO,UAAU,UAAU,QAAQ,MAAM;AACjE,UAAI,MAAM,KAAM,OAAM,MAAM,OAAO,EAAE;AAAA,IACvC;AAAA,EACJ;AACA;AAEO,SAAS,cAAc,OAAO,QAAQ;AAC3C,QAAM,IAAI,MAAM,MAAM,IAAI,MAAM;AAChC,MAAI,CAAC,EAAG,QAAO;AAEf,QAAM,EAAE,UAAU,UAAU,QAAQ,OAAM,IAAK;AAC/C,SAAO;AAAA,IACL,KAAK;AACH,YAAM,MAAM,OAAO,MAAM;AAAA,IAC3B;AAAA,IACA,OAAO;AACL,YAAM,QAAQ,UAAU,UAAU,QAAQ,MAAM;AAAA,IAClD;AAAA,EACJ;AACA;AAcO,SAAS,cAAc,OAAO,MAAM;AACzC,MAAI,cAAc;AAClB,MAAI,eAAe,CAAA;AAEnB,SAAO;AAAA,IACL,KAAK;AAEH,oBAAc;AACd,qBAAe,MAAM,QACjB,CAAC,GAAG,MAAM,MAAM,OAAM,CAAE,EAAE,OAAO,CAAC,MAAM;AACtC,gBAAQ,IAAI,CAAC;AACb,eAAO,EAAE,aAAa,KAAK,MAAM,EAAE,WAAW,KAAK;AAAA,MACrD,CAAC,IACD;AAGJ,iBAAW,QAAQ,cAAc;AAC/B,cAAM,MAAM,OAAO,KAAK,EAAE;AAAA,MAC5B;AAEA,YAAM,MAAM,OAAO,KAAK,EAAE;AAAA,IAC5B;AAAA,IAEA,OAAO;AAEL,UAAI,aAAa;AACf,cAAM,MAAM,IAAI,YAAY,IAAI,WAAW;AAAA,MAC7C;AAEA,iBAAW,QAAQ,cAAc;AAC/B,cAAM,MAAM,IAAI,KAAK,IAAI,IAAI;AAAA,MAC/B;AAAA,IACF;AAAA,EACJ;AACA;AAEO,SAAS,cAAc,MAAM,UAAU,QAAQ;AACpD,SAAO;AAAA,IACL,KAAK;AACH,WAAK,KAAK,QAAQ,OAAO;AACzB,WAAK,KAAK,SAAS,OAAO;AAAA,IAC5B;AAAA,IACA,OAAO;AACL,WAAK,KAAK,QAAQ,SAAS;AAC3B,WAAK,KAAK,SAAS,SAAS;AAAA,IAC9B;AAAA,EACJ;AACA;ACjHO,MAAM,aAAa;AAAA,EACxB,cAAc;AACZ,SAAK,YAAY;AACjB,SAAK,YAAY;EACnB;AAAA,EACA,KAAK,KAAK;AACR,QAAI,GAAE;AACN,SAAK,UAAU,KAAK,GAAG;AACvB,SAAK,UAAU,SAAS;AAAA,EAC1B;AAAA,EACA,OAAO;AACL,UAAM,IAAI,KAAK,UAAU,IAAG;AAC5B,QAAI,GAAG;AACL,QAAE,KAAI;AACN,WAAK,UAAU,KAAK,CAAC;AAAA,IACvB;AAAA,EACF;AAAA,EACA,OAAO;AACL,UAAM,IAAI,KAAK,UAAU,IAAG;AAC5B,QAAI,GAAG;AACL,QAAE,GAAE;AACJ,WAAK,UAAU,KAAK,CAAC;AAAA,IACvB;AAAA,EACF;AACF;ACdO,MAAM,cAAN,MAAM,YAAW;AAAA,EAKtB,YAAY,EAAE,OAAO,UAAU,MAAK,GAAI;AACtC,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,QAAQ;AAEb,SAAK,QAAQ,IAAI;AACjB,SAAK,YAAY,oBAAI;AACrB,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,WAAW;AAEhB,SAAK,UAAU;AAEf,SAAK,iBAAiB,KAAK,YAAY,KAAK,IAAI;AAChD,SAAK,aAAa,KAAK,QAAQ,KAAK,IAAI;AACxC,SAAK,cAAc,KAAK,SAAS,KAAK,IAAI;AAC1C,SAAK,aAAa,KAAK,QAAQ,KAAK,IAAI;AACxC,SAAK,WAAW,KAAK,MAAM,KAAK,IAAI;AAEpC,SAAK,YAAW;AAAA,EAClB;AAAA,EAEA,aAAa;AACX,UAAM,IAAI,KAAK,SAAS;AACxB,MAAE,oBAAoB,aAAa,KAAK,UAAU;AAClD,MAAE,oBAAoB,SAAS,KAAK,aAAa,EAAE,SAAS,MAAK,CAAE;AACnE,WAAO,oBAAoB,aAAa,KAAK,UAAU;AACvD,WAAO,oBAAoB,WAAW,KAAK,QAAQ;AACnD,WAAO,oBAAoB,WAAW,KAAK,cAAc;AAAA,EAC3D;AAAA,EAEA,cAAc;AACZ,UAAM,IAAI,KAAK,SAAS;AACxB,MAAE,iBAAiB,aAAa,KAAK,UAAU;AAC/C,MAAE,iBAAiB,SAAS,KAAK,aAAa,EAAE,SAAS,MAAK,CAAE;AAChE,WAAO,iBAAiB,aAAa,KAAK,UAAU;AACpD,WAAO,iBAAiB,WAAW,KAAK,QAAQ;AAChD,WAAO,iBAAiB,WAAW,KAAK,cAAc;AAAA,EACxD;AAAA,EAEA,YAAY,GAAG;AAEb,SAAK,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,YAAW,MAAO,KAAK;AAC3D,QAAE,eAAc;AAChB,UAAI,EAAE,SAAU,MAAK,MAAM,KAAI;AAAA,UAC1B,MAAK,MAAM;AAChB,WAAK,OAAM;AACX;AAAA,IACF;AAGA,SAAK,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,YAAW,MAAO,KAAK;AAC3D,QAAE,eAAc;AAChB,WAAK,MAAM;AACX,WAAK,OAAM;AACX;AAAA,IACF;AAGA,QAAI,EAAE,QAAQ,UAAU;AACtB,OAAC,GAAG,KAAK,SAAS,EAAE,QAAQ,CAAC,SAAS;AACpC,cAAM,UAAU,KAAK,MAAM,YAAY,IAAI;AAC3C,aAAK,MAAM,KAAK,cAAc,KAAK,OAAO,OAAO,CAAC;AAClD,aAAK,MAAM,WAAW,IAAI;AAAA,MAC5B,CAAC;AAED,WAAK,OAAM;AAAA,IACb;AAAA,EACF;AAAA,EAEA,WAAW,GAAG;AACZ,QAAI,KAAK,YAAY,GAAG;AACtB,WAAK,UAAU;AACf,WAAK,SAAS,OAAO,MAAM,SAAS;AAAA,IACtC;AAAA,EACF;AAAA,EAEA,WAAW,GAAG;AACZ,UAAM,IAAI,KAAK,SAAS,OAAO,sBAAqB;AACpD,WAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,GAAG,EAAE,UAAU,EAAE,IAAG;AAAA,EACtD;AAAA,EAEA,UAAU,GAAG;AACX,UAAM,IAAI,KAAK,WAAW,CAAC;AAC3B,WAAO,KAAK,SAAS,cAAc,EAAE,GAAG,EAAE,CAAC;AAAA,EAC7C;AAAA,EAEA,iBAAiB,GAAG,GAAG;AACrB,UAAM,OAAO,CAAC,GAAG,KAAK,MAAM,MAAM,OAAM,CAAE;AAC1C,aAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK;AACzC,YAAM,IAAI,KAAK,CAAC;AAChB,UAAI,YAAY,GAAG,GAAG,CAAC,EAAG,QAAO;AAAA,IACnC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,GAAG,GAAG;AACrB,eAAW,KAAK,KAAK,MAAM,MAAM,OAAM,GAAI;AACzC,eAAS,IAAI,GAAG,IAAI,EAAE,OAAO,QAAQ,KAAK;AACxC,cAAM,IAAI,SAAS,GAAG,EAAE,OAAO,CAAC,GAAG,GAAG,IAAI;AAC1C,YAAI,QAAQ,GAAG,GAAG,CAAC;AACjB,iBAAO,EAAE,MAAM,GAAG,MAAM,EAAE,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,EAAC;AAAA,MAC1D;AACA,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,QAAQ,KAAK;AACzC,cAAM,IAAI,SAAS,GAAG,EAAE,QAAQ,CAAC,GAAG,GAAG,KAAK;AAC5C,YAAI,QAAQ,GAAG,GAAG,CAAC;AACjB,iBAAO,EAAE,MAAM,GAAG,MAAM,EAAE,QAAQ,CAAC,GAAG,KAAK,OAAO,KAAK,EAAC;AAAA,MAC5D;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,SAAS,GAAG;AACV,MAAE,eAAc;AAChB,UAAM,EAAE,GAAG,EAAC,IAAK,KAAK,WAAW,CAAC;AAClC,UAAM,SAAS,KAAK,IAAI,QAAQ,CAAC,EAAE,MAAM;AACzC,SAAK,SAAS,OAAO,QAAQ,GAAG,CAAC;AACjC,SAAK,OAAM;AAAA,EACb;AAAA,EAEA,kBAAkB,QAAQ,QAAQ;AAChC,eAAW,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,OAAO;AACvC,UAAI,EAAE,WAAW,UAAU,EAAE,WAAW,QAAQ;AAC9C,eAAO,EAAE,IAAI,KAAK,MAAM,EAAC;AAAA,MAC3B;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB,MAAM;AACtB,UAAM,IAAI;AACV,WAAO;AAAA,MACL,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,QAAQ;AAAA,MAClC,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;AAAA,MACnC,GAAG;AAAA,MACH,GAAG;AAAA,IACT;AAAA,EACE;AAAA,EAEA,iBAAiB,MAAM,IAAI,IAAI;AAC7B,UAAM,IAAI,KAAK,kBAAkB,IAAI;AACrC,WAAO,MAAM,EAAE,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,MAAM,EAAE,KAAK,MAAM,EAAE,IAAI,EAAE;AAAA,EACpE;AAAA,EAEA,QAAQ,GAAG;AACT,UAAM,IAAI,KAAK,WAAW,CAAC;AAC3B,UAAM,IAAI,KAAK,UAAU,CAAC;AAG1B,QAAI,EAAE,WAAW,GAAG;AAClB,WAAK,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE;AAC9B;AAAA,IACF;AAGA,UAAM,OAAO,KAAK,iBAAiB,EAAE,GAAG,EAAE,CAAC;AAC3C,QAAI,EAAE,WAAW,KAAK,QAAQ,KAAK,QAAQ,OAAO;AAChD,YAAM,OAAO,SAAS,KAAK,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK;AAC3D,YAAM,aAAa,KAAK,SAAS,cAAc,KAAK,GAAG,KAAK,IAAI,CAAC;AACjE,WAAK,aAAa;AAAA,QAChB,UAAU,KAAK,KAAK;AAAA,QACpB,UAAU,KAAK,KAAK;AAAA,QACpB,GAAG,WAAW;AAAA,QACd,GAAG,WAAW;AAAA,MACtB;AACM;AAAA,IACF;AAEA,QAAI,EAAE,WAAW,KAAK,QAAQ,KAAK,QAAQ,MAAM;AAC/C,YAAM,WAAW,KAAK,kBAAkB,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE;AAClE,UAAI,UAAU;AACZ,cAAM,EAAE,MAAM,GAAE,IAAK;AAGrB,cAAM,KAAK,cAAc,KAAK,OAAO,EAAE;AACvC,YAAI,GAAI,MAAK,MAAM,KAAK,EAAE;AAE1B,cAAM,UAAU,KAAK,MAAM,MAAM,IAAI,KAAK,QAAQ;AAClD,cAAM,OAAO,QAAQ,QAAQ,UAAU,CAAC,MAAM,EAAE,OAAO,KAAK,QAAQ;AACpE,cAAM,OAAO,SAAS,SAAS,QAAQ,QAAQ,IAAI,GAAG,MAAM,KAAK;AACjE,cAAM,aAAa,KAAK,SAAS,cAAc,KAAK,GAAG,KAAK,IAAI,CAAC;AAEjE,aAAK,aAAa;AAAA,UAChB,UAAU,KAAK;AAAA,UACf,UAAU,KAAK;AAAA,UACf,GAAG,WAAW;AAAA,UACd,GAAG,WAAW;AAAA,UACd,cAAc,EAAE,IAAI,KAAI;AAAA;AAAA,QAClC;AACQ,aAAK,OAAM;AACX;AAAA,MACF;AAAA,IAEF;AAEA,UAAM,OAAO,KAAK,iBAAiB,EAAE,GAAG,EAAE,CAAC;AAE3C,QAAI,EAAE,WAAW,KAAK,QAAQ,KAAK,iBAAiB,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG;AACnE,WAAK,WAAW;AAAA,QACd,QAAQ,KAAK;AAAA,QACb,QAAQ,KAAK,KAAK;AAAA,QAClB,QAAQ,KAAK,KAAK;AAAA,QAClB,QAAQ,EAAE;AAAA,QACV,QAAQ,EAAE;AAAA,MAClB;AACM,UAAI,CAAC,EAAE,SAAU,MAAK,UAAU,MAAK;AACrC,WAAK,UAAU,IAAI,KAAK,EAAE;AAC1B,WAAK,WAAW,WAAW;AAC3B,WAAK,OAAM;AACX;AAAA,IACF;AAGA,QAAI,EAAE,WAAW,KAAK,MAAM;AAC1B,UAAI,CAAC,EAAE,SAAU,MAAK,UAAU,MAAK;AACrC,WAAK,UAAU,IAAI,KAAK,EAAE;AAC1B,WAAK,WAAW;AAAA,QACd,QAAQ,KAAK;AAAA,QACb,IAAI,EAAE,IAAI,KAAK,IAAI;AAAA,QACnB,IAAI,EAAE,IAAI,KAAK,IAAI;AAAA,QACnB,UAAU,EAAE,GAAG,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,EAAC;AAAA;AAAA,MAChD;AACM,WAAK,OAAM;AACX;AAAA,IACF;AAGA,QAAI,EAAE,WAAW,GAAG;AAClB,UAAI,KAAK,UAAU,KAAM,MAAK,UAAU;AACxC,WAAK,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE;AAC9B,WAAK,OAAM;AACX;AAAA,IACF;AAAA,EAGF;AAAA,EAEA,QAAQ,GAAG;AV9Pb;AU+PI,UAAM,IAAI,KAAK,WAAW,CAAC;AAC3B,UAAM,IAAI,KAAK,SAAS,cAAc,EAAE,GAAG,EAAE,CAAC;AAE9C,QAAI,KAAK,UAAU;AACjB,YAAM,IAAI,KAAK,MAAM,MAAM,IAAI,KAAK,SAAS,MAAM;AACnD,YAAM,KAAK,EAAE,IAAI,KAAK,SAAS;AAC/B,YAAM,KAAK,EAAE,IAAI,KAAK,SAAS;AAE/B,YAAM,OAAO,YAAW;AACxB,YAAM,OAAO,YAAW;AACxB,QAAE,KAAK,QAAQ,KAAK,IAAI,MAAM,KAAK,SAAS,SAAS,EAAE;AACvD,QAAE,KAAK,SAAS,KAAK,IAAI,MAAM,KAAK,SAAS,SAAS,EAAE;AAExD,iBAAK,UAAL,mBAAY,KAAK,eAAe;AAChC,WAAK,WAAW,WAAW;AAC3B,WAAK,OAAM;AACX;AAAA,IACF;AAEA,QAAI,KAAK,SAAS;AAChB,YAAM,KAAK,EAAE,IAAI,KAAK,QAAQ;AAC9B,YAAM,KAAK,EAAE,IAAI,KAAK,QAAQ;AAC9B,WAAK,UAAU,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE;AAC9B,WAAK,SAAS,MAAM,IAAI,EAAE;AAC1B,WAAK,OAAM;AACX;AAAA,IACF;AAEA,QAAI,KAAK,UAAU;AACjB,YAAM,IAAI,KAAK,MAAM,MAAM,IAAI,KAAK,SAAS,MAAM;AACnD,QAAE,IAAI,IAAI,EAAE,IAAI,KAAK,SAAS;AAC9B,QAAE,IAAI,IAAI,EAAE,IAAI,KAAK,SAAS;AAC9B,iBAAK,UAAL,mBAAY,KAAK,aAAa;AAC9B,WAAK,OAAM;AACX;AAAA,IACF;AAGA,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,IAAI,EAAE;AACtB,WAAK,WAAW,IAAI,EAAE;AACtB,WAAK,OAAM;AAAA,IACb;AAEA,UAAM,OAAO,KAAK,iBAAiB,EAAE,GAAG,EAAE,CAAC;AAC3C,QAAI,SAAS,KAAK,QAAQ,SAAS,KAAK,QAAQ,OAAO;AACrD,WAAK,WAAW,UAAU;AAAA,IAC5B,OAAO;AACL,WAAK,WAAW,SAAS;AAAA,IAC3B;AAEA,UAAM,OAAO,KAAK,iBAAiB,EAAE,GAAG,EAAE,CAAC;AAC3C,QAAI,QAAQ,KAAK,iBAAiB,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG;AACjD,WAAK,WAAW,WAAW;AAC3B,WAAK,OAAM;AAAA,IACb;AAAA,EACF;AAAA,EAEA,MAAM,GAAG;AACG,SAAK,WAAW,CAAC;AAC3B,UAAM,IAAI,KAAK,UAAU,CAAC;AAE1B,QAAI,KAAK,SAAS;AAChB,WAAK,UAAU;AACf;AAAA,IACF;AAEA,QAAI,KAAK,YAAY;AACnB,YAAM,OAAO,KAAK;AAClB,YAAM,SAAS,KAAK,iBAAiB,EAAE,GAAG,EAAE,CAAC;AAC7C,UAAI,UAAU,OAAO,QAAQ,MAAM;AAEjC,aAAK,MAAM;AAAA,UACT;AAAA,YACE,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,OAAO,KAAK;AAAA,YACZ,OAAO,KAAK;AAAA,UACxB;AAAA,QACA;AAAA,MACM;AAGA,WAAK,aAAa;AAClB,WAAK,OAAM;AAAA,IACb;AAEA,QAAI,KAAK,UAAU;AACjB,YAAM,IAAI,KAAK,MAAM,MAAM,IAAI,KAAK,SAAS,MAAM;AACnD,YAAM,OAAO,EAAE,GAAG,KAAK,SAAS,QAAQ,GAAG,KAAK,SAAS;AACzD,YAAM,KAAK,EAAE,GAAG,EAAE,KAAK,OAAO,GAAG,EAAE,KAAK;AACxC,UAAI,KAAK,MAAM,GAAG,KAAK,KAAK,MAAM,GAAG,GAAG;AACtC,aAAK,MAAM,KAAK,cAAc,GAAG,MAAM,EAAE,CAAC;AAAA,MAC5C;AACA,WAAK,WAAW;AAChB,WAAK,WAAW,SAAS;AAAA,IAE3B;AAEA,QAAI,KAAK,UAAU;AACjB,YAAM,IAAI,KAAK,MAAM,MAAM,IAAI,KAAK,SAAS,MAAM;AACnD,YAAM,QAAQ,KAAK,SAAS;AAC5B,YAAM,MAAM,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,IAAI;AAEnC,UAAI,MAAM,MAAM,IAAI,KAAK,MAAM,MAAM,IAAI,GAAG;AAC1C,aAAK,MAAM,KAAK,YAAY,GAAG,OAAO,GAAG,CAAC;AAAA,MAC5C;AACA,WAAK,WAAW;AAAA,IAClB;AAEA,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,SAAS;AACP,UAAM,QAAQ,KAAK;AAEnB,SAAK,SAAS,KAAK,KAAK,OAAO;AAAA,MAC7B,WAAW,KAAK;AAAA,MAChB,UAAU;AAAA;AAAA,IAChB,CAAK;AAAA,EACH;AAAA,EAEA,iBAAiB;AACf,QAAI,CAAC,KAAK,WAAY,QAAO;AAC7B,UAAM,IAAI,KAAK;AAAA,MACb,KAAK,WAAW;AAAA,MAChB,KAAK,WAAW;AAAA,IACtB;AACI,WAAO;AAAA,MACL,IAAI,EAAE;AAAA,MACN,IAAI,EAAE;AAAA,MACN,IAAI,KAAK,WAAW;AAAA,MACpB,IAAI,KAAK,WAAW;AAAA,IAC1B;AAAA,EACE;AAAA,EAEA,kBAAkB,QAAQ,QAAQ;AAChC,UAAM,IAAI,KAAK,MAAM,MAAM,IAAI,MAAM;AACrC,UAAM,OAAO,EAAE,QAAQ,UAAU,CAAC,MAAM,EAAE,OAAO,MAAM;AACvD,UAAM,IAAI,SAAS,GAAG,MAAM,MAAM,KAAK;AACvC,WAAO,KAAK,SAAS,cAAc,EAAE,GAAG,EAAE,IAAI,CAAC;AAAA,EACjD;AACF;AAjYE,cAFW,aAEJ,kBAAiB;AACxB,cAHW,aAGJ,mBAAkB;AAHpB,IAAM,aAAN;AAqYP,SAAS,QAAQ,GAAG,GAAG,GAAG;AACxB,SAAO,KAAK,EAAE,KAAK,KAAK,EAAE,IAAI,EAAE,KAAK,KAAK,EAAE,KAAK,KAAK,EAAE,IAAI,EAAE;AAChE;AClZO,MAAM,OAAO;AAAA,EAClB,YAAY,EAAE,OAAO,UAAU,OAAO,iBAAiB,KAAK;AAC1D,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,iBAAiB,KAAK,IAAI,GAAG,iBAAiB,CAAC;AAAA,EACtD;AAAA;AAAA,EAGA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,kBAAkB,GAAG;AACnB,SAAK,iBAAiB,KAAK,IAAI,GAAG,IAAI,CAAC;AAAA,EACzC;AAAA,EAEA,KAAK,SAAS,GAAG,KAAK,GAAG;AXrB3B;AWsBI,UAAM,UAAU,KAAK,IAAI,GAAG,SAAS,CAAC;AACtC,aAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,iBAAW,QAAQ,KAAK,MAAM,MAAM,OAAM,GAAI;AAC5C,cAAM,MAAM,KAAK,SAAS,MAAM,IAAI,KAAK,IAAI;AAC7C,YAAI,2BAAK,WAAW;AAClB,cAAI;AACF,gBAAI,UAAU,MAAM;AAAA,cAClB;AAAA,cACA,OAAO,KAAK;AAAA,cACZ,UAAU,CAAC,aAAa;AACtB,sBAAM,IACJ,KAAK,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,KAC3C,KAAK,OAAO,CAAC;AACf,uBAAO,IAAI,KAAK,MAAM,SAAS,KAAK,IAAI,EAAE,EAAE,IAAI;AAAA,cAClD;AAAA,cACA,WAAW,CAAC,UAAU,UAAU;AAC9B,sBAAM,IACJ,KAAK,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,KAC5C,KAAK,QAAQ,CAAC;AAChB,oBAAI,EAAG,MAAK,MAAM,UAAU,KAAK,IAAI,EAAE,IAAI,KAAK;AAAA,cAClD;AAAA,YACd,CAAa;AAAA,UACH,SAAS,KAAK;AACZ,6BAAK,UAAL,mBAAY,SAAZ,4BAAmB,SAAS;AAAA,UAC9B;AAAA,QACF;AAAA,MACF;AAEA,WAAK,MAAM;IACb;AAAA,EACF;AAAA,EAEA,QAAQ;AXtDV;AWuDI,QAAI,KAAK,QAAS;AAClB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,qBAAK,UAAL,mBAAY,SAAZ,4BAAmB;AAEnB,UAAM,OAAO,CAAC,MAAM;AX5DxB,UAAAC,KAAAC;AW6DM,UAAI,CAAC,KAAK,QAAS;AACnB,YAAM,OAAO,KAAK,QAAQ,IAAI,KAAK,QAAQ;AAC3C,WAAK,QAAQ;AACb,YAAM,KAAK,OAAO;AAGlB,WAAK,KAAK,KAAK,gBAAgB,EAAE;AAGjC,OAAAA,OAAAD,MAAA,KAAK,UAAL,gBAAAA,IAAY,SAAZ,gBAAAC,IAAA,KAAAD,KAAmB,eAAe;AAAA,QAChC,MAAM;AAAA,QACN;AAAA,QACA,SAAS;AAAA,QACT,KAAK,KAAK;AAAA,MAClB;AAEM,WAAK,OAAO,sBAAsB,IAAI;AAAA,IACxC;AAEA,SAAK,OAAO,sBAAsB,IAAI;AAAA,EACxC;AAAA,EAEA,OAAO;AXnFT;AWoFI,QAAI,CAAC,KAAK,QAAS;AACnB,SAAK,UAAU;AACf,QAAI,KAAK,KAAM,sBAAqB,KAAK,IAAI;AAC7C,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,qBAAK,UAAL,mBAAY,SAAZ,4BAAmB;AAAA,EACrB;AACF;ACpFO,SAAS,kBACd,QACA,EAAE,OAAO,OAAO,aAAa,UAAU,KAAI,IAAK,CAAA,GAChD;AACA,QAAM,QACJ,eACA,YAAY;AAAA;AAAA,IAEV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACN,CAAK;AACH,QAAM,WAAW,IAAI;AACrB,QAAM,QAAQ,IAAI,MAAM,EAAE,OAAO,SAAQ,CAAE;AAC3C,QAAM,WAAW,IAAI,eAAe,QAAQ,EAAE,OAAO,SAAQ,CAAE;AAC/D,QAAM,aAAa,IAAI,WAAW,EAAE,OAAO,UAAU,MAAK,CAAE;AAC5D,QAAM,SAAS,IAAI,OAAO,EAAE,OAAO,UAAU,MAAK,CAAE;AAEpD,QAAM,GAAG,eAAe,CAAC,EAAE,MAAM,GAAE,MAAO;AACxC,aAAS,KAAK,OAAO;AAAA,MACnB,WAAW,WAAW;AAAA,MACtB,UAAU,WAAW,aAAa,WAAW,eAAc,IAAK;AAAA;AAAA,MAChE,SAAS;AAAA,MACT;AAAA,MACA;AAAA,IACN,CAAK;AAAA,EACH,CAAC;AACD,QAAM,GAAG,gBAAgB,MAAM;AAE7B,aAAS,KAAK,OAAO;AAAA,MACnB,WAAW,WAAW;AAAA,MACtB,UAAU,WAAW,aAAa,WAAW,eAAc,IAAK;AAAA,MAChE,SAAS;AAAA,MACT,MAAM,YAAY,IAAG;AAAA,MACrB,IAAI;AAAA,IACV,CAAK;AAAA,EACH,CAAC;AACD,QAAM,GAAG,eAAe,MAAM;AAE5B,aAAS,KAAK,OAAO;AAAA,MACnB,WAAW,WAAW;AAAA,MACtB,UAAU,WAAW,aAAa,WAAW,eAAc,IAAK;AAAA,MAChE,SAAS;AAAA,MACT,MAAM,YAAY,IAAG;AAAA,MACrB,IAAI;AAAA,IACV,CAAK;AAAA,EACH,CAAC;AAGD,WAAS,SAAS,aAAa;AAAA,IAC7B,OAAO;AAAA,IACP,MAAM,EAAE,GAAG,KAAK,GAAG,GAAE;AAAA,IACrB,QAAQ,CAAC,EAAE,MAAM,MAAM,UAAU,MAAK,CAAE;AAAA,IACxC,SAAS,CAAC,EAAE,MAAM,OAAO,UAAU,MAAK,CAAE;AAAA,IAC1C,SAAS,MAAM;AACb,WAAK,MAAM,OAAO;AAAA,IACpB;AAAA,IACA,UAAU,MAAM,EAAE,IAAI,UAAU,UAAS,GAAI;AAE3C,YAAM,WAAW,SAAS,IAAI;AAC9B,YAAM,OAAO,YAAY,KAAK,MAAM,QAAQ,IAAI,WAAW;AAC3D;AAAA,QACE;AAAA,QACA,MAAM,MAAM,KAAK,MAAO,YAAY,QAAQ,MAAQ,GAAG,CAAC;AAAA,MAChE;AAAA,IACI;AAAA,IACA,OAAO,MAAM,EAAE,KAAK,OAAAE,OAAK,GAAI;AAE3B,YAAM,EAAE,GAAG,MAAM,KAAK;AACtB,YAAM,EAAE,OAAO,MAAM,KAAK;AAAA,IAS5B;AAAA,EACJ,CAAG;AAID,WAAS,OAAO,OAAO,aAAa,OAAO,YAAY;AACvD,aAAW,OAAM;AAEjB,QAAM,KAAK,IAAI,eAAe,MAAM;AAClC,aAAS,OAAO,OAAO,aAAa,OAAO,YAAY;AACvD,eAAW,OAAM;AAAA,EACnB,CAAC;AACD,KAAG,QAAQ,MAAM;AAEjB,QAAM,MAAM;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS,IAAI,SAAS,MAAM,QAAQ,GAAG,IAAI;AAAA,IAC3C,QAAQ,MAAM,MAAM,OAAM;AAAA,IAC1B,UAAU,CAAC,SAAS,MAAM,SAAS,MAAM,EAAE,OAAO,UAAU;AAAA,IAC5D,QAAQ,CAAC,GAAG,MAAM,SAAS,OAAO,GAAG,CAAC;AAAA,IACtC,QAAQ,MAAM,WAAW,OAAM;AAAA,IAC/B,OAAO,MAAM,OAAO,MAAK;AAAA,IACzB,MAAM,MAAM,OAAO,KAAI;AAAA,IACvB,SAAS,MAAM;AACb,aAAO,KAAI;AACX,SAAG,WAAU;AAAA,IACf;AAAA,EACJ;AAEE,MAAI,QAAS,QAAO;AACpB,SAAO;AACT;"}